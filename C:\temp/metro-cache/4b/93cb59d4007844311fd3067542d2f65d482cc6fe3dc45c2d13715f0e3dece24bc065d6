{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/interopRequireWildcard","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/extends","data":{"isAsync":false}},{"name":"react","data":{"isAsync":false}},{"name":"react-native","data":{"isAsync":false}},{"name":"react-native-screens","data":{"isAsync":false}},{"name":"@react-navigation/native","data":{"isAsync":false}},{"name":"./GestureHandler","data":{"isAsync":false}},{"name":"./SafeAreaProviderCompat","data":{"isAsync":false}},{"name":"./ResourceSavingScene","data":{"isAsync":false}},{"name":"./DrawerContent","data":{"isAsync":false}},{"name":"./Drawer","data":{"isAsync":false}},{"name":"../utils/DrawerOpenContext","data":{"isAsync":false}},{"name":"../utils/DrawerPositionContext","data":{"isAsync":false}},{"name":"../utils/useWindowDimensions","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/interopRequireWildcard\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = DrawerView;\n\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/toConsumableArray\"));\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/defineProperty\"));\n\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/slicedToArray\"));\n\n  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/extends\"));\n\n  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6], \"react\"));\n\n  var _reactNative = _$$_REQUIRE(_dependencyMap[7], \"react-native\");\n\n  var _reactNativeScreens = _$$_REQUIRE(_dependencyMap[8], \"react-native-screens\");\n\n  var _native = _$$_REQUIRE(_dependencyMap[9], \"@react-navigation/native\");\n\n  var _GestureHandler = _$$_REQUIRE(_dependencyMap[10], \"./GestureHandler\");\n\n  var _SafeAreaProviderCompat = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11], \"./SafeAreaProviderCompat\"));\n\n  var _ResourceSavingScene = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12], \"./ResourceSavingScene\"));\n\n  var _DrawerContent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13], \"./DrawerContent\"));\n\n  var _Drawer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14], \"./Drawer\"));\n\n  var _DrawerOpenContext = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15], \"../utils/DrawerOpenContext\"));\n\n  var _DrawerPositionContext = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16], \"../utils/DrawerPositionContext\"));\n\n  var _useWindowDimensions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17], \"../utils/useWindowDimensions\"));\n\n  var _jsxFileName = \"/media/shashwatmdas/Shashwat2/kids-linkedin/kids-linkedin/node_modules/@react-navigation/drawer/src/views/DrawerView.tsx\";\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  var getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n    var height = _ref.height,\n        width = _ref.width;\n    var smallerAxisSize = Math.min(height, width);\n    var isLandscape = width > height;\n    var isTablet = smallerAxisSize >= 600;\n    var appBarHeight = _reactNative.Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n    var maxWidth = isTablet ? 320 : 280;\n    return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n  };\n\n  var GestureHandlerWrapper = _GestureHandler.GestureHandlerRootView != null ? _GestureHandler.GestureHandlerRootView : _reactNative.View;\n\n  function DrawerView(_ref2) {\n    var _this = this;\n\n    var state = _ref2.state,\n        navigation = _ref2.navigation,\n        descriptors = _ref2.descriptors,\n        _ref2$lazy = _ref2.lazy,\n        lazy = _ref2$lazy === void 0 ? true : _ref2$lazy,\n        _ref2$drawerContent = _ref2.drawerContent,\n        drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n      return React.createElement(_DrawerContent.default, (0, _extends2.default)({}, props, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 5\n        }\n      }));\n    } : _ref2$drawerContent,\n        _ref2$drawerPosition = _ref2.drawerPosition,\n        drawerPosition = _ref2$drawerPosition === void 0 ? _reactNative.I18nManager.isRTL ? 'right' : 'left' : _ref2$drawerPosition,\n        _ref2$keyboardDismiss = _ref2.keyboardDismissMode,\n        keyboardDismissMode = _ref2$keyboardDismiss === void 0 ? 'on-drag' : _ref2$keyboardDismiss,\n        _ref2$overlayColor = _ref2.overlayColor,\n        overlayColor = _ref2$overlayColor === void 0 ? 'rgba(0, 0, 0, 0.5)' : _ref2$overlayColor,\n        _ref2$drawerType = _ref2.drawerType,\n        drawerType = _ref2$drawerType === void 0 ? 'front' : _ref2$drawerType,\n        _ref2$hideStatusBar = _ref2.hideStatusBar,\n        hideStatusBar = _ref2$hideStatusBar === void 0 ? false : _ref2$hideStatusBar,\n        _ref2$statusBarAnimat = _ref2.statusBarAnimation,\n        statusBarAnimation = _ref2$statusBarAnimat === void 0 ? 'slide' : _ref2$statusBarAnimat,\n        drawerContentOptions = _ref2.drawerContentOptions,\n        drawerStyle = _ref2.drawerStyle,\n        edgeWidth = _ref2.edgeWidth,\n        gestureHandlerProps = _ref2.gestureHandlerProps,\n        minSwipeDistance = _ref2.minSwipeDistance,\n        sceneContainerStyle = _ref2.sceneContainerStyle;\n\n    var _React$useState = React.useState([state.index]),\n        _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n        loaded = _React$useState2[0],\n        setLoaded = _React$useState2[1];\n\n    var dimensions = (0, _useWindowDimensions.default)();\n\n    var _useTheme = (0, _native.useTheme)(),\n        colors = _useTheme.colors;\n\n    var isDrawerOpen = state.history.some(function (it) {\n      return it.type === 'drawer';\n    });\n    var handleDrawerOpen = React.useCallback(function () {\n      navigation.dispatch(_objectSpread(_objectSpread({}, _native.DrawerActions.openDrawer()), {}, {\n        target: state.key\n      }));\n    }, [navigation, state.key]);\n    var handleDrawerClose = React.useCallback(function () {\n      navigation.dispatch(_objectSpread(_objectSpread({}, _native.DrawerActions.closeDrawer()), {}, {\n        target: state.key\n      }));\n    }, [navigation, state.key]);\n    React.useEffect(function () {\n      if (isDrawerOpen) {\n        navigation.emit({\n          type: 'drawerOpen'\n        });\n      } else {\n        navigation.emit({\n          type: 'drawerClose'\n        });\n      }\n    }, [isDrawerOpen, navigation]);\n    React.useEffect(function () {\n      var subscription;\n\n      if (isDrawerOpen) {\n        subscription = _reactNative.BackHandler.addEventListener('hardwareBackPress', function () {\n          handleDrawerClose();\n          return true;\n        });\n      }\n\n      return function () {\n        var _subscription;\n\n        return (_subscription = subscription) == null ? void 0 : _subscription.remove();\n      };\n    }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n\n    if (!loaded.includes(state.index)) {\n      setLoaded([].concat((0, _toConsumableArray2.default)(loaded), [state.index]));\n    }\n\n    var renderNavigationView = function renderNavigationView(_ref3) {\n      var progress = _ref3.progress;\n      return React.createElement(_DrawerPositionContext.default.Provider, {\n        value: drawerPosition,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 7\n        }\n      }, drawerContent(_objectSpread(_objectSpread({}, drawerContentOptions), {}, {\n        progress: progress,\n        state: state,\n        navigation: navigation,\n        descriptors: descriptors\n      })));\n    };\n\n    var renderContent = function renderContent() {\n      return React.createElement(_reactNativeScreens.ScreenContainer, {\n        style: styles.content,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 7\n        }\n      }, state.routes.map(function (route, index) {\n        var descriptor = descriptors[route.key];\n        var unmountOnBlur = descriptor.options.unmountOnBlur;\n        var isFocused = state.index === index;\n\n        if (unmountOnBlur && !isFocused) {\n          return null;\n        }\n\n        if (lazy && !loaded.includes(index) && !isFocused) {\n          return null;\n        }\n\n        return React.createElement(_ResourceSavingScene.default, {\n          key: route.key,\n          style: [_reactNative.StyleSheet.absoluteFill, {\n            opacity: isFocused ? 1 : 0\n          }],\n          isVisible: isFocused,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }\n        }, descriptor.render());\n      }));\n    };\n\n    var activeKey = state.routes[state.index].key;\n    var _descriptors$activeKe = descriptors[activeKey].options,\n        gestureEnabled = _descriptors$activeKe.gestureEnabled,\n        swipeEnabled = _descriptors$activeKe.swipeEnabled;\n    return React.createElement(_native.NavigationHelpersContext.Provider, {\n      value: navigation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 5\n      }\n    }, React.createElement(GestureHandlerWrapper, {\n      style: styles.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 7\n      }\n    }, React.createElement(_SafeAreaProviderCompat.default, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }\n    }, React.createElement(_DrawerOpenContext.default.Provider, {\n      value: isDrawerOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }\n    }, React.createElement(_Drawer.default, {\n      open: isDrawerOpen,\n      gestureEnabled: gestureEnabled,\n      swipeEnabled: swipeEnabled,\n      onOpen: handleDrawerOpen,\n      onClose: handleDrawerClose,\n      gestureHandlerProps: gestureHandlerProps,\n      drawerType: drawerType,\n      drawerPosition: drawerPosition,\n      sceneContainerStyle: [{\n        backgroundColor: colors.background\n      }, sceneContainerStyle],\n      drawerStyle: [{\n        width: getDefaultDrawerWidth(dimensions),\n        backgroundColor: colors.card\n      }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n        borderRightColor: colors.border,\n        borderRightWidth: _reactNative.StyleSheet.hairlineWidth\n      } : {\n        borderLeftColor: colors.border,\n        borderLeftWidth: _reactNative.StyleSheet.hairlineWidth\n      }), drawerStyle],\n      overlayStyle: {\n        backgroundColor: overlayColor\n      },\n      swipeEdgeWidth: edgeWidth,\n      swipeDistanceThreshold: minSwipeDistance,\n      hideStatusBar: hideStatusBar,\n      statusBarAnimation: statusBarAnimation,\n      renderDrawerContent: renderNavigationView,\n      renderSceneContent: renderContent,\n      keyboardDismissMode: keyboardDismissMode,\n      dimensions: dimensions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 13\n      }\n    })))));\n  }\n\n  var styles = _reactNative.StyleSheet.create({\n    content: {\n      flex: 1\n    }\n  });\n});","lineCount":293,"map":[[19,0,1,0],[21,0,2,0],[23,0,10,0],[25,0,11,0],[27,0,18,0],[29,0,19,0],[31,0,20,0],[33,0,21,0],[35,0,22,0],[37,0,23,0],[39,0,24,0],[41,0,25,0],[49,0,39,0],[49,6,39,6,"getDefaultDrawerWidth"],[49,27,39,27],[49,30,39,30],[49,39,39,6,"getDefaultDrawerWidth"],[49,60,39,30],[49,67,45,6],[50,0,45,6],[50,8,40,2,"height"],[50,14,45,6],[50,22,40,2,"height"],[50,28,45,6],[51,0,45,6],[51,8,41,2,"width"],[51,13,45,6],[51,21,41,2,"width"],[51,26,45,6],[52,0,51,2],[52,8,51,8,"smallerAxisSize"],[52,23,51,23],[52,26,51,26,"Math"],[52,30,51,30],[52,31,51,31,"min"],[52,34,51,26],[52,35,51,35,"height"],[52,41,51,26],[52,43,51,43,"width"],[52,48,51,26],[52,49,51,2],[53,0,52,2],[53,8,52,8,"isLandscape"],[53,19,52,19],[53,22,52,22,"width"],[53,27,52,27],[53,30,52,30,"height"],[53,36,52,2],[54,0,53,2],[54,8,53,8,"isTablet"],[54,16,53,16],[54,19,53,19,"smallerAxisSize"],[54,34,53,34],[54,38,53,38],[54,41,53,2],[55,0,54,2],[55,8,54,8,"appBarHeight"],[55,20,54,20],[55,23,54,23,"Platform"],[55,45,54,32,"OS"],[55,47,54,23],[55,52,54,39],[55,57,54,23],[55,60,54,48,"isLandscape"],[55,71,54,59],[55,74,54,62],[55,76,54,59],[55,79,54,67],[55,81,54,23],[55,84,54,73],[55,86,54,2],[56,0,55,2],[56,8,55,8,"maxWidth"],[56,16,55,16],[56,19,55,19,"isTablet"],[56,27,55,27],[56,30,55,30],[56,33,55,27],[56,36,55,36],[56,39,55,2],[57,0,57,2],[57,11,57,9,"Math"],[57,15,57,13],[57,16,57,14,"min"],[57,19,57,9],[57,20,57,18,"smallerAxisSize"],[57,35,57,33],[57,38,57,36,"appBarHeight"],[57,50,57,9],[57,52,57,50,"maxWidth"],[57,60,57,9],[57,61,57,2],[58,0,58,1],[58,3,39,0],[60,0,60,0],[60,6,60,6,"GestureHandlerWrapper"],[60,27,60,27],[60,30,60,30,"GestureHandlerRootView"],[60,68,60,27],[60,79,60,30,"GestureHandlerRootView"],[60,117,60,27],[60,120,60,56,"View"],[60,137,60,0],[62,0,65,15],[62,11,65,24,"DrawerView"],[62,21,65,15],[62,29,85,10],[63,0,85,10],[65,0,85,10],[65,8,66,2,"state"],[65,13,85,10],[65,22,66,2,"state"],[65,27,85,10],[66,0,85,10],[66,8,67,2,"navigation"],[66,18,85,10],[66,27,67,2,"navigation"],[66,37,85,10],[67,0,85,10],[67,8,68,2,"descriptors"],[67,19,85,10],[67,28,68,2,"descriptors"],[67,39,85,10],[68,0,85,10],[68,27,69,2,"lazy"],[68,31,85,10],[69,0,85,10],[69,8,69,2,"lazy"],[69,12,85,10],[69,39,69,9],[69,43,85,10],[70,0,85,10],[70,36,70,2,"drawerContent"],[70,49,85,10],[71,0,85,10],[71,8,70,2,"drawerContent"],[71,21,85,10],[71,57,70,18],[71,67,70,19,"props"],[71,72,70,18],[72,0,70,18],[72,13,71,4],[72,33,71,5],[72,55,71,4],[72,84,71,23,"props"],[72,89,71,4],[73,0,71,4],[74,0,71,4],[75,0,71,4],[76,0,71,4],[77,0,71,4],[78,0,71,4],[79,0,71,4],[79,9,70,18],[80,0,70,18],[80,5,85,10],[81,0,85,10],[81,37,73,2,"drawerPosition"],[81,51,85,10],[82,0,85,10],[82,8,73,2,"drawerPosition"],[82,22,85,10],[82,59,73,19,"I18nManager"],[82,84,73,31,"isRTL"],[82,89,73,19],[82,92,73,39],[82,99,73,19],[82,102,73,49],[82,108,85,10],[83,0,85,10],[83,38,74,2,"keyboardDismissMode"],[83,57,85,10],[84,0,85,10],[84,8,74,2,"keyboardDismissMode"],[84,27,85,10],[84,65,74,24],[84,74,85,10],[85,0,85,10],[85,35,75,2,"overlayColor"],[85,47,85,10],[86,0,85,10],[86,8,75,2,"overlayColor"],[86,20,85,10],[86,55,75,17],[86,75,85,10],[87,0,85,10],[87,33,76,2,"drawerType"],[87,43,85,10],[88,0,85,10],[88,8,76,2,"drawerType"],[88,18,85,10],[88,51,76,15],[88,58,85,10],[89,0,85,10],[89,36,77,2,"hideStatusBar"],[89,49,85,10],[90,0,85,10],[90,8,77,2,"hideStatusBar"],[90,21,85,10],[90,57,77,18],[90,62,85,10],[91,0,85,10],[91,38,78,2,"statusBarAnimation"],[91,56,85,10],[92,0,85,10],[92,8,78,2,"statusBarAnimation"],[92,26,85,10],[92,64,78,23],[92,71,85,10],[93,0,85,10],[93,8,79,2,"drawerContentOptions"],[93,28,85,10],[93,37,79,2,"drawerContentOptions"],[93,57,85,10],[94,0,85,10],[94,8,80,2,"drawerStyle"],[94,19,85,10],[94,28,80,2,"drawerStyle"],[94,39,85,10],[95,0,85,10],[95,8,81,2,"edgeWidth"],[95,17,85,10],[95,26,81,2,"edgeWidth"],[95,35,85,10],[96,0,85,10],[96,8,82,2,"gestureHandlerProps"],[96,27,85,10],[96,36,82,2,"gestureHandlerProps"],[96,55,85,10],[97,0,85,10],[97,8,83,2,"minSwipeDistance"],[97,24,85,10],[97,33,83,2,"minSwipeDistance"],[97,49,85,10],[98,0,85,10],[98,8,84,2,"sceneContainerStyle"],[98,27,85,10],[98,36,84,2,"sceneContainerStyle"],[98,55,85,10],[100,0,85,10],[100,26,86,30,"React"],[100,31,86,35],[100,32,86,36,"useState"],[100,40,86,30],[100,41,86,45],[100,42,86,46,"state"],[100,47,86,51],[100,48,86,52,"index"],[100,53,86,45],[100,54,86,30],[100,55,85,10],[101,0,85,10],[102,0,85,10],[102,8,86,9,"loaded"],[102,14,85,10],[103,0,85,10],[103,8,86,17,"setLoaded"],[103,17,85,10],[105,0,87,2],[105,8,87,8,"dimensions"],[105,18,87,18],[105,21,87,21],[105,56,87,2],[107,0,85,10],[107,20,89,21],[107,43,85,10],[108,0,85,10],[108,8,89,10,"colors"],[108,14,85,10],[108,27,89,10,"colors"],[108,33,85,10],[110,0,91,2],[110,8,91,8,"isDrawerOpen"],[110,20,91,20],[110,23,91,23,"state"],[110,28,91,28],[110,29,91,29,"history"],[110,36,91,23],[110,37,91,37,"some"],[110,41,91,23],[110,42,91,42],[110,52,91,43,"it"],[110,54,91,42],[111,0,91,42],[111,13,91,50,"it"],[111,15,91,52],[111,16,91,53,"type"],[111,20,91,50],[111,25,91,62],[111,33,91,42],[112,0,91,42],[112,5,91,23],[112,6,91,2],[113,0,93,2],[113,8,93,8,"handleDrawerOpen"],[113,24,93,24],[113,27,93,27,"React"],[113,32,93,32],[113,33,93,33,"useCallback"],[113,44,93,27],[113,45,93,45],[113,57,93,51],[114,0,94,4,"navigation"],[114,6,94,4,"navigation"],[114,16,94,14],[114,17,94,15,"dispatch"],[114,25,94,4],[114,58,95,9,"DrawerActions"],[114,80,95,23,"openDrawer"],[114,90,95,9],[114,92,94,4],[115,0,96,6,"target"],[115,8,96,6,"target"],[115,14,96,12],[115,16,96,14,"state"],[115,21,96,19],[115,22,96,20,"key"],[116,0,94,4],[117,0,98,3],[117,5,93,27],[117,7,98,5],[117,8,98,6,"navigation"],[117,18,98,5],[117,20,98,18,"state"],[117,25,98,23],[117,26,98,24,"key"],[117,29,98,5],[117,30,93,27],[117,31,93,2],[118,0,100,2],[118,8,100,8,"handleDrawerClose"],[118,25,100,25],[118,28,100,28,"React"],[118,33,100,33],[118,34,100,34,"useCallback"],[118,45,100,28],[118,46,100,46],[118,58,100,52],[119,0,101,4,"navigation"],[119,6,101,4,"navigation"],[119,16,101,14],[119,17,101,15,"dispatch"],[119,25,101,4],[119,58,102,9,"DrawerActions"],[119,80,102,23,"closeDrawer"],[119,91,102,9],[119,93,101,4],[120,0,103,6,"target"],[120,8,103,6,"target"],[120,14,103,12],[120,16,103,14,"state"],[120,21,103,19],[120,22,103,20,"key"],[121,0,101,4],[122,0,105,3],[122,5,100,28],[122,7,105,5],[122,8,105,6,"navigation"],[122,18,105,5],[122,20,105,18,"state"],[122,25,105,23],[122,26,105,24,"key"],[122,29,105,5],[122,30,100,28],[122,31,100,2],[123,0,107,2,"React"],[123,4,107,2,"React"],[123,9,107,7],[123,10,107,8,"useEffect"],[123,19,107,2],[123,20,107,18],[123,32,107,24],[124,0,108,4],[124,10,108,8,"isDrawerOpen"],[124,22,108,4],[124,24,108,22],[125,0,109,6,"navigation"],[125,8,109,6,"navigation"],[125,18,109,16],[125,19,109,17,"emit"],[125,23,109,6],[125,24,109,22],[126,0,109,24,"type"],[126,10,109,24,"type"],[126,14,109,28],[126,16,109,30],[127,0,109,22],[127,9,109,6],[128,0,110,5],[128,7,108,4],[128,13,110,11],[129,0,111,6,"navigation"],[129,8,111,6,"navigation"],[129,18,111,16],[129,19,111,17,"emit"],[129,23,111,6],[129,24,111,22],[130,0,111,24,"type"],[130,10,111,24,"type"],[130,14,111,28],[130,16,111,30],[131,0,111,22],[131,9,111,6],[132,0,112,5],[133,0,113,3],[133,5,107,2],[133,7,113,5],[133,8,113,6,"isDrawerOpen"],[133,20,113,5],[133,22,113,20,"navigation"],[133,32,113,5],[133,33,107,2],[134,0,115,2,"React"],[134,4,115,2,"React"],[134,9,115,7],[134,10,115,8,"useEffect"],[134,19,115,2],[134,20,115,18],[134,32,115,24],[135,0,116,4],[135,10,116,8,"subscription"],[135,22,116,4],[137,0,118,4],[137,10,118,8,"isDrawerOpen"],[137,22,118,4],[137,24,118,22],[138,0,122,6,"subscription"],[138,8,122,6,"subscription"],[138,20,122,18],[138,23,122,21,"BackHandler"],[138,48,122,33,"addEventListener"],[138,64,122,21],[138,65,122,50],[138,84,122,21],[138,86,122,71],[138,98,122,77],[139,0,123,8,"handleDrawerClose"],[139,10,123,8,"handleDrawerClose"],[139,27,123,25],[140,0,125,8],[140,17,125,15],[140,21,125,8],[141,0,126,7],[141,9,122,21],[141,10,122,6],[142,0,127,5],[144,0,129,4],[144,13,129,11],[145,0,129,11],[147,0,129,11],[147,32,129,17,"subscription"],[147,44,129,11],[147,65,129,17],[147,79,129,31,"remove"],[147,85,129,17],[147,87,129,11],[148,0,129,11],[148,7,129,4],[149,0,130,3],[149,5,115,2],[149,7,130,5],[149,8,130,6,"handleDrawerClose"],[149,25,130,5],[149,27,130,25,"isDrawerOpen"],[149,39,130,5],[149,41,130,39,"navigation"],[149,51,130,5],[149,53,130,51,"state"],[149,58,130,56],[149,59,130,57,"key"],[149,62,130,5],[149,63,115,2],[151,0,132,2],[151,8,132,6],[151,9,132,7,"loaded"],[151,15,132,13],[151,16,132,14,"includes"],[151,24,132,7],[151,25,132,23,"state"],[151,30,132,28],[151,31,132,29,"index"],[151,36,132,7],[151,37,132,2],[151,39,132,37],[152,0,133,4,"setLoaded"],[152,6,133,4,"setLoaded"],[152,15,133,13],[152,59,133,18,"loaded"],[152,65,133,13],[152,69,133,26,"state"],[152,74,133,31],[152,75,133,32,"index"],[152,80,133,13],[152,83,133,4],[153,0,134,3],[155,0,136,2],[155,8,136,8,"renderNavigationView"],[155,28,136,28],[155,31,136,31],[155,40,136,8,"renderNavigationView"],[155,60,136,31],[155,68,136,54],[156,0,136,54],[156,10,136,34,"progress"],[156,18,136,54],[156,27,136,34,"progress"],[156,35,136,54],[157,0,137,4],[157,13,138,6],[157,33,138,7],[157,63,138,6],[157,64,138,29],[157,72,138,6],[158,0,138,38],[158,8,138,38],[158,13,138,43],[158,15,138,45,"drawerPosition"],[158,29,138,6],[159,0,138,6],[160,0,138,6],[161,0,138,6],[162,0,138,6],[163,0,138,6],[164,0,138,6],[165,0,138,6],[165,9,139,9,"drawerContent"],[165,22,139,22],[165,55,140,13,"drawerContentOptions"],[165,75,139,22],[166,0,141,10,"progress"],[166,8,141,10,"progress"],[166,16,141,18],[166,18,141,20,"progress"],[166,26,139,22],[167,0,142,10,"state"],[167,8,142,10,"state"],[167,13,142,15],[167,15,142,17,"state"],[167,20,139,22],[168,0,143,10,"navigation"],[168,8,143,10,"navigation"],[168,18,143,20],[168,20,143,22,"navigation"],[168,30,139,22],[169,0,144,10,"descriptors"],[169,8,144,10,"descriptors"],[169,19,144,21],[169,21,144,23,"descriptors"],[170,0,139,22],[170,9,138,6],[170,10,137,4],[171,0,148,3],[171,5,136,2],[173,0,150,2],[173,8,150,8,"renderContent"],[173,21,150,21],[173,24,150,24],[173,33,150,8,"renderContent"],[173,46,150,24],[173,49,150,30],[174,0,151,4],[174,13,152,6],[174,33,152,7],[174,68,152,6],[175,0,152,23],[175,8,152,23],[175,13,152,28],[175,15,152,30,"styles"],[175,21,152,36],[175,22,152,37,"content"],[175,29,152,6],[176,0,152,6],[177,0,152,6],[178,0,152,6],[179,0,152,6],[180,0,152,6],[181,0,152,6],[182,0,152,6],[182,9,153,9,"state"],[182,14,153,14],[182,15,153,15,"routes"],[182,21,153,9],[182,22,153,22,"map"],[182,25,153,9],[182,26,153,26],[182,36,153,27,"route"],[182,41,153,26],[182,43,153,34,"index"],[182,48,153,26],[182,50,153,44],[183,0,154,10],[183,12,154,16,"descriptor"],[183,22,154,26],[183,25,154,29,"descriptors"],[183,36,154,40],[183,37,154,41,"route"],[183,42,154,46],[183,43,154,47,"key"],[183,46,154,40],[183,47,154,10],[184,0,153,44],[184,12,155,18,"unmountOnBlur"],[184,25,153,44],[184,28,155,36,"descriptor"],[184,38,155,46],[184,39,155,47,"options"],[184,46,153,44],[184,47,155,18,"unmountOnBlur"],[184,60,153,44],[185,0,156,10],[185,12,156,16,"isFocused"],[185,21,156,25],[185,24,156,28,"state"],[185,29,156,33],[185,30,156,34,"index"],[185,35,156,28],[185,40,156,44,"index"],[185,45,156,10],[187,0,158,10],[187,12,158,14,"unmountOnBlur"],[187,25,158,27],[187,29,158,31],[187,30,158,32,"isFocused"],[187,39,158,10],[187,41,158,43],[188,0,159,12],[188,17,159,19],[188,21,159,12],[189,0,160,11],[191,0,162,10],[191,12,162,14,"lazy"],[191,16,162,18],[191,20,162,22],[191,21,162,23,"loaded"],[191,27,162,29],[191,28,162,30,"includes"],[191,36,162,23],[191,37,162,39,"index"],[191,42,162,23],[191,43,162,14],[191,47,162,49],[191,48,162,50,"isFocused"],[191,57,162,10],[191,59,162,61],[192,0,164,12],[192,17,164,19],[192,21,164,12],[193,0,165,11],[195,0,167,10],[195,15,168,12],[195,35,168,13],[195,63,168,12],[196,0,169,14],[196,10,169,14],[196,13,169,17],[196,15,169,19,"route"],[196,20,169,24],[196,21,169,25,"key"],[196,24,168,12],[197,0,170,14],[197,10,170,14],[197,15,170,19],[197,17,170,21],[197,18,170,22,"StyleSheet"],[197,42,170,33,"absoluteFill"],[197,54,170,21],[197,56,170,47],[198,0,170,49,"opacity"],[198,12,170,49,"opacity"],[198,19,170,56],[198,21,170,58,"isFocused"],[198,30,170,67],[198,33,170,70],[198,34,170,67],[198,37,170,74],[199,0,170,47],[199,11,170,21],[199,12,168,12],[200,0,171,14],[200,10,171,14],[200,19,171,23],[200,21,171,25,"isFocused"],[200,30,168,12],[201,0,168,12],[202,0,168,12],[203,0,168,12],[204,0,168,12],[205,0,168,12],[206,0,168,12],[207,0,168,12],[207,11,173,15,"descriptor"],[207,21,173,25],[207,22,173,26,"render"],[207,28,173,15],[207,30,168,12],[207,31,167,10],[208,0,176,9],[208,7,153,9],[208,8,152,6],[208,9,151,4],[209,0,179,3],[209,5,150,2],[211,0,181,2],[211,8,181,8,"activeKey"],[211,17,181,17],[211,20,181,20,"state"],[211,25,181,25],[211,26,181,26,"routes"],[211,32,181,20],[211,33,181,33,"state"],[211,38,181,38],[211,39,181,39,"index"],[211,44,181,20],[211,46,181,46,"key"],[211,49,181,2],[212,0,85,10],[212,32,182,43,"descriptors"],[212,43,182,54],[212,44,182,55,"activeKey"],[212,53,182,54],[212,54,182,43],[212,55,182,66,"options"],[212,62,85,10],[213,0,85,10],[213,8,182,10,"gestureEnabled"],[213,22,85,10],[213,47,182,10,"gestureEnabled"],[213,61,85,10],[214,0,85,10],[214,8,182,26,"swipeEnabled"],[214,20,85,10],[214,45,182,26,"swipeEnabled"],[214,57,85,10],[215,0,184,2],[215,11,185,4],[215,31,185,5],[215,63,185,4],[215,64,185,30],[215,72,185,4],[216,0,185,39],[216,6,185,39],[216,11,185,44],[216,13,185,46,"navigation"],[216,23,185,4],[217,0,185,4],[218,0,185,4],[219,0,185,4],[220,0,185,4],[221,0,185,4],[222,0,185,4],[223,0,185,4],[223,7,186,6],[223,27,186,7],[223,48,186,6],[224,0,186,29],[224,6,186,29],[224,11,186,34],[224,13,186,36,"styles"],[224,19,186,42],[224,20,186,43,"content"],[224,27,186,6],[225,0,186,6],[226,0,186,6],[227,0,186,6],[228,0,186,6],[229,0,186,6],[230,0,186,6],[231,0,186,6],[231,7,187,8],[231,27,187,9],[231,58,187,8],[232,0,187,8],[233,0,187,8],[234,0,187,8],[235,0,187,8],[236,0,187,8],[237,0,187,8],[238,0,187,8],[238,7,188,10],[238,27,188,11],[238,53,188,10],[238,54,188,29],[238,62,188,10],[239,0,188,38],[239,6,188,38],[239,11,188,43],[239,13,188,45,"isDrawerOpen"],[239,25,188,10],[240,0,188,10],[241,0,188,10],[242,0,188,10],[243,0,188,10],[244,0,188,10],[245,0,188,10],[246,0,188,10],[246,7,189,12],[246,27,189,13],[246,42,189,12],[247,0,190,14],[247,6,190,14],[247,10,190,18],[247,12,190,20,"isDrawerOpen"],[247,24,189,12],[248,0,191,14],[248,6,191,14],[248,20,191,28],[248,22,191,30,"gestureEnabled"],[248,36,189,12],[249,0,192,14],[249,6,192,14],[249,18,192,26],[249,20,192,28,"swipeEnabled"],[249,32,189,12],[250,0,193,14],[250,6,193,14],[250,12,193,20],[250,14,193,22,"handleDrawerOpen"],[250,30,189,12],[251,0,194,14],[251,6,194,14],[251,13,194,21],[251,15,194,23,"handleDrawerClose"],[251,32,189,12],[252,0,195,14],[252,6,195,14],[252,25,195,33],[252,27,195,35,"gestureHandlerProps"],[252,46,189,12],[253,0,196,14],[253,6,196,14],[253,16,196,24],[253,18,196,26,"drawerType"],[253,28,189,12],[254,0,197,14],[254,6,197,14],[254,20,197,28],[254,22,197,30,"drawerPosition"],[254,36,189,12],[255,0,198,14],[255,6,198,14],[255,25,198,33],[255,27,198,35],[255,28,199,16],[256,0,199,18,"backgroundColor"],[256,8,199,18,"backgroundColor"],[256,23,199,33],[256,25,199,35,"colors"],[256,31,199,41],[256,32,199,42,"background"],[257,0,199,16],[257,7,198,35],[257,9,200,16,"sceneContainerStyle"],[257,28,198,35],[257,29,189,12],[258,0,202,14],[258,6,202,14],[258,17,202,25],[258,19,202,27],[258,20,203,16],[259,0,204,18,"width"],[259,8,204,18,"width"],[259,13,204,23],[259,15,204,25,"getDefaultDrawerWidth"],[259,36,204,46],[259,37,204,47,"dimensions"],[259,47,204,46],[259,48,203,16],[260,0,205,18,"backgroundColor"],[260,8,205,18,"backgroundColor"],[260,23,205,33],[260,25,205,35,"colors"],[260,31,205,41],[260,32,205,42,"card"],[261,0,203,16],[261,7,202,27],[261,9,207,16,"drawerType"],[261,19,207,26],[261,24,207,31],[261,35,207,16],[261,40,208,19,"drawerPosition"],[261,54,208,33],[261,59,208,38],[261,65,208,19],[261,68,209,22],[262,0,210,24,"borderRightColor"],[262,8,210,24,"borderRightColor"],[262,24,210,40],[262,26,210,42,"colors"],[262,32,210,48],[262,33,210,49,"border"],[262,39,209,22],[263,0,211,24,"borderRightWidth"],[263,8,211,24,"borderRightWidth"],[263,24,211,40],[263,26,211,42,"StyleSheet"],[263,50,211,53,"hairlineWidth"],[264,0,209,22],[264,7,208,19],[264,10,213,22],[265,0,214,24,"borderLeftColor"],[265,8,214,24,"borderLeftColor"],[265,23,214,39],[265,25,214,41,"colors"],[265,31,214,47],[265,32,214,48,"border"],[265,38,213,22],[266,0,215,24,"borderLeftWidth"],[266,8,215,24,"borderLeftWidth"],[266,23,215,39],[266,25,215,41,"StyleSheet"],[266,49,215,52,"hairlineWidth"],[267,0,213,22],[267,7,207,16],[267,8,202,27],[267,10,217,16,"drawerStyle"],[267,21,202,27],[267,22,189,12],[268,0,219,14],[268,6,219,14],[268,18,219,26],[268,20,219,28],[269,0,219,30,"backgroundColor"],[269,8,219,30,"backgroundColor"],[269,23,219,45],[269,25,219,47,"overlayColor"],[270,0,219,28],[270,7,189,12],[271,0,220,14],[271,6,220,14],[271,20,220,28],[271,22,220,30,"edgeWidth"],[271,31,189,12],[272,0,221,14],[272,6,221,14],[272,28,221,36],[272,30,221,38,"minSwipeDistance"],[272,46,189,12],[273,0,222,14],[273,6,222,14],[273,19,222,27],[273,21,222,29,"hideStatusBar"],[273,34,189,12],[274,0,223,14],[274,6,223,14],[274,24,223,32],[274,26,223,34,"statusBarAnimation"],[274,44,189,12],[275,0,224,14],[275,6,224,14],[275,25,224,33],[275,27,224,35,"renderNavigationView"],[275,47,189,12],[276,0,225,14],[276,6,225,14],[276,24,225,32],[276,26,225,34,"renderContent"],[276,39,189,12],[277,0,226,14],[277,6,226,14],[277,25,226,33],[277,27,226,35,"keyboardDismissMode"],[277,46,189,12],[278,0,227,14],[278,6,227,14],[278,16,227,24],[278,18,227,26,"dimensions"],[278,28,189,12],[279,0,189,12],[280,0,189,12],[281,0,189,12],[282,0,189,12],[283,0,189,12],[284,0,189,12],[285,0,189,12],[285,6,188,10],[285,7,187,8],[285,8,186,6],[285,9,185,4],[285,10,184,2],[286,0,234,1],[288,0,236,0],[288,6,236,6,"styles"],[288,12,236,12],[288,15,236,15,"StyleSheet"],[288,39,236,26,"create"],[288,45,236,15],[288,46,236,33],[289,0,237,2,"content"],[289,4,237,2,"content"],[289,11,237,9],[289,13,237,11],[290,0,238,4,"flex"],[290,6,238,4,"flex"],[290,10,238,8],[290,12,238,10],[291,0,237,11],[292,0,236,33],[292,3,236,15],[292,4,236,0]],"functionMap":{"names":["<global>","getDefaultDrawerWidth","DrawerView","<anonymous>","state.history.some$argument_0","React.useCallback$argument_0","React.useEffect$argument_0","BackHandler.addEventListener$argument_1","renderNavigationView","renderContent","state.routes.map$argument_0"],"mappings":"AAA;8BCsC;CDmB;eEO;kBCK;GDE;0CEmB,4BF;6CGE;GHK;8CGE;GHK;kBIE;GJM;kBIE;uECO;ODI;WHG,4BG;GJC;+BMM;GNY;wBOE;0BCG;SDuB;GPG;CFuD"}},"type":"js/module"}]}