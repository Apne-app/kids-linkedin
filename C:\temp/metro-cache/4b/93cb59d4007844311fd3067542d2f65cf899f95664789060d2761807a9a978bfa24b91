{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/interopRequireWildcard","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/extends","data":{"isAsync":false}},{"name":"react","data":{"isAsync":false}},{"name":"react-native","data":{"isAsync":false}},{"name":"react-native-screens","data":{"isAsync":false}},{"name":"@react-navigation/native","data":{"isAsync":false}},{"name":"./GestureHandler","data":{"isAsync":false}},{"name":"./SafeAreaProviderCompat","data":{"isAsync":false}},{"name":"./ResourceSavingScene","data":{"isAsync":false}},{"name":"./Header","data":{"isAsync":false}},{"name":"./DrawerContent","data":{"isAsync":false}},{"name":"./Drawer","data":{"isAsync":false}},{"name":"../utils/DrawerOpenContext","data":{"isAsync":false}},{"name":"../utils/DrawerPositionContext","data":{"isAsync":false}},{"name":"../utils/useWindowDimensions","data":{"isAsync":false}},{"name":"../utils/getIsDrawerOpenFromState","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/interopRequireWildcard\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = DrawerView;\n\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/toConsumableArray\"));\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/defineProperty\"));\n\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/slicedToArray\"));\n\n  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/extends\"));\n\n  var React = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6], \"react\"));\n\n  var _reactNative = _$$_REQUIRE(_dependencyMap[7], \"react-native\");\n\n  var _reactNativeScreens = _$$_REQUIRE(_dependencyMap[8], \"react-native-screens\");\n\n  var _native = _$$_REQUIRE(_dependencyMap[9], \"@react-navigation/native\");\n\n  var _GestureHandler = _$$_REQUIRE(_dependencyMap[10], \"./GestureHandler\");\n\n  var _SafeAreaProviderCompat = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11], \"./SafeAreaProviderCompat\"));\n\n  var _ResourceSavingScene = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[12], \"./ResourceSavingScene\"));\n\n  var _Header = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[13], \"./Header\"));\n\n  var _DrawerContent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[14], \"./DrawerContent\"));\n\n  var _Drawer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[15], \"./Drawer\"));\n\n  var _DrawerOpenContext = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[16], \"../utils/DrawerOpenContext\"));\n\n  var _DrawerPositionContext = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[17], \"../utils/DrawerPositionContext\"));\n\n  var _useWindowDimensions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[18], \"../utils/useWindowDimensions\"));\n\n  var _getIsDrawerOpenFromState = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[19], \"../utils/getIsDrawerOpenFromState\"));\n\n  var _jsxFileName = \"/media/shashwatmdas/Shashwat2/kids-linkedin/app/kids-linkedin/node_modules/@react-navigation/drawer/src/views/DrawerView.tsx\";\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  var getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n    var height = _ref.height,\n        width = _ref.width;\n    var smallerAxisSize = Math.min(height, width);\n    var isLandscape = width > height;\n    var isTablet = smallerAxisSize >= 600;\n    var appBarHeight = _reactNative.Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n    var maxWidth = isTablet ? 320 : 280;\n    return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n  };\n\n  var GestureHandlerWrapper = _GestureHandler.GestureHandlerRootView != null ? _GestureHandler.GestureHandlerRootView : _reactNative.View;\n\n  function DrawerView(_ref2) {\n    var _this = this;\n\n    var state = _ref2.state,\n        navigation = _ref2.navigation,\n        descriptors = _ref2.descriptors,\n        _ref2$lazy = _ref2.lazy,\n        lazy = _ref2$lazy === void 0 ? true : _ref2$lazy,\n        _ref2$drawerContent = _ref2.drawerContent,\n        drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n      return React.createElement(_DrawerContent.default, (0, _extends2.default)({}, props, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 5\n        }\n      }));\n    } : _ref2$drawerContent,\n        _ref2$drawerPosition = _ref2.drawerPosition,\n        drawerPosition = _ref2$drawerPosition === void 0 ? _reactNative.I18nManager.isRTL ? 'right' : 'left' : _ref2$drawerPosition,\n        _ref2$keyboardDismiss = _ref2.keyboardDismissMode,\n        keyboardDismissMode = _ref2$keyboardDismiss === void 0 ? 'on-drag' : _ref2$keyboardDismiss,\n        _ref2$overlayColor = _ref2.overlayColor,\n        overlayColor = _ref2$overlayColor === void 0 ? 'rgba(0, 0, 0, 0.5)' : _ref2$overlayColor,\n        _ref2$drawerType = _ref2.drawerType,\n        drawerType = _ref2$drawerType === void 0 ? 'front' : _ref2$drawerType,\n        _ref2$hideStatusBar = _ref2.hideStatusBar,\n        hideStatusBar = _ref2$hideStatusBar === void 0 ? false : _ref2$hideStatusBar,\n        _ref2$statusBarAnimat = _ref2.statusBarAnimation,\n        statusBarAnimation = _ref2$statusBarAnimat === void 0 ? 'slide' : _ref2$statusBarAnimat,\n        drawerContentOptions = _ref2.drawerContentOptions,\n        drawerStyle = _ref2.drawerStyle,\n        edgeWidth = _ref2.edgeWidth,\n        gestureHandlerProps = _ref2.gestureHandlerProps,\n        minSwipeDistance = _ref2.minSwipeDistance,\n        sceneContainerStyle = _ref2.sceneContainerStyle,\n        _ref2$detachInactiveS = _ref2.detachInactiveScreens,\n        detachInactiveScreens = _ref2$detachInactiveS === void 0 ? true : _ref2$detachInactiveS;\n\n    var _React$useState = React.useState([state.routes[state.index].key]),\n        _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n        loaded = _React$useState2[0],\n        setLoaded = _React$useState2[1];\n\n    var dimensions = (0, _useWindowDimensions.default)();\n\n    var _useTheme = (0, _native.useTheme)(),\n        colors = _useTheme.colors;\n\n    var isDrawerOpen = (0, _getIsDrawerOpenFromState.default)(state);\n    var handleDrawerOpen = React.useCallback(function () {\n      navigation.dispatch(_objectSpread(_objectSpread({}, _native.DrawerActions.openDrawer()), {}, {\n        target: state.key\n      }));\n    }, [navigation, state.key]);\n    var handleDrawerClose = React.useCallback(function () {\n      navigation.dispatch(_objectSpread(_objectSpread({}, _native.DrawerActions.closeDrawer()), {}, {\n        target: state.key\n      }));\n    }, [navigation, state.key]);\n    React.useEffect(function () {\n      if (isDrawerOpen) {\n        navigation.emit({\n          type: 'drawerOpen'\n        });\n      } else {\n        navigation.emit({\n          type: 'drawerClose'\n        });\n      }\n    }, [isDrawerOpen, navigation]);\n    React.useEffect(function () {\n      var subscription;\n\n      if (isDrawerOpen) {\n        subscription = _reactNative.BackHandler.addEventListener('hardwareBackPress', function () {\n          handleDrawerClose();\n          return true;\n        });\n      }\n\n      return function () {\n        var _subscription;\n\n        return (_subscription = subscription) == null ? void 0 : _subscription.remove();\n      };\n    }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n    var focusedRouteKey = state.routes[state.index].key;\n\n    if (!loaded.includes(focusedRouteKey)) {\n      setLoaded([].concat((0, _toConsumableArray2.default)(loaded), [focusedRouteKey]));\n    }\n\n    var renderNavigationView = function renderNavigationView(_ref3) {\n      var progress = _ref3.progress;\n      return React.createElement(_DrawerPositionContext.default.Provider, {\n        value: drawerPosition,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 7\n        }\n      }, drawerContent(_objectSpread(_objectSpread({}, drawerContentOptions), {}, {\n        progress: progress,\n        state: state,\n        navigation: navigation,\n        descriptors: descriptors\n      })));\n    };\n\n    var renderContent = function renderContent() {\n      return React.createElement(_reactNativeScreens.ScreenContainer, {\n        enabled: detachInactiveScreens,\n        style: styles.content,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 7\n        }\n      }, state.routes.map(function (route, index) {\n        var descriptor = descriptors[route.key];\n        var unmountOnBlur = descriptor.options.unmountOnBlur;\n        var isFocused = state.index === index;\n\n        if (unmountOnBlur && !isFocused) {\n          return null;\n        }\n\n        if (lazy && !loaded.includes(route.key) && !isFocused) {\n          return null;\n        }\n\n        var _descriptor$options = descriptor.options,\n            _descriptor$options$h = _descriptor$options.header,\n            header = _descriptor$options$h === void 0 ? function (props) {\n          return React.createElement(_Header.default, (0, _extends2.default)({}, props, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 52\n            }\n          }));\n        } : _descriptor$options$h,\n            _descriptor$options$h2 = _descriptor$options.headerShown,\n            headerShown = _descriptor$options$h2 === void 0 ? false : _descriptor$options$h2;\n        return React.createElement(_ResourceSavingScene.default, {\n          key: route.key,\n          style: [_reactNative.StyleSheet.absoluteFill, {\n            opacity: isFocused ? 1 : 0\n          }],\n          isVisible: isFocused,\n          enabled: detachInactiveScreens,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }\n        }, headerShown ? React.createElement(_native.NavigationContext.Provider, {\n          value: descriptor.navigation,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 17\n          }\n        }, React.createElement(_native.NavigationRouteContext.Provider, {\n          value: route,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 19\n          }\n        }, header({\n          layout: dimensions,\n          scene: {\n            route: route,\n            descriptor: descriptor\n          }\n        }))) : null, descriptor.render());\n      }));\n    };\n\n    var activeKey = state.routes[state.index].key;\n    var _descriptors$activeKe = descriptors[activeKey].options,\n        gestureEnabled = _descriptors$activeKe.gestureEnabled,\n        swipeEnabled = _descriptors$activeKe.swipeEnabled;\n    return React.createElement(_native.NavigationHelpersContext.Provider, {\n      value: navigation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 5\n      }\n    }, React.createElement(GestureHandlerWrapper, {\n      style: styles.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 7\n      }\n    }, React.createElement(_SafeAreaProviderCompat.default, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }\n    }, React.createElement(_DrawerOpenContext.default.Provider, {\n      value: isDrawerOpen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }\n    }, React.createElement(_Drawer.default, {\n      open: isDrawerOpen,\n      gestureEnabled: gestureEnabled,\n      swipeEnabled: swipeEnabled,\n      onOpen: handleDrawerOpen,\n      onClose: handleDrawerClose,\n      gestureHandlerProps: gestureHandlerProps,\n      drawerType: drawerType,\n      drawerPosition: drawerPosition,\n      sceneContainerStyle: [{\n        backgroundColor: colors.background\n      }, sceneContainerStyle],\n      drawerStyle: [{\n        width: getDefaultDrawerWidth(dimensions),\n        backgroundColor: colors.card\n      }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n        borderRightColor: colors.border,\n        borderRightWidth: _reactNative.StyleSheet.hairlineWidth\n      } : {\n        borderLeftColor: colors.border,\n        borderLeftWidth: _reactNative.StyleSheet.hairlineWidth\n      }), drawerStyle],\n      overlayStyle: {\n        backgroundColor: overlayColor\n      },\n      swipeEdgeWidth: edgeWidth,\n      swipeDistanceThreshold: minSwipeDistance,\n      hideStatusBar: hideStatusBar,\n      statusBarAnimation: statusBarAnimation,\n      renderDrawerContent: renderNavigationView,\n      renderSceneContent: renderContent,\n      keyboardDismissMode: keyboardDismissMode,\n      dimensions: dimensions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }\n    })))));\n  }\n\n  var styles = _reactNative.StyleSheet.create({\n    content: {\n      flex: 1\n    }\n  });\n});","lineCount":336,"map":[[19,0,1,0],[21,0,2,0],[23,0,10,0],[25,0,11,0],[27,0,21,0],[29,0,22,0],[31,0,23,0],[33,0,24,0],[35,0,25,0],[37,0,26,0],[39,0,27,0],[41,0,28,0],[43,0,29,0],[45,0,30,0],[53,0,45,0],[53,6,45,6,"getDefaultDrawerWidth"],[53,27,45,27],[53,30,45,30],[53,39,45,6,"getDefaultDrawerWidth"],[53,60,45,30],[53,67,51,6],[54,0,51,6],[54,8,46,2,"height"],[54,14,51,6],[54,22,46,2,"height"],[54,28,51,6],[55,0,51,6],[55,8,47,2,"width"],[55,13,51,6],[55,21,47,2,"width"],[55,26,51,6],[56,0,57,2],[56,8,57,8,"smallerAxisSize"],[56,23,57,23],[56,26,57,26,"Math"],[56,30,57,30],[56,31,57,31,"min"],[56,34,57,26],[56,35,57,35,"height"],[56,41,57,26],[56,43,57,43,"width"],[56,48,57,26],[56,49,57,2],[57,0,58,2],[57,8,58,8,"isLandscape"],[57,19,58,19],[57,22,58,22,"width"],[57,27,58,27],[57,30,58,30,"height"],[57,36,58,2],[58,0,59,2],[58,8,59,8,"isTablet"],[58,16,59,16],[58,19,59,19,"smallerAxisSize"],[58,34,59,34],[58,38,59,38],[58,41,59,2],[59,0,60,2],[59,8,60,8,"appBarHeight"],[59,20,60,20],[59,23,60,23,"Platform"],[59,45,60,32,"OS"],[59,47,60,23],[59,52,60,39],[59,57,60,23],[59,60,60,48,"isLandscape"],[59,71,60,59],[59,74,60,62],[59,76,60,59],[59,79,60,67],[59,81,60,23],[59,84,60,73],[59,86,60,2],[60,0,61,2],[60,8,61,8,"maxWidth"],[60,16,61,16],[60,19,61,19,"isTablet"],[60,27,61,27],[60,30,61,30],[60,33,61,27],[60,36,61,36],[60,39,61,2],[61,0,63,2],[61,11,63,9,"Math"],[61,15,63,13],[61,16,63,14,"min"],[61,19,63,9],[61,20,63,18,"smallerAxisSize"],[61,35,63,33],[61,38,63,36,"appBarHeight"],[61,50,63,9],[61,52,63,50,"maxWidth"],[61,60,63,9],[61,61,63,2],[62,0,64,1],[62,3,45,0],[64,0,66,0],[64,6,66,6,"GestureHandlerWrapper"],[64,27,66,27],[64,30,66,30,"GestureHandlerRootView"],[64,68,66,27],[64,79,66,30,"GestureHandlerRootView"],[64,117,66,27],[64,120,66,56,"View"],[64,137,66,0],[66,0,71,15],[66,11,71,24,"DrawerView"],[66,21,71,15],[66,29,92,10],[67,0,92,10],[69,0,92,10],[69,8,72,2,"state"],[69,13,92,10],[69,22,72,2,"state"],[69,27,92,10],[70,0,92,10],[70,8,73,2,"navigation"],[70,18,92,10],[70,27,73,2,"navigation"],[70,37,92,10],[71,0,92,10],[71,8,74,2,"descriptors"],[71,19,92,10],[71,28,74,2,"descriptors"],[71,39,92,10],[72,0,92,10],[72,27,75,2,"lazy"],[72,31,92,10],[73,0,92,10],[73,8,75,2,"lazy"],[73,12,92,10],[73,39,75,9],[73,43,92,10],[74,0,92,10],[74,36,76,2,"drawerContent"],[74,49,92,10],[75,0,92,10],[75,8,76,2,"drawerContent"],[75,21,92,10],[75,57,76,18],[75,67,76,19,"props"],[75,72,76,18],[76,0,76,18],[76,13,77,4],[76,33,77,5],[76,55,77,4],[76,84,77,23,"props"],[76,89,77,4],[77,0,77,4],[78,0,77,4],[79,0,77,4],[80,0,77,4],[81,0,77,4],[82,0,77,4],[83,0,77,4],[83,9,76,18],[84,0,76,18],[84,5,92,10],[85,0,92,10],[85,37,79,2,"drawerPosition"],[85,51,92,10],[86,0,92,10],[86,8,79,2,"drawerPosition"],[86,22,92,10],[86,59,79,19,"I18nManager"],[86,84,79,31,"isRTL"],[86,89,79,19],[86,92,79,39],[86,99,79,19],[86,102,79,49],[86,108,92,10],[87,0,92,10],[87,38,80,2,"keyboardDismissMode"],[87,57,92,10],[88,0,92,10],[88,8,80,2,"keyboardDismissMode"],[88,27,92,10],[88,65,80,24],[88,74,92,10],[89,0,92,10],[89,35,81,2,"overlayColor"],[89,47,92,10],[90,0,92,10],[90,8,81,2,"overlayColor"],[90,20,92,10],[90,55,81,17],[90,75,92,10],[91,0,92,10],[91,33,82,2,"drawerType"],[91,43,92,10],[92,0,92,10],[92,8,82,2,"drawerType"],[92,18,92,10],[92,51,82,15],[92,58,92,10],[93,0,92,10],[93,36,83,2,"hideStatusBar"],[93,49,92,10],[94,0,92,10],[94,8,83,2,"hideStatusBar"],[94,21,92,10],[94,57,83,18],[94,62,92,10],[95,0,92,10],[95,38,84,2,"statusBarAnimation"],[95,56,92,10],[96,0,92,10],[96,8,84,2,"statusBarAnimation"],[96,26,92,10],[96,64,84,23],[96,71,92,10],[97,0,92,10],[97,8,85,2,"drawerContentOptions"],[97,28,92,10],[97,37,85,2,"drawerContentOptions"],[97,57,92,10],[98,0,92,10],[98,8,86,2,"drawerStyle"],[98,19,92,10],[98,28,86,2,"drawerStyle"],[98,39,92,10],[99,0,92,10],[99,8,87,2,"edgeWidth"],[99,17,92,10],[99,26,87,2,"edgeWidth"],[99,35,92,10],[100,0,92,10],[100,8,88,2,"gestureHandlerProps"],[100,27,92,10],[100,36,88,2,"gestureHandlerProps"],[100,55,92,10],[101,0,92,10],[101,8,89,2,"minSwipeDistance"],[101,24,92,10],[101,33,89,2,"minSwipeDistance"],[101,49,92,10],[102,0,92,10],[102,8,90,2,"sceneContainerStyle"],[102,27,92,10],[102,36,90,2,"sceneContainerStyle"],[102,55,92,10],[103,0,92,10],[103,38,91,2,"detachInactiveScreens"],[103,59,92,10],[104,0,92,10],[104,8,91,2,"detachInactiveScreens"],[104,29,92,10],[104,67,91,26],[104,71,92,10],[106,0,92,10],[106,26,93,30,"React"],[106,31,93,35],[106,32,93,36,"useState"],[106,40,93,30],[106,41,93,45],[106,42,93,46,"state"],[106,47,93,51],[106,48,93,52,"routes"],[106,54,93,46],[106,55,93,59,"state"],[106,60,93,64],[106,61,93,65,"index"],[106,66,93,46],[106,68,93,72,"key"],[106,71,93,45],[106,72,93,30],[106,73,92,10],[107,0,92,10],[108,0,92,10],[108,8,93,9,"loaded"],[108,14,92,10],[109,0,92,10],[109,8,93,17,"setLoaded"],[109,17,92,10],[111,0,94,2],[111,8,94,8,"dimensions"],[111,18,94,18],[111,21,94,21],[111,56,94,2],[113,0,92,10],[113,20,96,21],[113,43,92,10],[114,0,92,10],[114,8,96,10,"colors"],[114,14,92,10],[114,27,96,10,"colors"],[114,33,92,10],[116,0,98,2],[116,8,98,8,"isDrawerOpen"],[116,20,98,20],[116,23,98,23],[116,62,98,48,"state"],[116,67,98,23],[116,68,98,2],[117,0,100,2],[117,8,100,8,"handleDrawerOpen"],[117,24,100,24],[117,27,100,27,"React"],[117,32,100,32],[117,33,100,33,"useCallback"],[117,44,100,27],[117,45,100,45],[117,57,100,51],[118,0,101,4,"navigation"],[118,6,101,4,"navigation"],[118,16,101,14],[118,17,101,15,"dispatch"],[118,25,101,4],[118,58,102,9,"DrawerActions"],[118,80,102,23,"openDrawer"],[118,90,102,9],[118,92,101,4],[119,0,103,6,"target"],[119,8,103,6,"target"],[119,14,103,12],[119,16,103,14,"state"],[119,21,103,19],[119,22,103,20,"key"],[120,0,101,4],[121,0,105,3],[121,5,100,27],[121,7,105,5],[121,8,105,6,"navigation"],[121,18,105,5],[121,20,105,18,"state"],[121,25,105,23],[121,26,105,24,"key"],[121,29,105,5],[121,30,100,27],[121,31,100,2],[122,0,107,2],[122,8,107,8,"handleDrawerClose"],[122,25,107,25],[122,28,107,28,"React"],[122,33,107,33],[122,34,107,34,"useCallback"],[122,45,107,28],[122,46,107,46],[122,58,107,52],[123,0,108,4,"navigation"],[123,6,108,4,"navigation"],[123,16,108,14],[123,17,108,15,"dispatch"],[123,25,108,4],[123,58,109,9,"DrawerActions"],[123,80,109,23,"closeDrawer"],[123,91,109,9],[123,93,108,4],[124,0,110,6,"target"],[124,8,110,6,"target"],[124,14,110,12],[124,16,110,14,"state"],[124,21,110,19],[124,22,110,20,"key"],[125,0,108,4],[126,0,112,3],[126,5,107,28],[126,7,112,5],[126,8,112,6,"navigation"],[126,18,112,5],[126,20,112,18,"state"],[126,25,112,23],[126,26,112,24,"key"],[126,29,112,5],[126,30,107,28],[126,31,107,2],[127,0,114,2,"React"],[127,4,114,2,"React"],[127,9,114,7],[127,10,114,8,"useEffect"],[127,19,114,2],[127,20,114,18],[127,32,114,24],[128,0,115,4],[128,10,115,8,"isDrawerOpen"],[128,22,115,4],[128,24,115,22],[129,0,116,6,"navigation"],[129,8,116,6,"navigation"],[129,18,116,16],[129,19,116,17,"emit"],[129,23,116,6],[129,24,116,22],[130,0,116,24,"type"],[130,10,116,24,"type"],[130,14,116,28],[130,16,116,30],[131,0,116,22],[131,9,116,6],[132,0,117,5],[132,7,115,4],[132,13,117,11],[133,0,118,6,"navigation"],[133,8,118,6,"navigation"],[133,18,118,16],[133,19,118,17,"emit"],[133,23,118,6],[133,24,118,22],[134,0,118,24,"type"],[134,10,118,24,"type"],[134,14,118,28],[134,16,118,30],[135,0,118,22],[135,9,118,6],[136,0,119,5],[137,0,120,3],[137,5,114,2],[137,7,120,5],[137,8,120,6,"isDrawerOpen"],[137,20,120,5],[137,22,120,20,"navigation"],[137,32,120,5],[137,33,114,2],[138,0,122,2,"React"],[138,4,122,2,"React"],[138,9,122,7],[138,10,122,8,"useEffect"],[138,19,122,2],[138,20,122,18],[138,32,122,24],[139,0,123,4],[139,10,123,8,"subscription"],[139,22,123,4],[141,0,125,4],[141,10,125,8,"isDrawerOpen"],[141,22,125,4],[141,24,125,22],[142,0,129,6,"subscription"],[142,8,129,6,"subscription"],[142,20,129,18],[142,23,129,21,"BackHandler"],[142,48,129,33,"addEventListener"],[142,64,129,21],[142,65,129,50],[142,84,129,21],[142,86,129,71],[142,98,129,77],[143,0,130,8,"handleDrawerClose"],[143,10,130,8,"handleDrawerClose"],[143,27,130,25],[144,0,132,8],[144,17,132,15],[144,21,132,8],[145,0,133,7],[145,9,129,21],[145,10,129,6],[146,0,134,5],[148,0,136,4],[148,13,136,11],[149,0,136,11],[151,0,136,11],[151,32,136,17,"subscription"],[151,44,136,11],[151,65,136,17],[151,79,136,31,"remove"],[151,85,136,17],[151,87,136,11],[152,0,136,11],[152,7,136,4],[153,0,137,3],[153,5,122,2],[153,7,137,5],[153,8,137,6,"handleDrawerClose"],[153,25,137,5],[153,27,137,25,"isDrawerOpen"],[153,39,137,5],[153,41,137,39,"navigation"],[153,51,137,5],[153,53,137,51,"state"],[153,58,137,56],[153,59,137,57,"key"],[153,62,137,5],[153,63,122,2],[154,0,139,2],[154,8,139,8,"focusedRouteKey"],[154,23,139,23],[154,26,139,26,"state"],[154,31,139,31],[154,32,139,32,"routes"],[154,38,139,26],[154,39,139,39,"state"],[154,44,139,44],[154,45,139,45,"index"],[154,50,139,26],[154,52,139,52,"key"],[154,55,139,2],[156,0,141,2],[156,8,141,6],[156,9,141,7,"loaded"],[156,15,141,13],[156,16,141,14,"includes"],[156,24,141,7],[156,25,141,23,"focusedRouteKey"],[156,40,141,7],[156,41,141,2],[156,43,141,41],[157,0,142,4,"setLoaded"],[157,6,142,4,"setLoaded"],[157,15,142,13],[157,59,142,18,"loaded"],[157,65,142,13],[157,69,142,26,"focusedRouteKey"],[157,84,142,13],[157,87,142,4],[158,0,143,3],[160,0,145,2],[160,8,145,8,"renderNavigationView"],[160,28,145,28],[160,31,145,31],[160,40,145,8,"renderNavigationView"],[160,60,145,31],[160,68,145,54],[161,0,145,54],[161,10,145,34,"progress"],[161,18,145,54],[161,27,145,34,"progress"],[161,35,145,54],[162,0,146,4],[162,13,147,6],[162,33,147,7],[162,63,147,6],[162,64,147,29],[162,72,147,6],[163,0,147,38],[163,8,147,38],[163,13,147,43],[163,15,147,45,"drawerPosition"],[163,29,147,6],[164,0,147,6],[165,0,147,6],[166,0,147,6],[167,0,147,6],[168,0,147,6],[169,0,147,6],[170,0,147,6],[170,9,148,9,"drawerContent"],[170,22,148,22],[170,55,149,13,"drawerContentOptions"],[170,75,148,22],[171,0,150,10,"progress"],[171,8,150,10,"progress"],[171,16,150,18],[171,18,150,20,"progress"],[171,26,148,22],[172,0,151,10,"state"],[172,8,151,10,"state"],[172,13,151,15],[172,15,151,17,"state"],[172,20,148,22],[173,0,152,10,"navigation"],[173,8,152,10,"navigation"],[173,18,152,20],[173,20,152,22,"navigation"],[173,30,148,22],[174,0,153,10,"descriptors"],[174,8,153,10,"descriptors"],[174,19,153,21],[174,21,153,23,"descriptors"],[175,0,148,22],[175,9,147,6],[175,10,146,4],[176,0,157,3],[176,5,145,2],[178,0,159,2],[178,8,159,8,"renderContent"],[178,21,159,21],[178,24,159,24],[178,33,159,8,"renderContent"],[178,46,159,24],[178,49,159,30],[179,0,160,4],[179,13,162,6],[179,33,162,7],[179,68,162,6],[180,0,162,23],[180,8,162,23],[180,15,162,30],[180,17,162,32,"detachInactiveScreens"],[180,38,162,6],[181,0,162,55],[181,8,162,55],[181,13,162,60],[181,15,162,62,"styles"],[181,21,162,68],[181,22,162,69,"content"],[181,29,162,6],[182,0,162,6],[183,0,162,6],[184,0,162,6],[185,0,162,6],[186,0,162,6],[187,0,162,6],[188,0,162,6],[188,9,163,9,"state"],[188,14,163,14],[188,15,163,15,"routes"],[188,21,163,9],[188,22,163,22,"map"],[188,25,163,9],[188,26,163,26],[188,36,163,27,"route"],[188,41,163,26],[188,43,163,34,"index"],[188,48,163,26],[188,50,163,44],[189,0,164,10],[189,12,164,16,"descriptor"],[189,22,164,26],[189,25,164,29,"descriptors"],[189,36,164,40],[189,37,164,41,"route"],[189,42,164,46],[189,43,164,47,"key"],[189,46,164,40],[189,47,164,10],[190,0,163,44],[190,12,165,18,"unmountOnBlur"],[190,25,163,44],[190,28,165,36,"descriptor"],[190,38,165,46],[190,39,165,47,"options"],[190,46,163,44],[190,47,165,18,"unmountOnBlur"],[190,60,163,44],[191,0,166,10],[191,12,166,16,"isFocused"],[191,21,166,25],[191,24,166,28,"state"],[191,29,166,33],[191,30,166,34,"index"],[191,35,166,28],[191,40,166,44,"index"],[191,45,166,10],[193,0,168,10],[193,12,168,14,"unmountOnBlur"],[193,25,168,27],[193,29,168,31],[193,30,168,32,"isFocused"],[193,39,168,10],[193,41,168,43],[194,0,169,12],[194,17,169,19],[194,21,169,12],[195,0,170,11],[197,0,172,10],[197,12,172,14,"lazy"],[197,16,172,18],[197,20,172,22],[197,21,172,23,"loaded"],[197,27,172,29],[197,28,172,30,"includes"],[197,36,172,23],[197,37,172,39,"route"],[197,42,172,44],[197,43,172,45,"key"],[197,46,172,23],[197,47,172,14],[197,51,172,53],[197,52,172,54,"isFocused"],[197,61,172,10],[197,63,172,65],[198,0,174,12],[198,17,174,19],[198,21,174,12],[199,0,175,11],[201,0,163,44],[201,34,180,14,"descriptor"],[201,44,180,24],[201,45,180,25,"options"],[201,52,163,44],[202,0,163,44],[202,56,178,12,"header"],[202,62,163,44],[203,0,163,44],[203,12,178,12,"header"],[203,18,163,44],[203,56,178,21],[203,66,178,22,"props"],[203,71,178,21],[204,0,178,21],[204,17,178,51],[204,37,178,52],[204,52,178,51],[204,81,178,63,"props"],[204,86,178,51],[205,0,178,51],[206,0,178,51],[207,0,178,51],[208,0,178,51],[209,0,178,51],[210,0,178,51],[211,0,178,51],[211,13,178,21],[212,0,178,21],[212,9,163,44],[213,0,163,44],[213,57,179,12,"headerShown"],[213,68,163,44],[214,0,163,44],[214,12,179,12,"headerShown"],[214,23,163,44],[214,62,179,26],[214,67,163,44],[215,0,182,10],[215,15,183,12],[215,35,183,13],[215,63,183,12],[216,0,184,14],[216,10,184,14],[216,13,184,17],[216,15,184,19,"route"],[216,20,184,24],[216,21,184,25,"key"],[216,24,183,12],[217,0,185,14],[217,10,185,14],[217,15,185,19],[217,17,185,21],[217,18,185,22,"StyleSheet"],[217,42,185,33,"absoluteFill"],[217,54,185,21],[217,56,185,47],[218,0,185,49,"opacity"],[218,12,185,49,"opacity"],[218,19,185,56],[218,21,185,58,"isFocused"],[218,30,185,67],[218,33,185,70],[218,34,185,67],[218,37,185,74],[219,0,185,47],[219,11,185,21],[219,12,183,12],[220,0,186,14],[220,10,186,14],[220,19,186,23],[220,21,186,25,"isFocused"],[220,30,183,12],[221,0,187,14],[221,10,187,14],[221,17,187,21],[221,19,187,23,"detachInactiveScreens"],[221,40,183,12],[222,0,183,12],[223,0,183,12],[224,0,183,12],[225,0,183,12],[226,0,183,12],[227,0,183,12],[228,0,183,12],[228,11,189,15,"headerShown"],[228,22,189,26],[228,25,190,16],[228,45,190,17],[228,70,190,16],[228,71,190,35],[228,79,190,16],[229,0,190,44],[229,10,190,44],[229,15,190,49],[229,17,190,51,"descriptor"],[229,27,190,61],[229,28,190,62,"navigation"],[229,38,190,16],[230,0,190,16],[231,0,190,16],[232,0,190,16],[233,0,190,16],[234,0,190,16],[235,0,190,16],[236,0,190,16],[236,11,191,18],[236,31,191,19],[236,61,191,18],[236,62,191,42],[236,70,191,18],[237,0,191,51],[237,10,191,51],[237,15,191,56],[237,17,191,58,"route"],[237,22,191,18],[238,0,191,18],[239,0,191,18],[240,0,191,18],[241,0,191,18],[242,0,191,18],[243,0,191,18],[244,0,191,18],[244,11,192,21,"header"],[244,17,192,27],[244,18,192,28],[245,0,193,22,"layout"],[245,10,193,22,"layout"],[245,16,193,28],[245,18,193,30,"dimensions"],[245,28,192,28],[246,0,194,22,"scene"],[246,10,194,22,"scene"],[246,15,194,27],[246,17,194,29],[247,0,194,31,"route"],[247,12,194,31,"route"],[247,17,194,36],[247,19,194,31,"route"],[247,24,194,29],[248,0,194,38,"descriptor"],[248,12,194,38,"descriptor"],[248,22,194,48],[248,24,194,38,"descriptor"],[249,0,194,29],[250,0,192,28],[250,9,192,27],[250,10,191,18],[250,11,190,16],[250,12,189,26],[250,15,198,18],[250,19,183,12],[250,21,199,15,"descriptor"],[250,31,199,25],[250,32,199,26,"render"],[250,38,199,15],[250,40,183,12],[250,41,182,10],[251,0,202,9],[251,7,163,9],[251,8,162,6],[251,9,160,4],[252,0,205,3],[252,5,159,2],[254,0,207,2],[254,8,207,8,"activeKey"],[254,17,207,17],[254,20,207,20,"state"],[254,25,207,25],[254,26,207,26,"routes"],[254,32,207,20],[254,33,207,33,"state"],[254,38,207,38],[254,39,207,39,"index"],[254,44,207,20],[254,46,207,46,"key"],[254,49,207,2],[255,0,92,10],[255,32,208,43,"descriptors"],[255,43,208,54],[255,44,208,55,"activeKey"],[255,53,208,54],[255,54,208,43],[255,55,208,66,"options"],[255,62,92,10],[256,0,92,10],[256,8,208,10,"gestureEnabled"],[256,22,92,10],[256,47,208,10,"gestureEnabled"],[256,61,92,10],[257,0,92,10],[257,8,208,26,"swipeEnabled"],[257,20,92,10],[257,45,208,26,"swipeEnabled"],[257,57,92,10],[258,0,210,2],[258,11,211,4],[258,31,211,5],[258,63,211,4],[258,64,211,30],[258,72,211,4],[259,0,211,39],[259,6,211,39],[259,11,211,44],[259,13,211,46,"navigation"],[259,23,211,4],[260,0,211,4],[261,0,211,4],[262,0,211,4],[263,0,211,4],[264,0,211,4],[265,0,211,4],[266,0,211,4],[266,7,212,6],[266,27,212,7],[266,48,212,6],[267,0,212,29],[267,6,212,29],[267,11,212,34],[267,13,212,36,"styles"],[267,19,212,42],[267,20,212,43,"content"],[267,27,212,6],[268,0,212,6],[269,0,212,6],[270,0,212,6],[271,0,212,6],[272,0,212,6],[273,0,212,6],[274,0,212,6],[274,7,213,8],[274,27,213,9],[274,58,213,8],[275,0,213,8],[276,0,213,8],[277,0,213,8],[278,0,213,8],[279,0,213,8],[280,0,213,8],[281,0,213,8],[281,7,214,10],[281,27,214,11],[281,53,214,10],[281,54,214,29],[281,62,214,10],[282,0,214,38],[282,6,214,38],[282,11,214,43],[282,13,214,45,"isDrawerOpen"],[282,25,214,10],[283,0,214,10],[284,0,214,10],[285,0,214,10],[286,0,214,10],[287,0,214,10],[288,0,214,10],[289,0,214,10],[289,7,215,12],[289,27,215,13],[289,42,215,12],[290,0,216,14],[290,6,216,14],[290,10,216,18],[290,12,216,20,"isDrawerOpen"],[290,24,215,12],[291,0,217,14],[291,6,217,14],[291,20,217,28],[291,22,217,30,"gestureEnabled"],[291,36,215,12],[292,0,218,14],[292,6,218,14],[292,18,218,26],[292,20,218,28,"swipeEnabled"],[292,32,215,12],[293,0,219,14],[293,6,219,14],[293,12,219,20],[293,14,219,22,"handleDrawerOpen"],[293,30,215,12],[294,0,220,14],[294,6,220,14],[294,13,220,21],[294,15,220,23,"handleDrawerClose"],[294,32,215,12],[295,0,221,14],[295,6,221,14],[295,25,221,33],[295,27,221,35,"gestureHandlerProps"],[295,46,215,12],[296,0,222,14],[296,6,222,14],[296,16,222,24],[296,18,222,26,"drawerType"],[296,28,215,12],[297,0,223,14],[297,6,223,14],[297,20,223,28],[297,22,223,30,"drawerPosition"],[297,36,215,12],[298,0,224,14],[298,6,224,14],[298,25,224,33],[298,27,224,35],[298,28,225,16],[299,0,225,18,"backgroundColor"],[299,8,225,18,"backgroundColor"],[299,23,225,33],[299,25,225,35,"colors"],[299,31,225,41],[299,32,225,42,"background"],[300,0,225,16],[300,7,224,35],[300,9,226,16,"sceneContainerStyle"],[300,28,224,35],[300,29,215,12],[301,0,228,14],[301,6,228,14],[301,17,228,25],[301,19,228,27],[301,20,229,16],[302,0,230,18,"width"],[302,8,230,18,"width"],[302,13,230,23],[302,15,230,25,"getDefaultDrawerWidth"],[302,36,230,46],[302,37,230,47,"dimensions"],[302,47,230,46],[302,48,229,16],[303,0,231,18,"backgroundColor"],[303,8,231,18,"backgroundColor"],[303,23,231,33],[303,25,231,35,"colors"],[303,31,231,41],[303,32,231,42,"card"],[304,0,229,16],[304,7,228,27],[304,9,233,16,"drawerType"],[304,19,233,26],[304,24,233,31],[304,35,233,16],[304,40,234,19,"drawerPosition"],[304,54,234,33],[304,59,234,38],[304,65,234,19],[304,68,235,22],[305,0,236,24,"borderRightColor"],[305,8,236,24,"borderRightColor"],[305,24,236,40],[305,26,236,42,"colors"],[305,32,236,48],[305,33,236,49,"border"],[305,39,235,22],[306,0,237,24,"borderRightWidth"],[306,8,237,24,"borderRightWidth"],[306,24,237,40],[306,26,237,42,"StyleSheet"],[306,50,237,53,"hairlineWidth"],[307,0,235,22],[307,7,234,19],[307,10,239,22],[308,0,240,24,"borderLeftColor"],[308,8,240,24,"borderLeftColor"],[308,23,240,39],[308,25,240,41,"colors"],[308,31,240,47],[308,32,240,48,"border"],[308,38,239,22],[309,0,241,24,"borderLeftWidth"],[309,8,241,24,"borderLeftWidth"],[309,23,241,39],[309,25,241,41,"StyleSheet"],[309,49,241,52,"hairlineWidth"],[310,0,239,22],[310,7,233,16],[310,8,228,27],[310,10,243,16,"drawerStyle"],[310,21,228,27],[310,22,215,12],[311,0,245,14],[311,6,245,14],[311,18,245,26],[311,20,245,28],[312,0,245,30,"backgroundColor"],[312,8,245,30,"backgroundColor"],[312,23,245,45],[312,25,245,47,"overlayColor"],[313,0,245,28],[313,7,215,12],[314,0,246,14],[314,6,246,14],[314,20,246,28],[314,22,246,30,"edgeWidth"],[314,31,215,12],[315,0,247,14],[315,6,247,14],[315,28,247,36],[315,30,247,38,"minSwipeDistance"],[315,46,215,12],[316,0,248,14],[316,6,248,14],[316,19,248,27],[316,21,248,29,"hideStatusBar"],[316,34,215,12],[317,0,249,14],[317,6,249,14],[317,24,249,32],[317,26,249,34,"statusBarAnimation"],[317,44,215,12],[318,0,250,14],[318,6,250,14],[318,25,250,33],[318,27,250,35,"renderNavigationView"],[318,47,215,12],[319,0,251,14],[319,6,251,14],[319,24,251,32],[319,26,251,34,"renderContent"],[319,39,215,12],[320,0,252,14],[320,6,252,14],[320,25,252,33],[320,27,252,35,"keyboardDismissMode"],[320,46,215,12],[321,0,253,14],[321,6,253,14],[321,16,253,24],[321,18,253,26,"dimensions"],[321,28,215,12],[322,0,215,12],[323,0,215,12],[324,0,215,12],[325,0,215,12],[326,0,215,12],[327,0,215,12],[328,0,215,12],[328,6,214,10],[328,7,213,8],[328,8,212,6],[328,9,211,4],[328,10,210,2],[329,0,260,1],[331,0,262,0],[331,6,262,6,"styles"],[331,12,262,12],[331,15,262,15,"StyleSheet"],[331,39,262,26,"create"],[331,45,262,15],[331,46,262,33],[332,0,263,2,"content"],[332,4,263,2,"content"],[332,11,263,9],[332,13,263,11],[333,0,264,4,"flex"],[333,6,264,4,"flex"],[333,10,264,8],[333,12,264,10],[334,0,263,11],[335,0,262,33],[335,3,262,15],[335,4,262,0]],"functionMap":{"names":["<global>","getDefaultDrawerWidth","DrawerView","<anonymous>","React.useCallback$argument_0","React.useEffect$argument_0","BackHandler.addEventListener$argument_1","renderNavigationView","renderContent","state.routes.map$argument_0"],"mappings":"AAA;8BC4C;CDmB;eEO;kBCK;GDE;6CEsB;GFK;8CEE;GFK;kBGE;GHM;kBGE;uECO;ODI;WFG,4BE;GHC;+BKQ;GLY;wBME;0BCI;qBNe,mDM;SDwB;GNG;CFuD"}},"type":"js/module"}]}