{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.round = exports.cubicBezier = exports.clamp = exports.between = exports.toRad = exports.toDeg = exports.lerp = exports.mix = exports.bin = void 0;\n\n  var bin = function bin(value) {\n    \"worklet\";\n\n    return value ? 1 : 0;\n  };\n\n  exports.bin = bin;\n\n  var mix = function mix(value, x, y) {\n    \"worklet\";\n\n    return x + value * (y - x);\n  };\n\n  exports.mix = mix;\n\n  var lerp = function lerp(x, y, value) {\n    \"worklet\";\n\n    return (1 - value) * x + value * y;\n  };\n\n  exports.lerp = lerp;\n\n  var toDeg = function toDeg(rad) {\n    \"worklet\";\n\n    return rad * 180 / Math.PI;\n  };\n\n  exports.toDeg = toDeg;\n\n  var toRad = function toRad(deg) {\n    \"worklet\";\n\n    return deg * Math.PI / 180;\n  };\n\n  exports.toRad = toRad;\n\n  var between = function between(value, lowerBound, upperBound) {\n    \"worklet\";\n\n    var inclusive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    if (inclusive) {\n      return value >= lowerBound && value <= upperBound;\n    }\n\n    return value > lowerBound && value < upperBound;\n  };\n\n  exports.between = between;\n\n  var clamp = function clamp(value, lowerBound, upperBound) {\n    \"worklet\";\n\n    return Math.min(Math.max(lowerBound, value), upperBound);\n  };\n\n  exports.clamp = clamp;\n\n  var cubicBezier = function cubicBezier(t, from, c1, c2, to) {\n    \"worklet\";\n\n    var term = 1 - t;\n    var a = 1 * Math.pow(term, 3) * Math.pow(t, 0) * from;\n    var b = 3 * Math.pow(term, 2) * Math.pow(t, 1) * c1;\n    var c = 3 * Math.pow(term, 1) * Math.pow(t, 2) * c2;\n    var d = 1 * Math.pow(term, 0) * Math.pow(t, 3) * to;\n    return a + b + c + d;\n  };\n\n  exports.cubicBezier = cubicBezier;\n\n  var round = function round(value) {\n    \"worklet\";\n\n    var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var p = Math.pow(10, precision);\n    return Math.round(value * p) / p;\n  };\n\n  exports.round = round;\n});","lineCount":91,"map":[[7,0,1,7],[7,6,1,11,"bin"],[7,9,1,14],[7,12,1,15],[7,21,1,24,"bin"],[7,24,1,15],[7,25,1,28,"value"],[7,30,1,15],[7,32,1,34],[8,0,1,35],[10,0,1,45],[10,11,1,52,"value"],[10,16,1,57],[10,19,1,58],[10,20,1,57],[10,23,1,60],[10,24,1,45],[11,0,1,63],[11,3,1,7],[15,0,1,71],[15,6,1,75,"mix"],[15,9,1,78],[15,12,1,79],[15,21,1,88,"mix"],[15,24,1,79],[15,25,1,92,"value"],[15,30,1,79],[15,32,1,98,"x"],[15,33,1,79],[15,35,1,100,"y"],[15,36,1,79],[15,38,1,102],[16,0,1,103],[18,0,1,113],[18,11,1,120,"x"],[18,12,1,121],[18,15,1,122,"value"],[18,20,1,127],[18,24,1,129,"y"],[18,25,1,130],[18,28,1,131,"x"],[18,29,1,127],[18,30,1,113],[19,0,1,135],[19,3,1,71],[23,0,1,143],[23,6,1,147,"lerp"],[23,10,1,151],[23,13,1,152],[23,22,1,161,"lerp"],[23,26,1,152],[23,27,1,166,"x"],[23,28,1,152],[23,30,1,168,"y"],[23,31,1,152],[23,33,1,170,"value"],[23,38,1,152],[23,40,1,176],[24,0,1,177],[26,0,1,187],[26,11,1,193],[26,12,1,194],[26,16,1,196,"value"],[26,21,1,193],[26,25,1,203,"x"],[26,26,1,193],[26,29,1,205,"value"],[26,34,1,210],[26,37,1,211,"y"],[26,38,1,187],[27,0,1,214],[27,3,1,143],[31,0,1,222],[31,6,1,226,"toDeg"],[31,11,1,231],[31,14,1,232],[31,23,1,241,"toDeg"],[31,28,1,232],[31,29,1,247,"rad"],[31,32,1,232],[31,34,1,251],[32,0,1,252],[34,0,1,262],[34,11,1,269,"rad"],[34,14,1,272],[34,17,1,273],[34,20,1,269],[34,23,1,277,"Math"],[34,27,1,281],[34,28,1,282,"PI"],[34,30,1,262],[35,0,1,286],[35,3,1,222],[39,0,1,294],[39,6,1,298,"toRad"],[39,11,1,303],[39,14,1,304],[39,23,1,313,"toRad"],[39,28,1,304],[39,29,1,319,"deg"],[39,32,1,304],[39,34,1,323],[40,0,1,324],[42,0,1,334],[42,11,1,341,"deg"],[42,14,1,344],[42,17,1,345,"Math"],[42,21,1,349],[42,22,1,350,"PI"],[42,24,1,341],[42,27,1,353],[42,30,1,334],[43,0,1,358],[43,3,1,294],[47,0,1,366],[47,6,1,370,"between"],[47,13,1,377],[47,16,1,378],[47,25,1,387,"between"],[47,32,1,378],[47,33,1,395,"value"],[47,38,1,378],[47,40,1,401,"lowerBound"],[47,50,1,378],[47,52,1,412,"upperBound"],[47,62,1,378],[47,64,1,423],[48,0,1,424],[50,0,1,434],[50,8,1,438,"inclusive"],[50,17,1,447],[50,20,1,448,"arguments"],[50,29,1,457],[50,30,1,458,"length"],[50,36,1,448],[50,39,1,465],[50,40,1,448],[50,44,1,468,"arguments"],[50,53,1,477],[50,54,1,478],[50,55,1,477],[50,56,1,468],[50,61,1,483,"undefined"],[50,70,1,448],[50,73,1,493,"arguments"],[50,82,1,502],[50,83,1,503],[50,84,1,502],[50,85,1,448],[50,88,1,506],[50,92,1,434],[52,0,1,511],[52,8,1,514,"inclusive"],[52,17,1,511],[52,19,1,524],[53,0,1,525],[53,13,1,532,"value"],[53,18,1,537],[53,22,1,539,"lowerBound"],[53,32,1,532],[53,36,1,551,"value"],[53,41,1,556],[53,45,1,558,"upperBound"],[53,55,1,525],[54,0,1,570],[56,0,1,570],[56,11,1,577,"value"],[56,16,1,582],[56,19,1,583,"lowerBound"],[56,29,1,577],[56,33,1,595,"value"],[56,38,1,600],[56,41,1,601,"upperBound"],[56,51,1,570],[57,0,1,613],[57,3,1,366],[61,0,1,621],[61,6,1,625,"clamp"],[61,11,1,630],[61,14,1,631],[61,23,1,640,"clamp"],[61,28,1,631],[61,29,1,646,"value"],[61,34,1,631],[61,36,1,652,"lowerBound"],[61,46,1,631],[61,48,1,663,"upperBound"],[61,58,1,631],[61,60,1,674],[62,0,1,675],[64,0,1,685],[64,11,1,692,"Math"],[64,15,1,696],[64,16,1,697,"min"],[64,19,1,692],[64,20,1,701,"Math"],[64,24,1,705],[64,25,1,706,"max"],[64,28,1,701],[64,29,1,710,"lowerBound"],[64,39,1,701],[64,41,1,721,"value"],[64,46,1,701],[64,47,1,692],[64,49,1,728,"upperBound"],[64,59,1,692],[64,60,1,685],[65,0,1,741],[65,3,1,621],[69,0,1,749],[69,6,1,753,"cubicBezier"],[69,17,1,764],[69,20,1,765],[69,29,1,774,"cubicBezier"],[69,40,1,765],[69,41,1,786,"t"],[69,42,1,765],[69,44,1,788,"from"],[69,48,1,765],[69,50,1,793,"c1"],[69,52,1,765],[69,54,1,796,"c2"],[69,56,1,765],[69,58,1,799,"to"],[69,60,1,765],[69,62,1,802],[70,0,1,803],[72,0,1,813],[72,8,1,817,"term"],[72,12,1,821],[72,15,1,822],[72,19,1,824,"t"],[72,20,1,813],[73,0,1,826],[73,8,1,830,"a"],[73,9,1,831],[73,12,1,832],[73,16,1,834,"Math"],[73,20,1,838],[73,21,1,839,"pow"],[73,24,1,834],[73,25,1,843,"term"],[73,29,1,834],[73,31,1,848],[73,32,1,834],[73,33,1,832],[73,36,1,851,"Math"],[73,40,1,855],[73,41,1,856,"pow"],[73,44,1,851],[73,45,1,860,"t"],[73,46,1,851],[73,48,1,862],[73,49,1,851],[73,50,1,832],[73,53,1,865,"from"],[73,57,1,826],[74,0,1,870],[74,8,1,874,"b"],[74,9,1,875],[74,12,1,876],[74,16,1,878,"Math"],[74,20,1,882],[74,21,1,883,"pow"],[74,24,1,878],[74,25,1,887,"term"],[74,29,1,878],[74,31,1,892],[74,32,1,878],[74,33,1,876],[74,36,1,895,"Math"],[74,40,1,899],[74,41,1,900,"pow"],[74,44,1,895],[74,45,1,904,"t"],[74,46,1,895],[74,48,1,906],[74,49,1,895],[74,50,1,876],[74,53,1,909,"c1"],[74,55,1,870],[75,0,1,912],[75,8,1,916,"c"],[75,9,1,917],[75,12,1,918],[75,16,1,920,"Math"],[75,20,1,924],[75,21,1,925,"pow"],[75,24,1,920],[75,25,1,929,"term"],[75,29,1,920],[75,31,1,934],[75,32,1,920],[75,33,1,918],[75,36,1,937,"Math"],[75,40,1,941],[75,41,1,942,"pow"],[75,44,1,937],[75,45,1,946,"t"],[75,46,1,937],[75,48,1,948],[75,49,1,937],[75,50,1,918],[75,53,1,951,"c2"],[75,55,1,912],[76,0,1,954],[76,8,1,958,"d"],[76,9,1,959],[76,12,1,960],[76,16,1,962,"Math"],[76,20,1,966],[76,21,1,967,"pow"],[76,24,1,962],[76,25,1,971,"term"],[76,29,1,962],[76,31,1,976],[76,32,1,962],[76,33,1,960],[76,36,1,979,"Math"],[76,40,1,983],[76,41,1,984,"pow"],[76,44,1,979],[76,45,1,988,"t"],[76,46,1,979],[76,48,1,990],[76,49,1,979],[76,50,1,960],[76,53,1,993,"to"],[76,55,1,954],[77,0,1,996],[77,11,1,1003,"a"],[77,12,1,1004],[77,15,1,1005,"b"],[77,16,1,1003],[77,19,1,1007,"c"],[77,20,1,1003],[77,23,1,1009,"d"],[77,24,1,996],[78,0,1,1012],[78,3,1,749],[82,0,1,1020],[82,6,1,1024,"round"],[82,11,1,1029],[82,14,1,1030],[82,23,1,1039,"round"],[82,28,1,1030],[82,29,1,1045,"value"],[82,34,1,1030],[82,36,1,1051],[83,0,1,1052],[85,0,1,1062],[85,8,1,1066,"precision"],[85,17,1,1075],[85,20,1,1076,"arguments"],[85,29,1,1085],[85,30,1,1086,"length"],[85,36,1,1076],[85,39,1,1093],[85,40,1,1076],[85,44,1,1096,"arguments"],[85,53,1,1105],[85,54,1,1106],[85,55,1,1105],[85,56,1,1096],[85,61,1,1111,"undefined"],[85,70,1,1076],[85,73,1,1121,"arguments"],[85,82,1,1130],[85,83,1,1131],[85,84,1,1130],[85,85,1,1076],[85,88,1,1134],[85,89,1,1062],[86,0,1,1136],[86,8,1,1140,"p"],[86,9,1,1141],[86,12,1,1142,"Math"],[86,16,1,1146],[86,17,1,1147,"pow"],[86,20,1,1142],[86,21,1,1151],[86,23,1,1142],[86,25,1,1154,"precision"],[86,34,1,1142],[86,35,1,1136],[87,0,1,1165],[87,11,1,1172,"Math"],[87,15,1,1176],[87,16,1,1177,"round"],[87,21,1,1172],[87,22,1,1183,"value"],[87,27,1,1188],[87,30,1,1189,"p"],[87,31,1,1172],[87,35,1,1192,"p"],[87,36,1,1165],[88,0,1,1195],[88,3,1,1020]],"functionMap":{"names":["<global>","bin","mix","lerp","toDeg","toRad","between","clamp","cubicBezier","round"],"mappings":"AAA,eC,gDD,gBE,wDF,iBG,8DH,kBI,sDJ,kBK,sDL,oBM,2ON,kBO,8GP,wBQ,uPR,kBS,qKT"}},"type":"js/module"}]}