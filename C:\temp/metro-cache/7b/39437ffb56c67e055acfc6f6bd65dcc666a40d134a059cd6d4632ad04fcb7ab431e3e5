{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireWildcard","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/extends","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"isAsync":false}},{"name":"query-string","data":{"isAsync":false}},{"name":"./checkLegacyPathConfig","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireWildcard\");\n\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = getPathFromState;\n\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/toConsumableArray\"));\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/defineProperty\"));\n\n  var _extends2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/extends\"));\n\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/slicedToArray\"));\n\n  var queryString = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6], \"query-string\"));\n\n  var _checkLegacyPathConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"./checkLegacyPathConfig\"));\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  var getActiveRoute = function getActiveRoute(state) {\n    var route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n\n    if (route.state) {\n      return getActiveRoute(route.state);\n    }\n\n    return route;\n  };\n\n  function getPathFromState(state, options) {\n    if (state == null) {\n      throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n    }\n\n    var _checkLegacyPathConfi = (0, _checkLegacyPathConfig.default)(options),\n        _checkLegacyPathConfi2 = (0, _slicedToArray2.default)(_checkLegacyPathConfi, 2),\n        legacy = _checkLegacyPathConfi2[0],\n        compatOptions = _checkLegacyPathConfi2[1];\n\n    var configs = compatOptions ? createNormalizedConfigs(legacy, compatOptions.screens) : {};\n    var path = '/';\n    var current = state;\n    var allParams = {};\n\n    var _loop = function _loop() {\n      var index = typeof current.index === 'number' ? current.index : 0;\n      var route = current.routes[index];\n      var pattern = void 0;\n      var focusedParams = void 0;\n      var focusedRoute = getActiveRoute(state);\n      var currentOptions = configs;\n      var nestedRouteNames = [];\n      var hasNext = true;\n\n      while (route.name in currentOptions && hasNext) {\n        pattern = currentOptions[route.name].pattern;\n        nestedRouteNames.push(route.name);\n\n        if (route.params) {\n          (function () {\n            var _currentOptions$route;\n\n            var stringify = (_currentOptions$route = currentOptions[route.name]) == null ? void 0 : _currentOptions$route.stringify;\n            var currentParams = fromEntries(Object.entries(route.params).map(function (_ref) {\n              var _ref2 = (0, _slicedToArray2.default)(_ref, 2),\n                  key = _ref2[0],\n                  value = _ref2[1];\n\n              return [key, stringify != null && stringify[key] ? stringify[key](value) : String(value)];\n            }));\n\n            if (pattern) {\n              (0, _extends2.default)(allParams, currentParams);\n            }\n\n            if (focusedRoute === route) {\n              var _pattern;\n\n              focusedParams = _objectSpread({}, currentParams);\n              (_pattern = pattern) == null ? void 0 : _pattern.split('/').filter(function (p) {\n                return p.startsWith(':');\n              }).forEach(function (p) {\n                var name = getParamName(p);\n\n                if (focusedParams) {\n                  delete focusedParams[name];\n                }\n              });\n            }\n          })();\n        }\n\n        if (!currentOptions[route.name].screens || route.state === undefined) {\n          hasNext = false;\n        } else {\n          index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n          var nextRoute = route.state.routes[index];\n          var nestedConfig = currentOptions[route.name].screens;\n\n          if (nestedConfig && nextRoute.name in nestedConfig) {\n            route = nextRoute;\n            currentOptions = nestedConfig;\n          } else {\n            hasNext = false;\n          }\n        }\n      }\n\n      if (pattern === undefined) {\n        pattern = nestedRouteNames.join('/');\n      }\n\n      if (currentOptions[route.name] !== undefined) {\n        path += pattern.split('/').map(function (p) {\n          var name = getParamName(p);\n\n          if (p === '*') {\n            if (legacy) {\n              throw new Error(\"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config\");\n            }\n\n            return route.name;\n          }\n\n          if (p.startsWith(':')) {\n            var _value = allParams[name];\n\n            if (_value === undefined && p.endsWith('?')) {\n              return '';\n            }\n\n            return encodeURIComponent(_value);\n          }\n\n          return encodeURIComponent(p);\n        }).join('/');\n      } else {\n        path += encodeURIComponent(route.name);\n      }\n\n      if (!focusedParams) {\n        focusedParams = focusedRoute.params;\n      }\n\n      if (route.state) {\n        path += '/';\n      } else if (focusedParams) {\n        for (var param in focusedParams) {\n          if (focusedParams[param] === 'undefined') {\n            delete focusedParams[param];\n          }\n        }\n\n        var query = queryString.stringify(focusedParams);\n\n        if (query) {\n          path += \"?\" + query;\n        }\n      }\n\n      current = route.state;\n    };\n\n    while (current) {\n      _loop();\n    }\n\n    path = path.replace(/\\/+/g, '/');\n    path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n    return path;\n  }\n\n  var fromEntries = function fromEntries(entries) {\n    return entries.reduce(function (acc, _ref3) {\n      var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),\n          k = _ref4[0],\n          v = _ref4[1];\n\n      if (acc.hasOwnProperty(k)) {\n        throw new Error(\"A value for key '\" + k + \"' already exists in the object.\");\n      }\n\n      acc[k] = v;\n      return acc;\n    }, {});\n  };\n\n  var getParamName = function getParamName(pattern) {\n    return pattern.replace(/^:/, '').replace(/\\?$/, '');\n  };\n\n  var joinPaths = function joinPaths() {\n    var _ref5;\n\n    for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n      paths[_key] = arguments[_key];\n    }\n\n    return (_ref5 = []).concat.apply(_ref5, (0, _toConsumableArray2.default)(paths.map(function (p) {\n      return p.split('/');\n    }))).filter(Boolean).join('/');\n  };\n\n  var createConfigItem = function createConfigItem(legacy, config, parentPattern) {\n    var _pattern3;\n\n    if (typeof config === 'string') {\n      var _pattern2 = parentPattern ? joinPaths(parentPattern, config) : config;\n\n      return {\n        pattern: _pattern2\n      };\n    }\n\n    var pattern;\n\n    if (legacy) {\n      pattern = config.exact !== true && parentPattern && config.path ? joinPaths(parentPattern, config.path) : config.path;\n    } else {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n      }\n\n      pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n    }\n\n    var screens = config.screens ? createNormalizedConfigs(legacy, config.screens, pattern) : undefined;\n    return {\n      pattern: (_pattern3 = pattern) == null ? void 0 : _pattern3.split('/').filter(Boolean).join('/'),\n      stringify: config.stringify,\n      screens: screens\n    };\n  };\n\n  var createNormalizedConfigs = function createNormalizedConfigs(legacy, options, pattern) {\n    return fromEntries(Object.entries(options).map(function (_ref6) {\n      var _ref7 = (0, _slicedToArray2.default)(_ref6, 2),\n          name = _ref7[0],\n          c = _ref7[1];\n\n      var result = createConfigItem(legacy, c, pattern);\n      return [name, result];\n    }));\n  };\n});","lineCount":252,"map":[[19,0,1,0],[21,0,7,0],[27,0,22,0],[27,6,22,6,"getActiveRoute"],[27,20,22,20],[27,23,22,23],[27,32,22,6,"getActiveRoute"],[27,46,22,23],[27,47,22,24,"state"],[27,52,22,23],[27,54,22,76],[28,0,23,2],[28,8,23,8,"route"],[28,13,23,13],[28,16,24,4],[28,23,24,11,"state"],[28,28,24,16],[28,29,24,17,"index"],[28,34,24,4],[28,39,24,27],[28,47,24,4],[28,50,25,8,"state"],[28,55,25,13],[28,56,25,14,"routes"],[28,62,25,8],[28,63,25,21,"state"],[28,68,25,26],[28,69,25,27,"index"],[28,74,25,8],[28,75,24,4],[28,78,26,8,"state"],[28,83,26,13],[28,84,26,14,"routes"],[28,90,26,8],[28,91,26,21,"state"],[28,96,26,26],[28,97,26,27,"routes"],[28,103,26,21],[28,104,26,34,"length"],[28,110,26,21],[28,113,26,43],[28,114,26,8],[28,115,23,2],[30,0,28,2],[30,8,28,6,"route"],[30,13,28,11],[30,14,28,12,"state"],[30,19,28,2],[30,21,28,19],[31,0,29,4],[31,13,29,11,"getActiveRoute"],[31,27,29,25],[31,28,29,26,"route"],[31,33,29,31],[31,34,29,32,"state"],[31,39,29,25],[31,40,29,4],[32,0,30,3],[34,0,32,2],[34,11,32,9,"route"],[34,16,32,2],[35,0,33,1],[35,3,22,0],[37,0,64,15],[37,11,64,24,"getPathFromState"],[37,27,64,15],[37,28,65,2,"state"],[37,33,64,15],[37,35,66,2,"options"],[37,42,64,15],[37,44,67,10],[38,0,68,2],[38,8,68,6,"state"],[38,13,68,11],[38,17,68,15],[38,21,68,2],[38,23,68,21],[39,0,69,4],[39,12,69,10,"Error"],[39,17,69,15],[39,18,70,6],[39,97,69,15],[39,98,69,4],[40,0,72,3],[42,0,67,10],[42,32,74,34],[42,68,74,56,"options"],[42,75,74,34],[42,76,67,10],[43,0,67,10],[44,0,67,10],[44,8,74,9,"legacy"],[44,14,67,10],[45,0,67,10],[45,8,74,17,"compatOptions"],[45,21,67,10],[47,0,77,2],[47,8,77,8,"configs"],[47,15,77,43],[47,18,77,46,"compatOptions"],[47,31,77,59],[47,34,78,6,"createNormalizedConfigs"],[47,57,78,29],[47,58,78,30,"legacy"],[47,64,78,29],[47,66,78,38,"compatOptions"],[47,79,78,51],[47,80,78,52,"screens"],[47,87,78,29],[47,88,77,59],[47,91,79,6],[47,93,77,2],[48,0,81,2],[48,8,81,6,"path"],[48,12,81,10],[48,15,81,13],[48,18,81,2],[49,0,82,2],[49,8,82,6,"current"],[49,15,82,32],[49,18,82,35,"state"],[49,23,82,2],[50,0,84,2],[50,8,84,8,"allParams"],[50,17,84,38],[50,20,84,41],[50,22,84,2],[52,0,67,10],[53,0,87,4],[53,10,87,8,"index"],[53,15,87,13],[53,18,87,16],[53,25,87,23,"current"],[53,32,87,30],[53,33,87,31,"index"],[53,38,87,16],[53,43,87,41],[53,51,87,16],[53,54,87,52,"current"],[53,61,87,59],[53,62,87,60,"index"],[53,67,87,16],[53,70,87,68],[53,71,87,4],[54,0,88,4],[54,10,88,8,"route"],[54,15,88,13],[54,18,88,16,"current"],[54,25,88,23],[54,26,88,24,"routes"],[54,32,88,16],[54,33,88,31,"index"],[54,38,88,16],[54,39,88,4],[55,0,92,4],[55,10,92,8,"pattern"],[55,17,92,35],[55,26,92,4],[56,0,94,4],[56,10,94,8,"focusedParams"],[56,23,94,54],[56,32,94,4],[57,0,95,4],[57,10,95,8,"focusedRoute"],[57,22,95,20],[57,25,95,23,"getActiveRoute"],[57,39,95,37],[57,40,95,38,"state"],[57,45,95,37],[57,46,95,4],[58,0,96,4],[58,10,96,8,"currentOptions"],[58,24,96,22],[58,27,96,25,"configs"],[58,34,96,4],[59,0,99,4],[59,10,99,8,"nestedRouteNames"],[59,26,99,24],[59,29,99,27],[59,31,99,4],[60,0,101,4],[60,10,101,8,"hasNext"],[60,17,101,15],[60,20,101,18],[60,24,101,4],[62,0,103,4],[62,13,103,11,"route"],[62,18,103,16],[62,19,103,17,"name"],[62,23,103,11],[62,27,103,25,"currentOptions"],[62,41,103,11],[62,45,103,43,"hasNext"],[62,52,103,4],[62,54,103,52],[63,0,104,6,"pattern"],[63,8,104,6,"pattern"],[63,15,104,13],[63,18,104,16,"currentOptions"],[63,32,104,30],[63,33,104,31,"route"],[63,38,104,36],[63,39,104,37,"name"],[63,43,104,30],[63,44,104,16],[63,45,104,43,"pattern"],[63,52,104,6],[64,0,106,6,"nestedRouteNames"],[64,8,106,6,"nestedRouteNames"],[64,24,106,22],[64,25,106,23,"push"],[64,29,106,6],[64,30,106,28,"route"],[64,35,106,33],[64,36,106,34,"name"],[64,40,106,6],[66,0,108,6],[66,12,108,10,"route"],[66,17,108,15],[66,18,108,16,"params"],[66,24,108,6],[66,26,108,24],[67,0,108,24],[68,0,108,24],[70,0,109,8],[70,16,109,14,"stringify"],[70,25,109,23],[70,53,109,26,"currentOptions"],[70,67,109,40],[70,68,109,41,"route"],[70,73,109,46],[70,74,109,47,"name"],[70,78,109,40],[70,79,109,23],[70,100,109,26],[70,122,109,54,"stringify"],[70,131,109,8],[71,0,111,8],[71,16,111,14,"currentParams"],[71,29,111,27],[71,32,111,30,"fromEntries"],[71,43,111,41],[71,44,112,10,"Object"],[71,50,112,16],[71,51,112,17,"entries"],[71,58,112,10],[71,59,112,25,"route"],[71,64,112,30],[71,65,112,31,"params"],[71,71,112,10],[71,73,112,39,"map"],[71,76,112,10],[71,77,112,43],[72,0,112,43],[73,0,112,43],[73,18,112,45,"key"],[73,21,112,43],[74,0,112,43],[74,18,112,50,"value"],[74,23,112,43],[76,0,112,43],[76,21,112,61],[76,22,113,12,"key"],[76,25,112,61],[76,27,114,12,"stringify"],[76,36,114,21],[76,44,114,12],[76,48,114,12,"stringify"],[76,57,114,21],[76,58,114,24,"key"],[76,61,114,21],[76,62,114,12],[76,65,114,31,"stringify"],[76,74,114,40],[76,75,114,41,"key"],[76,78,114,40],[76,79,114,31],[76,80,114,46,"value"],[76,85,114,31],[76,86,114,12],[76,89,114,55,"String"],[76,95,114,61],[76,96,114,62,"value"],[76,101,114,61],[76,102,112,61],[76,103,112,43],[77,0,112,43],[77,13,112,10],[77,14,111,41],[77,15,111,8],[79,0,118,8],[79,16,118,12,"pattern"],[79,23,118,8],[79,25,118,21],[80,0,119,10],[80,37,119,24,"allParams"],[80,46,119,10],[80,48,119,35,"currentParams"],[80,61,119,10],[81,0,120,9],[83,0,122,8],[83,16,122,12,"focusedRoute"],[83,28,122,24],[83,33,122,29,"route"],[83,38,122,8],[83,40,122,36],[84,0,122,36],[86,0,125,10,"focusedParams"],[86,14,125,10,"focusedParams"],[86,27,125,23],[86,48,125,31,"currentParams"],[86,61,125,23],[86,62,125,10],[87,0,127,10],[87,26,127,10,"pattern"],[87,33,127,17],[87,42,127,10],[87,63,128,14,"split"],[87,68,127,10],[87,69,128,20],[87,72,127,10],[87,74,129,13,"filter"],[87,80,127,10],[87,81,129,20],[87,91,129,21,"p"],[87,92,129,20],[88,0,129,20],[88,23,129,27,"p"],[88,24,129,28],[88,25,129,29,"startsWith"],[88,35,129,27],[88,36,129,40],[88,39,129,27],[88,40,129,20],[89,0,129,20],[89,15,127,10],[89,17,131,13,"forEach"],[89,24,127,10],[89,25,131,21],[89,35,131,22,"p"],[89,36,131,21],[89,38,131,28],[90,0,132,14],[90,20,132,20,"name"],[90,24,132,24],[90,27,132,27,"getParamName"],[90,39,132,39],[90,40,132,40,"p"],[90,41,132,39],[90,42,132,14],[92,0,135,14],[92,20,135,18,"focusedParams"],[92,33,135,14],[92,35,135,33],[93,0,137,16],[93,25,137,23,"focusedParams"],[93,38,137,36],[93,39,137,37,"name"],[93,43,137,36],[93,44,137,16],[94,0,138,15],[95,0,139,13],[95,15,127,10],[96,0,140,9],[97,0,108,24],[98,0,141,7],[100,0,144,6],[100,12,144,10],[100,13,144,11,"currentOptions"],[100,27,144,25],[100,28,144,26,"route"],[100,33,144,31],[100,34,144,32,"name"],[100,38,144,25],[100,39,144,11],[100,40,144,38,"screens"],[100,47,144,10],[100,51,144,49,"route"],[100,56,144,54],[100,57,144,55,"state"],[100,62,144,49],[100,67,144,65,"undefined"],[100,76,144,6],[100,78,144,76],[101,0,145,8,"hasNext"],[101,10,145,8,"hasNext"],[101,17,145,15],[101,20,145,18],[101,25,145,8],[102,0,146,7],[102,9,144,6],[102,15,146,13],[103,0,147,8,"index"],[103,10,147,8,"index"],[103,15,147,13],[103,18,148,10],[103,25,148,17,"route"],[103,30,148,22],[103,31,148,23,"state"],[103,36,148,17],[103,37,148,29,"index"],[103,42,148,10],[103,47,148,39],[103,55,148,10],[103,58,149,14,"route"],[103,63,149,19],[103,64,149,20,"state"],[103,69,149,14],[103,70,149,26,"index"],[103,75,148,10],[103,78,150,14,"route"],[103,83,150,19],[103,84,150,20,"state"],[103,89,150,14],[103,90,150,26,"routes"],[103,96,150,14],[103,97,150,33,"length"],[103,103,150,14],[103,106,150,42],[103,107,147,8],[104,0,152,8],[104,14,152,14,"nextRoute"],[104,23,152,23],[104,26,152,26,"route"],[104,31,152,31],[104,32,152,32,"state"],[104,37,152,26],[104,38,152,38,"routes"],[104,44,152,26],[104,45,152,45,"index"],[104,50,152,26],[104,51,152,8],[105,0,153,8],[105,14,153,14,"nestedConfig"],[105,26,153,26],[105,29,153,29,"currentOptions"],[105,43,153,43],[105,44,153,44,"route"],[105,49,153,49],[105,50,153,50,"name"],[105,54,153,43],[105,55,153,29],[105,56,153,56,"screens"],[105,63,153,8],[107,0,156,8],[107,14,156,12,"nestedConfig"],[107,26,156,24],[107,30,156,28,"nextRoute"],[107,39,156,37],[107,40,156,38,"name"],[107,44,156,28],[107,48,156,46,"nestedConfig"],[107,60,156,8],[107,62,156,60],[108,0,157,10,"route"],[108,12,157,10,"route"],[108,17,157,15],[108,20,157,18,"nextRoute"],[108,29,157,10],[109,0,158,10,"currentOptions"],[109,12,158,10,"currentOptions"],[109,26,158,24],[109,29,158,27,"nestedConfig"],[109,41,158,10],[110,0,159,9],[110,11,156,8],[110,17,159,15],[111,0,161,10,"hasNext"],[111,12,161,10,"hasNext"],[111,19,161,17],[111,22,161,20],[111,27,161,10],[112,0,162,9],[113,0,163,7],[114,0,164,5],[116,0,166,4],[116,10,166,8,"pattern"],[116,17,166,15],[116,22,166,20,"undefined"],[116,31,166,4],[116,33,166,31],[117,0,167,6,"pattern"],[117,8,167,6,"pattern"],[117,15,167,13],[117,18,167,16,"nestedRouteNames"],[117,34,167,32],[117,35,167,33,"join"],[117,39,167,16],[117,40,167,38],[117,43,167,16],[117,44,167,6],[118,0,168,5],[120,0,170,4],[120,10,170,8,"currentOptions"],[120,24,170,22],[120,25,170,23,"route"],[120,30,170,28],[120,31,170,29,"name"],[120,35,170,22],[120,36,170,8],[120,41,170,39,"undefined"],[120,50,170,4],[120,52,170,50],[121,0,171,6,"path"],[121,8,171,6,"path"],[121,12,171,10],[121,16,171,14,"pattern"],[121,23,171,21],[121,24,172,9,"split"],[121,29,171,14],[121,30,172,15],[121,33,171,14],[121,35,173,9,"map"],[121,38,171,14],[121,39,173,13],[121,49,173,14,"p"],[121,50,173,13],[121,52,173,20],[122,0,174,10],[122,14,174,16,"name"],[122,18,174,20],[122,21,174,23,"getParamName"],[122,33,174,35],[122,34,174,36,"p"],[122,35,174,35],[122,36,174,10],[124,0,179,10],[124,14,179,14,"p"],[124,15,179,15],[124,20,179,20],[124,23,179,10],[124,25,179,25],[125,0,180,12],[125,16,180,16,"legacy"],[125,22,180,12],[125,24,180,24],[126,0,181,14],[126,20,181,20],[126,24,181,24,"Error"],[126,29,181,20],[126,30,182,16],[126,174,181,20],[126,175,181,14],[127,0,184,13],[129,0,186,12],[129,19,186,19,"route"],[129,24,186,24],[129,25,186,25,"name"],[129,29,186,12],[130,0,187,11],[132,0,190,10],[132,14,190,14,"p"],[132,15,190,15],[132,16,190,16,"startsWith"],[132,26,190,14],[132,27,190,27],[132,30,190,14],[132,31,190,10],[132,33,190,33],[133,0,191,12],[133,16,191,18,"value"],[133,22,191,23],[133,25,191,26,"allParams"],[133,34,191,35],[133,35,191,36,"name"],[133,39,191,35],[133,40,191,12],[135,0,193,12],[135,16,193,16,"value"],[135,22,193,21],[135,27,193,26,"undefined"],[135,36,193,16],[135,40,193,39,"p"],[135,41,193,40],[135,42,193,41,"endsWith"],[135,50,193,39],[135,51,193,50],[135,54,193,39],[135,55,193,12],[135,57,193,56],[136,0,195,14],[136,21,195,21],[136,23,195,14],[137,0,196,13],[139,0,198,12],[139,19,198,19,"encodeURIComponent"],[139,37,198,37],[139,38,198,38,"value"],[139,44,198,37],[139,45,198,12],[140,0,199,11],[142,0,201,10],[142,17,201,17,"encodeURIComponent"],[142,35,201,35],[142,36,201,36,"p"],[142,37,201,35],[142,38,201,10],[143,0,202,9],[143,9,171,14],[143,11,203,9,"join"],[143,15,171,14],[143,16,203,14],[143,19,171,14],[143,20,171,6],[144,0,204,5],[144,7,170,4],[144,13,204,11],[145,0,205,6,"path"],[145,8,205,6,"path"],[145,12,205,10],[145,16,205,14,"encodeURIComponent"],[145,34,205,32],[145,35,205,33,"route"],[145,40,205,38],[145,41,205,39,"name"],[145,45,205,32],[145,46,205,6],[146,0,206,5],[148,0,208,4],[148,10,208,8],[148,11,208,9,"focusedParams"],[148,24,208,4],[148,26,208,24],[149,0,209,6,"focusedParams"],[149,8,209,6,"focusedParams"],[149,21,209,19],[149,24,209,22,"focusedRoute"],[149,36,209,34],[149,37,209,35,"params"],[149,43,209,6],[150,0,210,5],[152,0,212,4],[152,10,212,8,"route"],[152,15,212,13],[152,16,212,14,"state"],[152,21,212,4],[152,23,212,21],[153,0,213,6,"path"],[153,8,213,6,"path"],[153,12,213,10],[153,16,213,14],[153,19,213,6],[154,0,214,5],[154,7,212,4],[154,13,214,11],[154,17,214,15,"focusedParams"],[154,30,214,11],[154,32,214,30],[155,0,215,6],[155,13,215,11],[155,17,215,15,"param"],[155,22,215,6],[155,26,215,24,"focusedParams"],[155,39,215,6],[155,41,215,39],[156,0,216,8],[156,14,216,12,"focusedParams"],[156,27,216,25],[156,28,216,26,"param"],[156,33,216,25],[156,34,216,12],[156,39,216,37],[156,50,216,8],[156,52,216,50],[157,0,218,10],[157,19,218,17,"focusedParams"],[157,32,218,30],[157,33,218,31,"param"],[157,38,218,30],[157,39,218,10],[158,0,219,9],[159,0,220,7],[161,0,222,6],[161,12,222,12,"query"],[161,17,222,17],[161,20,222,20,"queryString"],[161,31,222,31],[161,32,222,32,"stringify"],[161,41,222,20],[161,42,222,42,"focusedParams"],[161,55,222,20],[161,56,222,6],[163,0,224,6],[163,12,224,10,"query"],[163,17,224,6],[163,19,224,17],[164,0,225,8,"path"],[164,10,225,8,"path"],[164,14,225,12],[164,24,225,20,"query"],[164,29,225,8],[165,0,226,7],[166,0,227,5],[168,0,229,4,"current"],[168,6,229,4,"current"],[168,13,229,11],[168,16,229,14,"route"],[168,21,229,19],[168,22,229,20,"state"],[168,27,229,4],[169,0,67,10],[171,0,86,2],[171,11,86,9,"current"],[171,18,86,2],[171,20,86,18],[172,0,86,18],[173,0,230,3],[175,0,233,2,"path"],[175,4,233,2,"path"],[175,8,233,6],[175,11,233,9,"path"],[175,15,233,13],[175,16,233,14,"replace"],[175,23,233,9],[175,24,233,22],[175,30,233,9],[175,32,233,30],[175,35,233,9],[175,36,233,2],[176,0,234,2,"path"],[176,4,234,2,"path"],[176,8,234,6],[176,11,234,9,"path"],[176,15,234,13],[176,16,234,14,"length"],[176,22,234,9],[176,25,234,23],[176,26,234,9],[176,29,234,27,"path"],[176,33,234,31],[176,34,234,32,"replace"],[176,41,234,27],[176,42,234,40],[176,47,234,27],[176,49,234,47],[176,51,234,27],[176,52,234,9],[176,55,234,53,"path"],[176,59,234,2],[177,0,236,2],[177,11,236,9,"path"],[177,15,236,2],[178,0,237,1],[180,0,240,0],[180,6,240,6,"fromEntries"],[180,17,240,17],[180,20,240,20],[180,29,240,6,"fromEntries"],[180,40,240,20],[180,41,240,42,"entries"],[180,48,240,20],[181,0,240,20],[181,11,241,2,"entries"],[181,18,241,9],[181,19,241,10,"reduce"],[181,25,241,2],[181,26,241,17],[181,36,241,18,"acc"],[181,39,241,17],[181,48,241,34],[182,0,241,34],[183,0,241,34],[183,10,241,24,"k"],[183,11,241,34],[184,0,241,34],[184,10,241,27,"v"],[184,11,241,34],[186,0,242,4],[186,10,242,8,"acc"],[186,13,242,11],[186,14,242,12,"hasOwnProperty"],[186,28,242,8],[186,29,242,27,"k"],[186,30,242,8],[186,31,242,4],[186,33,242,31],[187,0,243,6],[187,14,243,12],[187,18,243,16,"Error"],[187,23,243,12],[187,46,243,42,"k"],[187,47,243,12],[187,84,243,6],[188,0,244,5],[190,0,246,4,"acc"],[190,6,246,4,"acc"],[190,9,246,7],[190,10,246,8,"k"],[190,11,246,7],[190,12,246,4],[190,15,246,13,"v"],[190,16,246,4],[191,0,247,4],[191,13,247,11,"acc"],[191,16,247,4],[192,0,248,3],[192,5,241,2],[192,7,248,5],[192,9,241,2],[192,10,240,20],[193,0,240,20],[193,3,240,0],[195,0,250,0],[195,6,250,6,"getParamName"],[195,18,250,18],[195,21,250,21],[195,30,250,6,"getParamName"],[195,42,250,21],[195,43,250,22,"pattern"],[195,50,250,21],[196,0,250,21],[196,11,251,2,"pattern"],[196,18,251,9],[196,19,251,10,"replace"],[196,26,251,2],[196,27,251,18],[196,31,251,2],[196,33,251,24],[196,35,251,2],[196,37,251,28,"replace"],[196,44,251,2],[196,45,251,36],[196,50,251,2],[196,52,251,43],[196,54,251,2],[196,55,250,21],[197,0,250,21],[197,3,250,0],[199,0,253,0],[199,6,253,6,"joinPaths"],[199,15,253,15],[199,18,253,18],[199,27,253,6,"joinPaths"],[199,36,253,18],[200,0,253,18],[202,0,253,18],[202,38,253,22,"paths"],[202,43,253,18],[203,0,253,22,"paths"],[203,6,253,22,"paths"],[203,11,253,18],[204,0,253,18],[206,0,253,18],[206,11,254,2],[206,20,254,3],[206,22,254,2],[206,24,255,5,"concat"],[206,30,254,2],[206,77,255,15,"paths"],[206,82,255,20],[206,83,255,21,"map"],[206,86,255,15],[206,87,255,25],[206,97,255,26,"p"],[206,98,255,25],[207,0,255,25],[207,13,255,32,"p"],[207,14,255,33],[207,15,255,34,"split"],[207,20,255,32],[207,21,255,40],[207,24,255,32],[207,25,255,25],[208,0,255,25],[208,5,255,15],[208,6,254,2],[208,9,256,5,"filter"],[208,15,254,2],[208,16,256,12,"Boolean"],[208,23,254,2],[208,25,257,5,"join"],[208,29,254,2],[208,30,257,10],[208,33,254,2],[208,34,253,18],[209,0,253,18],[209,3,253,0],[211,0,259,0],[211,6,259,6,"createConfigItem"],[211,22,259,22],[211,25,259,25],[211,34,259,6,"createConfigItem"],[211,50,259,25],[211,51,260,2,"legacy"],[211,57,259,25],[211,59,261,2,"config"],[211,65,259,25],[211,67,262,2,"parentPattern"],[211,80,259,25],[211,82,263,17],[212,0,263,17],[214,0,264,2],[214,8,264,6],[214,15,264,13,"config"],[214,21,264,6],[214,26,264,24],[214,34,264,2],[214,36,264,34],[215,0,266,4],[215,10,266,10,"pattern"],[215,19,266,17],[215,22,266,20,"parentPattern"],[215,35,266,33],[215,38,266,36,"joinPaths"],[215,47,266,45],[215,48,266,46,"parentPattern"],[215,61,266,45],[215,63,266,61,"config"],[215,69,266,45],[215,70,266,33],[215,73,266,71,"config"],[215,79,266,4],[217,0,268,4],[217,13,268,11],[218,0,268,13,"pattern"],[218,8,268,13,"pattern"],[218,15,268,20],[218,17,268,13,"pattern"],[219,0,268,11],[219,7,268,4],[220,0,269,3],[222,0,273,2],[222,8,273,6,"pattern"],[222,15,273,2],[224,0,275,2],[224,8,275,6,"legacy"],[224,14,275,2],[224,16,275,14],[225,0,276,4,"pattern"],[225,6,276,4,"pattern"],[225,13,276,11],[225,16,277,6,"config"],[225,22,277,12],[225,23,277,13,"exact"],[225,28,277,6],[225,33,277,23],[225,37,277,6],[225,41,277,31,"parentPattern"],[225,54,277,6],[225,58,277,48,"config"],[225,64,277,54],[225,65,277,55,"path"],[225,69,277,6],[225,72,278,10,"joinPaths"],[225,81,278,19],[225,82,278,20,"parentPattern"],[225,95,278,19],[225,97,278,35,"config"],[225,103,278,41],[225,104,278,42,"path"],[225,108,278,19],[225,109,277,6],[225,112,279,10,"config"],[225,118,279,16],[225,119,279,17,"path"],[225,123,276,4],[226,0,280,3],[226,5,275,2],[226,11,280,9],[227,0,281,4],[227,10,281,8,"config"],[227,16,281,14],[227,17,281,15,"exact"],[227,22,281,8],[227,26,281,24,"config"],[227,32,281,30],[227,33,281,31,"path"],[227,37,281,24],[227,42,281,40,"undefined"],[227,51,281,4],[227,53,281,51],[228,0,282,6],[228,14,282,12],[228,18,282,16,"Error"],[228,23,282,12],[228,24,283,8],[228,174,282,12],[228,175,282,6],[229,0,285,5],[231,0,287,4,"pattern"],[231,6,287,4,"pattern"],[231,13,287,11],[231,16,288,6,"config"],[231,22,288,12],[231,23,288,13,"exact"],[231,28,288,6],[231,33,288,23],[231,37,288,6],[231,40,289,10,"joinPaths"],[231,49,289,19],[231,50,289,20,"parentPattern"],[231,63,289,33],[231,67,289,37],[231,69,289,19],[231,71,289,41,"config"],[231,77,289,47],[231,78,289,48,"path"],[231,82,289,41],[231,86,289,56],[231,88,289,19],[231,89,288,6],[231,92,290,10,"config"],[231,98,290,16],[231,99,290,17,"path"],[231,103,290,10],[231,107,290,25],[231,109,287,4],[232,0,291,3],[234,0,293,2],[234,8,293,8,"screens"],[234,15,293,15],[234,18,293,18,"config"],[234,24,293,24],[234,25,293,25,"screens"],[234,32,293,18],[234,35,294,6,"createNormalizedConfigs"],[234,58,294,29],[234,59,294,30,"legacy"],[234,65,294,29],[234,67,294,38,"config"],[234,73,294,44],[234,74,294,45,"screens"],[234,81,294,29],[234,83,294,54,"pattern"],[234,90,294,29],[234,91,293,18],[234,94,295,6,"undefined"],[234,103,293,2],[235,0,297,2],[235,11,297,9],[236,0,299,4,"pattern"],[236,6,299,4,"pattern"],[236,13,299,11],[236,28,299,13,"pattern"],[236,35,299,11],[236,56,299,13],[236,66,299,22,"split"],[236,71,299,13],[236,72,299,28],[236,75,299,13],[236,77,299,33,"filter"],[236,83,299,13],[236,84,299,40,"Boolean"],[236,91,299,13],[236,93,299,49,"join"],[236,97,299,13],[236,98,299,54],[236,101,299,13],[236,102,297,9],[237,0,300,4,"stringify"],[237,6,300,4,"stringify"],[237,15,300,13],[237,17,300,15,"config"],[237,23,300,21],[237,24,300,22,"stringify"],[237,33,297,9],[238,0,301,4,"screens"],[238,6,301,4,"screens"],[238,13,301,11],[238,15,301,4,"screens"],[239,0,297,9],[239,5,297,2],[240,0,303,1],[240,3,259,0],[242,0,305,0],[242,6,305,6,"createNormalizedConfigs"],[242,29,305,29],[242,32,305,32],[242,41,305,6,"createNormalizedConfigs"],[242,64,305,32],[242,65,306,2,"legacy"],[242,71,305,32],[242,73,307,2,"options"],[242,80,305,32],[242,82,308,2,"pattern"],[242,89,305,32],[243,0,305,32],[243,11,310,2,"fromEntries"],[243,22,310,13],[243,23,311,4,"Object"],[243,29,311,10],[243,30,311,11,"entries"],[243,37,311,4],[243,38,311,19,"options"],[243,45,311,4],[243,47,311,28,"map"],[243,50,311,4],[243,51,311,32],[243,68,311,47],[244,0,311,47],[245,0,311,47],[245,10,311,34,"name"],[245,14,311,47],[246,0,311,47],[246,10,311,40,"c"],[246,11,311,47],[248,0,312,6],[248,10,312,12,"result"],[248,16,312,18],[248,19,312,21,"createConfigItem"],[248,35,312,37],[248,36,312,38,"legacy"],[248,42,312,37],[248,44,312,46,"c"],[248,45,312,37],[248,47,312,49,"pattern"],[248,54,312,37],[248,55,312,6],[249,0,314,6],[249,13,314,13],[249,14,314,14,"name"],[249,18,314,13],[249,20,314,20,"result"],[249,26,314,13],[249,27,314,6],[250,0,315,5],[250,5,311,4],[250,6,310,13],[250,7,305,32],[251,0,305,32],[251,3,305,0]],"functionMap":{"names":["<global>","getActiveRoute","getPathFromState","Object.entries.map$argument_0","<anonymous>","pattern.split.map$argument_0","fromEntries","entries.reduce$argument_0","getParamName","joinPaths","paths.map$argument_0","createConfigItem","createNormalizedConfigs"],"mappings":"AAA;uBCqB;CDW;eE+B;2CCgD;WDG;oBEc,wBF;qBEE;aFQ;aGkC;SH6B;CFmC;oBMG;iBCC;GDO,qBN;qBQE;8CRC;kBSE;yBCE,mBD;cTE;yBWE;CX4C;gCYE;gCTM;KSI;GZC"}},"type":"js/module"}]}