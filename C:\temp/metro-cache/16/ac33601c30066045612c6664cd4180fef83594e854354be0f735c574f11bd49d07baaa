{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"isAsync":false}},{"name":"./error","data":{"isAsync":false}},{"name":"../utils/names","data":{"isAsync":false}},{"name":"./generic","data":{"isAsync":false}},{"name":"../definition-syntax/parse","data":{"isAsync":false}},{"name":"../definition-syntax/generate","data":{"isAsync":false}},{"name":"../definition-syntax/walk","data":{"isAsync":false}},{"name":"./prepare-tokens","data":{"isAsync":false}},{"name":"./match-graph","data":{"isAsync":false}},{"name":"./match","data":{"isAsync":false}},{"name":"./trace","data":{"isAsync":false}},{"name":"./search","data":{"isAsync":false}},{"name":"./structure","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n\n  var SyntaxReferenceError = _$$_REQUIRE(_dependencyMap[1], \"./error\").SyntaxReferenceError;\n\n  var SyntaxMatchError = _$$_REQUIRE(_dependencyMap[1], \"./error\").SyntaxMatchError;\n\n  var names = _$$_REQUIRE(_dependencyMap[2], \"../utils/names\");\n\n  var generic = _$$_REQUIRE(_dependencyMap[3], \"./generic\");\n\n  var parse = _$$_REQUIRE(_dependencyMap[4], \"../definition-syntax/parse\");\n\n  var generate = _$$_REQUIRE(_dependencyMap[5], \"../definition-syntax/generate\");\n\n  var walk = _$$_REQUIRE(_dependencyMap[6], \"../definition-syntax/walk\");\n\n  var prepareTokens = _$$_REQUIRE(_dependencyMap[7], \"./prepare-tokens\");\n\n  var buildMatchGraph = _$$_REQUIRE(_dependencyMap[8], \"./match-graph\").buildMatchGraph;\n\n  var matchAsTree = _$$_REQUIRE(_dependencyMap[9], \"./match\").matchAsTree;\n\n  var trace = _$$_REQUIRE(_dependencyMap[10], \"./trace\");\n\n  var search = _$$_REQUIRE(_dependencyMap[11], \"./search\");\n\n  var getStructureFromConfig = _$$_REQUIRE(_dependencyMap[12], \"./structure\").getStructureFromConfig;\n\n  var cssWideKeywords = buildMatchGraph('inherit | initial | unset');\n  var cssWideKeywordsWithExpression = buildMatchGraph('inherit | initial | unset | <-ms-legacy-expression>');\n\n  function dumpMapSyntax(map, compact, syntaxAsAst) {\n    var result = {};\n\n    for (var name in map) {\n      if (map[name].syntax) {\n        result[name] = syntaxAsAst ? map[name].syntax : generate(map[name].syntax, {\n          compact: compact\n        });\n      }\n    }\n\n    return result;\n  }\n\n  function dumpAtruleMapSyntax(map, compact, syntaxAsAst) {\n    var result = {};\n\n    for (var _i = 0, _Object$entries = Object.entries(map); _i < _Object$entries.length; _i++) {\n      var _ref = _Object$entries[_i];\n\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      var name = _ref2[0];\n      var atrule = _ref2[1];\n      result[name] = {\n        prelude: atrule.prelude && (syntaxAsAst ? atrule.prelude.syntax : generate(atrule.prelude.syntax, {\n          compact: compact\n        })),\n        descriptors: atrule.descriptors && dumpMapSyntax(atrule.descriptors, compact, syntaxAsAst)\n      };\n    }\n\n    return result;\n  }\n\n  function valueHasVar(tokens) {\n    for (var i = 0; i < tokens.length; i++) {\n      if (tokens[i].value.toLowerCase() === 'var(') {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function buildMatchResult(match, error, iterations) {\n    return {\n      matched: match,\n      iterations: iterations,\n      error: error,\n      getTrace: trace.getTrace,\n      isType: trace.isType,\n      isProperty: trace.isProperty,\n      isKeyword: trace.isKeyword\n    };\n  }\n\n  function matchSyntax(lexer, syntax, value, useCommon) {\n    var tokens = prepareTokens(value, lexer.syntax);\n    var result;\n\n    if (valueHasVar(tokens)) {\n      return buildMatchResult(null, new Error('Matching for a tree with var() is not supported'));\n    }\n\n    if (useCommon) {\n      result = matchAsTree(tokens, lexer.valueCommonSyntax, lexer);\n    }\n\n    if (!useCommon || !result.match) {\n      result = matchAsTree(tokens, syntax.match, lexer);\n\n      if (!result.match) {\n        return buildMatchResult(null, new SyntaxMatchError(result.reason, syntax.syntax, value, result), result.iterations);\n      }\n    }\n\n    return buildMatchResult(result.match, null, result.iterations);\n  }\n\n  var Lexer = function Lexer(config, syntax, structure) {\n    this.valueCommonSyntax = cssWideKeywords;\n    this.syntax = syntax;\n    this.generic = false;\n    this.atrules = {};\n    this.properties = {};\n    this.types = {};\n    this.structure = structure || getStructureFromConfig(config);\n\n    if (config) {\n      if (config.types) {\n        for (var name in config.types) {\n          this.addType_(name, config.types[name]);\n        }\n      }\n\n      if (config.generic) {\n        this.generic = true;\n\n        for (var name in generic) {\n          this.addType_(name, generic[name]);\n        }\n      }\n\n      if (config.atrules) {\n        for (var name in config.atrules) {\n          this.addAtrule_(name, config.atrules[name]);\n        }\n      }\n\n      if (config.properties) {\n        for (var name in config.properties) {\n          this.addProperty_(name, config.properties[name]);\n        }\n      }\n    }\n  };\n\n  Lexer.prototype = {\n    structure: {},\n    checkStructure: function checkStructure(ast) {\n      function collectWarning(node, message) {\n        warns.push({\n          node: node,\n          message: message\n        });\n      }\n\n      var structure = this.structure;\n      var warns = [];\n      this.syntax.walk(ast, function (node) {\n        if (structure.hasOwnProperty(node.type)) {\n          structure[node.type].check(node, collectWarning);\n        } else {\n          collectWarning(node, 'Unknown node type `' + node.type + '`');\n        }\n      });\n      return warns.length ? warns : false;\n    },\n    createDescriptor: function createDescriptor(syntax, type, name) {\n      var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var ref = {\n        type: type,\n        name: name\n      };\n      var descriptor = {\n        type: type,\n        name: name,\n        parent: parent,\n        syntax: null,\n        match: null\n      };\n\n      if (typeof syntax === 'function') {\n        descriptor.match = buildMatchGraph(syntax, ref);\n      } else {\n        if (typeof syntax === 'string') {\n          Object.defineProperty(descriptor, 'syntax', {\n            get: function get() {\n              Object.defineProperty(descriptor, 'syntax', {\n                value: parse(syntax)\n              });\n              return descriptor.syntax;\n            }\n          });\n        } else {\n          descriptor.syntax = syntax;\n        }\n\n        Object.defineProperty(descriptor, 'match', {\n          get: function get() {\n            Object.defineProperty(descriptor, 'match', {\n              value: buildMatchGraph(descriptor.syntax, ref)\n            });\n            return descriptor.match;\n          }\n        });\n      }\n\n      return descriptor;\n    },\n    addAtrule_: function addAtrule_(name, syntax) {\n      var _this = this;\n\n      if (!syntax) {\n        return;\n      }\n\n      this.atrules[name] = {\n        type: 'Atrule',\n        name: name,\n        prelude: syntax.prelude ? this.createDescriptor(syntax.prelude, 'AtrulePrelude', name) : null,\n        descriptors: syntax.descriptors ? Object.keys(syntax.descriptors).reduce(function (res, descName) {\n          res[descName] = _this.createDescriptor(syntax.descriptors[descName], 'AtruleDescriptor', descName, name);\n          return res;\n        }, {}) : null\n      };\n    },\n    addProperty_: function addProperty_(name, syntax) {\n      if (!syntax) {\n        return;\n      }\n\n      this.properties[name] = this.createDescriptor(syntax, 'Property', name);\n    },\n    addType_: function addType_(name, syntax) {\n      if (!syntax) {\n        return;\n      }\n\n      this.types[name] = this.createDescriptor(syntax, 'Type', name);\n\n      if (syntax === generic['-ms-legacy-expression']) {\n        this.valueCommonSyntax = cssWideKeywordsWithExpression;\n      }\n    },\n    checkAtruleName: function checkAtruleName(atruleName) {\n      if (!this.getAtrule(atruleName)) {\n        return new SyntaxReferenceError('Unknown at-rule', '@' + atruleName);\n      }\n    },\n    checkAtrulePrelude: function checkAtrulePrelude(atruleName, prelude) {\n      var error = this.checkAtruleName(atruleName);\n\n      if (error) {\n        return error;\n      }\n\n      var atrule = this.getAtrule(atruleName);\n\n      if (!atrule.prelude && prelude) {\n        return new SyntaxError('At-rule `@' + atruleName + '` should not contain a prelude');\n      }\n\n      if (atrule.prelude && !prelude) {\n        return new SyntaxError('At-rule `@' + atruleName + '` should contain a prelude');\n      }\n    },\n    checkAtruleDescriptorName: function checkAtruleDescriptorName(atruleName, descriptorName) {\n      var error = this.checkAtruleName(atruleName);\n\n      if (error) {\n        return error;\n      }\n\n      var atrule = this.getAtrule(atruleName);\n      var descriptor = names.keyword(descriptorName);\n\n      if (!atrule.descriptors) {\n        return new SyntaxError('At-rule `@' + atruleName + '` has no known descriptors');\n      }\n\n      if (!atrule.descriptors[descriptor.name] && !atrule.descriptors[descriptor.basename]) {\n        return new SyntaxReferenceError('Unknown at-rule descriptor', descriptorName);\n      }\n    },\n    checkPropertyName: function checkPropertyName(propertyName) {\n      var property = names.property(propertyName);\n\n      if (property.custom) {\n        return new Error('Lexer matching doesn\\'t applicable for custom properties');\n      }\n\n      if (!this.getProperty(propertyName)) {\n        return new SyntaxReferenceError('Unknown property', propertyName);\n      }\n    },\n    matchAtrulePrelude: function matchAtrulePrelude(atruleName, prelude) {\n      var error = this.checkAtrulePrelude(atruleName, prelude);\n\n      if (error) {\n        return buildMatchResult(null, error);\n      }\n\n      if (!prelude) {\n        return buildMatchResult(null, null);\n      }\n\n      return matchSyntax(this, this.getAtrule(atruleName).prelude, prelude, true);\n    },\n    matchAtruleDescriptor: function matchAtruleDescriptor(atruleName, descriptorName, value) {\n      var error = this.checkAtruleDescriptorName(atruleName, descriptorName);\n\n      if (error) {\n        return buildMatchResult(null, error);\n      }\n\n      var atrule = this.getAtrule(atruleName);\n      var descriptor = names.keyword(descriptorName);\n      return matchSyntax(this, atrule.descriptors[descriptor.name] || atrule.descriptors[descriptor.basename], value, true);\n    },\n    matchDeclaration: function matchDeclaration(node) {\n      if (node.type !== 'Declaration') {\n        return buildMatchResult(null, new Error('Not a Declaration node'));\n      }\n\n      return this.matchProperty(node.property, node.value);\n    },\n    matchProperty: function matchProperty(propertyName, value) {\n      var error = this.checkPropertyName(propertyName);\n\n      if (error) {\n        return buildMatchResult(null, error);\n      }\n\n      return matchSyntax(this, this.getProperty(propertyName), value, true);\n    },\n    matchType: function matchType(typeName, value) {\n      var typeSyntax = this.getType(typeName);\n\n      if (!typeSyntax) {\n        return buildMatchResult(null, new SyntaxReferenceError('Unknown type', typeName));\n      }\n\n      return matchSyntax(this, typeSyntax, value, false);\n    },\n    match: function match(syntax, value) {\n      if (typeof syntax !== 'string' && (!syntax || !syntax.type)) {\n        return buildMatchResult(null, new SyntaxReferenceError('Bad syntax'));\n      }\n\n      if (typeof syntax === 'string' || !syntax.match) {\n        syntax = this.createDescriptor(syntax, 'Type', 'anonymous');\n      }\n\n      return matchSyntax(this, syntax, value, false);\n    },\n    findValueFragments: function findValueFragments(propertyName, value, type, name) {\n      return search.matchFragments(this, value, this.matchProperty(propertyName, value), type, name);\n    },\n    findDeclarationValueFragments: function findDeclarationValueFragments(declaration, type, name) {\n      return search.matchFragments(this, declaration.value, this.matchDeclaration(declaration), type, name);\n    },\n    findAllFragments: function findAllFragments(ast, type, name) {\n      var result = [];\n      this.syntax.walk(ast, {\n        visit: 'Declaration',\n        enter: function (declaration) {\n          result.push.apply(result, this.findDeclarationValueFragments(declaration, type, name));\n        }.bind(this)\n      });\n      return result;\n    },\n    getAtrule: function getAtrule(atruleName) {\n      var fallbackBasename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var atrule = names.keyword(atruleName);\n      var atruleEntry = atrule.vendor && fallbackBasename ? this.atrules[atrule.name] || this.atrules[atrule.basename] : this.atrules[atrule.name];\n      return atruleEntry || null;\n    },\n    getAtrulePrelude: function getAtrulePrelude(atruleName) {\n      var fallbackBasename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var atrule = this.getAtrule(atruleName, fallbackBasename);\n      return atrule && atrule.prelude || null;\n    },\n    getAtruleDescriptor: function getAtruleDescriptor(atruleName, name) {\n      return this.atrules.hasOwnProperty(atruleName) && this.atrules.declarators ? this.atrules[atruleName].declarators[name] || null : null;\n    },\n    getProperty: function getProperty(propertyName) {\n      var fallbackBasename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var property = names.property(propertyName);\n      var propertyEntry = property.vendor && fallbackBasename ? this.properties[property.name] || this.properties[property.basename] : this.properties[property.name];\n      return propertyEntry || null;\n    },\n    getType: function getType(name) {\n      return this.types.hasOwnProperty(name) ? this.types[name] : null;\n    },\n    validate: function validate() {\n      function validate(syntax, name, broken, descriptor) {\n        if (broken.hasOwnProperty(name)) {\n          return broken[name];\n        }\n\n        broken[name] = false;\n\n        if (descriptor.syntax !== null) {\n          walk(descriptor.syntax, function (node) {\n            if (node.type !== 'Type' && node.type !== 'Property') {\n              return;\n            }\n\n            var map = node.type === 'Type' ? syntax.types : syntax.properties;\n            var brokenMap = node.type === 'Type' ? brokenTypes : brokenProperties;\n\n            if (!map.hasOwnProperty(node.name) || validate(syntax, node.name, brokenMap, map[node.name])) {\n              broken[name] = true;\n            }\n          }, this);\n        }\n      }\n\n      var brokenTypes = {};\n      var brokenProperties = {};\n\n      for (var key in this.types) {\n        validate(this, key, brokenTypes, this.types[key]);\n      }\n\n      for (var key in this.properties) {\n        validate(this, key, brokenProperties, this.properties[key]);\n      }\n\n      brokenTypes = Object.keys(brokenTypes).filter(function (name) {\n        return brokenTypes[name];\n      });\n      brokenProperties = Object.keys(brokenProperties).filter(function (name) {\n        return brokenProperties[name];\n      });\n\n      if (brokenTypes.length || brokenProperties.length) {\n        return {\n          types: brokenTypes,\n          properties: brokenProperties\n        };\n      }\n\n      return null;\n    },\n    dump: function dump(syntaxAsAst, pretty) {\n      return {\n        generic: this.generic,\n        types: dumpMapSyntax(this.types, !pretty, syntaxAsAst),\n        properties: dumpMapSyntax(this.properties, !pretty, syntaxAsAst),\n        atrules: dumpAtruleMapSyntax(this.atrules, !pretty, syntaxAsAst)\n      };\n    },\n    toString: function toString() {\n      return JSON.stringify(this.dump());\n    }\n  };\n  module.exports = Lexer;\n});","lineCount":463,"map":[[4,0,1,0],[4,6,1,4,"SyntaxReferenceError"],[4,26,1,24],[4,29,1,27,"require"],[4,40,1,34],[4,70,1,27],[4,71,1,46,"SyntaxReferenceError"],[4,91,1,0],[6,0,2,0],[6,6,2,4,"SyntaxMatchError"],[6,22,2,20],[6,25,2,23,"require"],[6,36,2,30],[6,66,2,23],[6,67,2,42,"SyntaxMatchError"],[6,83,2,0],[8,0,3,0],[8,6,3,4,"names"],[8,11,3,9],[8,14,3,12,"require"],[8,25,3,19],[8,62,3,0],[10,0,4,0],[10,6,4,4,"generic"],[10,13,4,11],[10,16,4,14,"require"],[10,27,4,21],[10,59,4,0],[12,0,5,0],[12,6,5,4,"parse"],[12,11,5,9],[12,14,5,12,"require"],[12,25,5,19],[12,74,5,0],[14,0,6,0],[14,6,6,4,"generate"],[14,14,6,12],[14,17,6,15,"require"],[14,28,6,22],[14,80,6,0],[16,0,7,0],[16,6,7,4,"walk"],[16,10,7,8],[16,13,7,11,"require"],[16,24,7,18],[16,72,7,0],[18,0,8,0],[18,6,8,4,"prepareTokens"],[18,19,8,17],[18,22,8,20,"require"],[18,33,8,27],[18,72,8,0],[20,0,9,0],[20,6,9,4,"buildMatchGraph"],[20,21,9,19],[20,24,9,22,"require"],[20,35,9,29],[20,71,9,22],[20,72,9,47,"buildMatchGraph"],[20,87,9,0],[22,0,10,0],[22,6,10,4,"matchAsTree"],[22,17,10,15],[22,20,10,18,"require"],[22,31,10,25],[22,61,10,18],[22,62,10,37,"matchAsTree"],[22,73,10,0],[24,0,11,0],[24,6,11,4,"trace"],[24,11,11,9],[24,14,11,12,"require"],[24,25,11,19],[24,56,11,0],[26,0,12,0],[26,6,12,4,"search"],[26,12,12,10],[26,15,12,13,"require"],[26,26,12,20],[26,58,12,0],[28,0,13,0],[28,6,13,4,"getStructureFromConfig"],[28,28,13,26],[28,31,13,29,"require"],[28,42,13,36],[28,77,13,29],[28,78,13,52,"getStructureFromConfig"],[28,100,13,0],[30,0,14,0],[30,6,14,4,"cssWideKeywords"],[30,21,14,19],[30,24,14,22,"buildMatchGraph"],[30,39,14,37],[30,40,14,38],[30,67,14,37],[30,68,14,0],[31,0,15,0],[31,6,15,4,"cssWideKeywordsWithExpression"],[31,35,15,33],[31,38,15,36,"buildMatchGraph"],[31,53,15,51],[31,54,15,52],[31,107,15,51],[31,108,15,0],[33,0,17,0],[33,11,17,9,"dumpMapSyntax"],[33,24,17,0],[33,25,17,23,"map"],[33,28,17,0],[33,30,17,28,"compact"],[33,37,17,0],[33,39,17,37,"syntaxAsAst"],[33,50,17,0],[33,52,17,50],[34,0,18,4],[34,8,18,8,"result"],[34,14,18,14],[34,17,18,17],[34,19,18,4],[36,0,20,4],[36,9,20,9],[36,13,20,13,"name"],[36,17,20,4],[36,21,20,21,"map"],[36,24,20,4],[36,26,20,26],[37,0,21,8],[37,10,21,12,"map"],[37,13,21,15],[37,14,21,16,"name"],[37,18,21,15],[37,19,21,12],[37,20,21,22,"syntax"],[37,26,21,8],[37,28,21,30],[38,0,22,12,"result"],[38,8,22,12,"result"],[38,14,22,18],[38,15,22,19,"name"],[38,19,22,18],[38,20,22,12],[38,23,22,27,"syntaxAsAst"],[38,34,22,38],[38,37,23,18,"map"],[38,40,23,21],[38,41,23,22,"name"],[38,45,23,21],[38,46,23,18],[38,47,23,28,"syntax"],[38,53,22,38],[38,56,24,18,"generate"],[38,64,24,26],[38,65,24,27,"map"],[38,68,24,30],[38,69,24,31,"name"],[38,73,24,30],[38,74,24,27],[38,75,24,37,"syntax"],[38,81,24,26],[38,83,24,45],[39,0,24,47,"compact"],[39,10,24,47,"compact"],[39,17,24,54],[39,19,24,56,"compact"],[40,0,24,45],[40,9,24,26],[40,10,22,12],[41,0,25,9],[42,0,26,5],[44,0,28,4],[44,11,28,11,"result"],[44,17,28,4],[45,0,29,1],[47,0,31,0],[47,11,31,9,"dumpAtruleMapSyntax"],[47,30,31,0],[47,31,31,29,"map"],[47,34,31,0],[47,36,31,34,"compact"],[47,43,31,0],[47,45,31,43,"syntaxAsAst"],[47,56,31,0],[47,58,31,56],[48,0,32,4],[48,8,32,10,"result"],[48,14,32,16],[48,17,32,19],[48,19,32,4],[50,0,34,4],[50,39,34,33,"Object"],[50,45,34,39],[50,46,34,40,"entries"],[50,53,34,33],[50,54,34,48,"map"],[50,57,34,33],[50,58,34,4],[50,95,34,54],[51,0,34,54],[53,0,34,54],[55,0,34,54],[55,10,34,16,"name"],[55,14,34,54],[56,0,34,54],[56,10,34,22,"atrule"],[56,16,34,54],[57,0,35,8,"result"],[57,6,35,8,"result"],[57,12,35,14],[57,13,35,15,"name"],[57,17,35,14],[57,18,35,8],[57,21,35,23],[58,0,36,12,"prelude"],[58,8,36,12,"prelude"],[58,15,36,19],[58,17,36,21,"atrule"],[58,23,36,27],[58,24,36,28,"prelude"],[58,31,36,21],[58,36,37,16,"syntaxAsAst"],[58,47,37,27],[58,50,38,22,"atrule"],[58,56,38,28],[58,57,38,29,"prelude"],[58,64,38,22],[58,65,38,37,"syntax"],[58,71,37,27],[58,74,39,22,"generate"],[58,82,39,30],[58,83,39,31,"atrule"],[58,89,39,37],[58,90,39,38,"prelude"],[58,97,39,31],[58,98,39,46,"syntax"],[58,104,39,30],[58,106,39,54],[59,0,39,56,"compact"],[59,10,39,56,"compact"],[59,17,39,63],[59,19,39,56,"compact"],[60,0,39,54],[60,9,39,30],[60,10,36,21],[60,11,35,23],[61,0,41,12,"descriptors"],[61,8,41,12,"descriptors"],[61,19,41,23],[61,21,41,25,"atrule"],[61,27,41,31],[61,28,41,32,"descriptors"],[61,39,41,25],[61,43,41,47,"dumpMapSyntax"],[61,56,41,60],[61,57,41,61,"atrule"],[61,63,41,67],[61,64,41,68,"descriptors"],[61,75,41,60],[61,77,41,81,"compact"],[61,84,41,60],[61,86,41,90,"syntaxAsAst"],[61,97,41,60],[62,0,35,23],[62,7,35,8],[63,0,43,5],[65,0,45,4],[65,11,45,11,"result"],[65,17,45,4],[66,0,46,1],[68,0,48,0],[68,11,48,9,"valueHasVar"],[68,22,48,0],[68,23,48,21,"tokens"],[68,29,48,0],[68,31,48,29],[69,0,49,4],[69,9,49,9],[69,13,49,13,"i"],[69,14,49,14],[69,17,49,17],[69,18,49,4],[69,20,49,20,"i"],[69,21,49,21],[69,24,49,24,"tokens"],[69,30,49,30],[69,31,49,31,"length"],[69,37,49,4],[69,39,49,39,"i"],[69,40,49,40],[69,42,49,4],[69,44,49,44],[70,0,50,8],[70,10,50,12,"tokens"],[70,16,50,18],[70,17,50,19,"i"],[70,18,50,18],[70,19,50,12],[70,20,50,22,"value"],[70,25,50,12],[70,26,50,28,"toLowerCase"],[70,37,50,12],[70,44,50,46],[70,50,50,8],[70,52,50,54],[71,0,51,12],[71,15,51,19],[71,19,51,12],[72,0,52,9],[73,0,53,5],[75,0,55,4],[75,11,55,11],[75,16,55,4],[76,0,56,1],[78,0,58,0],[78,11,58,9,"buildMatchResult"],[78,27,58,0],[78,28,58,26,"match"],[78,33,58,0],[78,35,58,33,"error"],[78,40,58,0],[78,42,58,40,"iterations"],[78,52,58,0],[78,54,58,52],[79,0,59,4],[79,11,59,11],[80,0,60,8,"matched"],[80,6,60,8,"matched"],[80,13,60,15],[80,15,60,17,"match"],[80,20,59,11],[81,0,61,8,"iterations"],[81,6,61,8,"iterations"],[81,16,61,18],[81,18,61,20,"iterations"],[81,28,59,11],[82,0,62,8,"error"],[82,6,62,8,"error"],[82,11,62,13],[82,13,62,15,"error"],[82,18,59,11],[83,0,63,8,"getTrace"],[83,6,63,8,"getTrace"],[83,14,63,16],[83,16,63,18,"trace"],[83,21,63,23],[83,22,63,24,"getTrace"],[83,30,59,11],[84,0,64,8,"isType"],[84,6,64,8,"isType"],[84,12,64,14],[84,14,64,16,"trace"],[84,19,64,21],[84,20,64,22,"isType"],[84,26,59,11],[85,0,65,8,"isProperty"],[85,6,65,8,"isProperty"],[85,16,65,18],[85,18,65,20,"trace"],[85,23,65,25],[85,24,65,26,"isProperty"],[85,34,59,11],[86,0,66,8,"isKeyword"],[86,6,66,8,"isKeyword"],[86,15,66,17],[86,17,66,19,"trace"],[86,22,66,24],[86,23,66,25,"isKeyword"],[87,0,59,11],[87,5,59,4],[88,0,68,1],[90,0,70,0],[90,11,70,9,"matchSyntax"],[90,22,70,0],[90,23,70,21,"lexer"],[90,28,70,0],[90,30,70,28,"syntax"],[90,36,70,0],[90,38,70,36,"value"],[90,43,70,0],[90,45,70,43,"useCommon"],[90,54,70,0],[90,56,70,54],[91,0,71,4],[91,8,71,8,"tokens"],[91,14,71,14],[91,17,71,17,"prepareTokens"],[91,30,71,30],[91,31,71,31,"value"],[91,36,71,30],[91,38,71,38,"lexer"],[91,43,71,43],[91,44,71,44,"syntax"],[91,50,71,30],[91,51,71,4],[92,0,72,4],[92,8,72,8,"result"],[92,14,72,4],[94,0,74,4],[94,8,74,8,"valueHasVar"],[94,19,74,19],[94,20,74,20,"tokens"],[94,26,74,19],[94,27,74,4],[94,29,74,29],[95,0,75,8],[95,13,75,15,"buildMatchResult"],[95,29,75,31],[95,30,75,32],[95,34,75,31],[95,36,75,38],[95,40,75,42,"Error"],[95,45,75,38],[95,46,75,48],[95,95,75,38],[95,96,75,31],[95,97,75,8],[96,0,76,5],[98,0,78,4],[98,8,78,8,"useCommon"],[98,17,78,4],[98,19,78,19],[99,0,79,8,"result"],[99,6,79,8,"result"],[99,12,79,14],[99,15,79,17,"matchAsTree"],[99,26,79,28],[99,27,79,29,"tokens"],[99,33,79,28],[99,35,79,37,"lexer"],[99,40,79,42],[99,41,79,43,"valueCommonSyntax"],[99,58,79,28],[99,60,79,62,"lexer"],[99,65,79,28],[99,66,79,8],[100,0,80,5],[102,0,82,4],[102,8,82,8],[102,9,82,9,"useCommon"],[102,18,82,8],[102,22,82,22],[102,23,82,23,"result"],[102,29,82,29],[102,30,82,30,"match"],[102,35,82,4],[102,37,82,37],[103,0,83,8,"result"],[103,6,83,8,"result"],[103,12,83,14],[103,15,83,17,"matchAsTree"],[103,26,83,28],[103,27,83,29,"tokens"],[103,33,83,28],[103,35,83,37,"syntax"],[103,41,83,43],[103,42,83,44,"match"],[103,47,83,28],[103,49,83,51,"lexer"],[103,54,83,28],[103,55,83,8],[105,0,84,8],[105,10,84,12],[105,11,84,13,"result"],[105,17,84,19],[105,18,84,20,"match"],[105,23,84,8],[105,25,84,27],[106,0,85,12],[106,15,85,19,"buildMatchResult"],[106,31,85,35],[106,32,86,16],[106,36,85,35],[106,38,87,16],[106,42,87,20,"SyntaxMatchError"],[106,58,87,16],[106,59,87,37,"result"],[106,65,87,43],[106,66,87,44,"reason"],[106,72,87,16],[106,74,87,52,"syntax"],[106,80,87,58],[106,81,87,59,"syntax"],[106,87,87,16],[106,89,87,67,"value"],[106,94,87,16],[106,96,87,74,"result"],[106,102,87,16],[106,103,85,35],[106,105,88,16,"result"],[106,111,88,22],[106,112,88,23,"iterations"],[106,122,85,35],[106,123,85,12],[107,0,90,9],[108,0,91,5],[110,0,93,4],[110,11,93,11,"buildMatchResult"],[110,27,93,27],[110,28,93,28,"result"],[110,34,93,34],[110,35,93,35,"match"],[110,40,93,27],[110,42,93,42],[110,46,93,27],[110,48,93,48,"result"],[110,54,93,54],[110,55,93,55,"iterations"],[110,65,93,27],[110,66,93,4],[111,0,94,1],[113,0,96,0],[113,6,96,4,"Lexer"],[113,11,96,9],[113,14,96,12],[113,23,96,4,"Lexer"],[113,28,96,12],[113,29,96,21,"config"],[113,35,96,12],[113,37,96,29,"syntax"],[113,43,96,12],[113,45,96,37,"structure"],[113,54,96,12],[113,56,96,48],[114,0,97,4],[114,9,97,9,"valueCommonSyntax"],[114,26,97,4],[114,29,97,29,"cssWideKeywords"],[114,44,97,4],[115,0,98,4],[115,9,98,9,"syntax"],[115,15,98,4],[115,18,98,18,"syntax"],[115,24,98,4],[116,0,99,4],[116,9,99,9,"generic"],[116,16,99,4],[116,19,99,19],[116,24,99,4],[117,0,100,4],[117,9,100,9,"atrules"],[117,16,100,4],[117,19,100,19],[117,21,100,4],[118,0,101,4],[118,9,101,9,"properties"],[118,19,101,4],[118,22,101,22],[118,24,101,4],[119,0,102,4],[119,9,102,9,"types"],[119,14,102,4],[119,17,102,17],[119,19,102,4],[120,0,103,4],[120,9,103,9,"structure"],[120,18,103,4],[120,21,103,21,"structure"],[120,30,103,30],[120,34,103,34,"getStructureFromConfig"],[120,56,103,56],[120,57,103,57,"config"],[120,63,103,56],[120,64,103,4],[122,0,105,4],[122,8,105,8,"config"],[122,14,105,4],[122,16,105,16],[123,0,106,8],[123,10,106,12,"config"],[123,16,106,18],[123,17,106,19,"types"],[123,22,106,8],[123,24,106,26],[124,0,107,12],[124,13,107,17],[124,17,107,21,"name"],[124,21,107,12],[124,25,107,29,"config"],[124,31,107,35],[124,32,107,36,"types"],[124,37,107,12],[124,39,107,43],[125,0,108,16],[125,15,108,21,"addType_"],[125,23,108,16],[125,24,108,30,"name"],[125,28,108,16],[125,30,108,36,"config"],[125,36,108,42],[125,37,108,43,"types"],[125,42,108,36],[125,43,108,49,"name"],[125,47,108,36],[125,48,108,16],[126,0,109,13],[127,0,110,9],[129,0,112,8],[129,10,112,12,"config"],[129,16,112,18],[129,17,112,19,"generic"],[129,24,112,8],[129,26,112,28],[130,0,113,12],[130,13,113,17,"generic"],[130,20,113,12],[130,23,113,27],[130,27,113,12],[132,0,114,12],[132,13,114,17],[132,17,114,21,"name"],[132,21,114,12],[132,25,114,29,"generic"],[132,32,114,12],[132,34,114,38],[133,0,115,16],[133,15,115,21,"addType_"],[133,23,115,16],[133,24,115,30,"name"],[133,28,115,16],[133,30,115,36,"generic"],[133,37,115,43],[133,38,115,44,"name"],[133,42,115,43],[133,43,115,16],[134,0,116,13],[135,0,117,9],[137,0,119,8],[137,10,119,12,"config"],[137,16,119,18],[137,17,119,19,"atrules"],[137,24,119,8],[137,26,119,28],[138,0,120,12],[138,13,120,17],[138,17,120,21,"name"],[138,21,120,12],[138,25,120,29,"config"],[138,31,120,35],[138,32,120,36,"atrules"],[138,39,120,12],[138,41,120,45],[139,0,121,16],[139,15,121,21,"addAtrule_"],[139,25,121,16],[139,26,121,32,"name"],[139,30,121,16],[139,32,121,38,"config"],[139,38,121,44],[139,39,121,45,"atrules"],[139,46,121,38],[139,47,121,53,"name"],[139,51,121,38],[139,52,121,16],[140,0,122,13],[141,0,123,9],[143,0,125,8],[143,10,125,12,"config"],[143,16,125,18],[143,17,125,19,"properties"],[143,27,125,8],[143,29,125,31],[144,0,126,12],[144,13,126,17],[144,17,126,21,"name"],[144,21,126,12],[144,25,126,29,"config"],[144,31,126,35],[144,32,126,36,"properties"],[144,42,126,12],[144,44,126,48],[145,0,127,16],[145,15,127,21,"addProperty_"],[145,27,127,16],[145,28,127,34,"name"],[145,32,127,16],[145,34,127,40,"config"],[145,40,127,46],[145,41,127,47,"properties"],[145,51,127,40],[145,52,127,58,"name"],[145,56,127,40],[145,57,127,16],[146,0,128,13],[147,0,129,9],[148,0,130,5],[149,0,131,1],[149,3,96,0],[151,0,133,0,"Lexer"],[151,2,133,0,"Lexer"],[151,7,133,5],[151,8,133,6,"prototype"],[151,17,133,0],[151,20,133,18],[152,0,134,4,"structure"],[152,4,134,4,"structure"],[152,13,134,13],[152,15,134,15],[152,17,133,18],[153,0,135,4,"checkStructure"],[153,4,135,4,"checkStructure"],[153,18,135,18],[153,20,135,20],[153,44,135,29,"ast"],[153,47,135,20],[153,49,135,34],[154,0,136,8],[154,15,136,17,"collectWarning"],[154,29,136,8],[154,30,136,32,"node"],[154,34,136,8],[154,36,136,38,"message"],[154,43,136,8],[154,45,136,47],[155,0,137,12,"warns"],[155,8,137,12,"warns"],[155,13,137,17],[155,14,137,18,"push"],[155,18,137,12],[155,19,137,23],[156,0,138,16,"node"],[156,10,138,16,"node"],[156,14,138,20],[156,16,138,22,"node"],[156,20,137,23],[157,0,139,16,"message"],[157,10,139,16,"message"],[157,17,139,23],[157,19,139,25,"message"],[158,0,137,23],[158,9,137,12],[159,0,141,9],[161,0,143,8],[161,10,143,12,"structure"],[161,19,143,21],[161,22,143,24],[161,27,143,29,"structure"],[161,36,143,8],[162,0,144,8],[162,10,144,12,"warns"],[162,15,144,17],[162,18,144,20],[162,20,144,8],[163,0,146,8],[163,11,146,13,"syntax"],[163,17,146,8],[163,18,146,20,"walk"],[163,22,146,8],[163,23,146,25,"ast"],[163,26,146,8],[163,28,146,30],[163,38,146,39,"node"],[163,42,146,30],[163,44,146,45],[164,0,147,12],[164,12,147,16,"structure"],[164,21,147,25],[164,22,147,26,"hasOwnProperty"],[164,36,147,16],[164,37,147,41,"node"],[164,41,147,45],[164,42,147,46,"type"],[164,46,147,16],[164,47,147,12],[164,49,147,53],[165,0,148,16,"structure"],[165,10,148,16,"structure"],[165,19,148,25],[165,20,148,26,"node"],[165,24,148,30],[165,25,148,31,"type"],[165,29,148,25],[165,30,148,16],[165,31,148,37,"check"],[165,36,148,16],[165,37,148,43,"node"],[165,41,148,16],[165,43,148,49,"collectWarning"],[165,57,148,16],[166,0,149,13],[166,9,147,12],[166,15,149,19],[167,0,150,16,"collectWarning"],[167,10,150,16,"collectWarning"],[167,24,150,30],[167,25,150,31,"node"],[167,29,150,30],[167,31,150,37],[167,55,150,61,"node"],[167,59,150,65],[167,60,150,66,"type"],[167,64,150,37],[167,67,150,73],[167,70,150,30],[167,71,150,16],[168,0,151,13],[169,0,152,9],[169,7,146,8],[170,0,154,8],[170,13,154,15,"warns"],[170,18,154,20],[170,19,154,21,"length"],[170,25,154,15],[170,28,154,30,"warns"],[170,33,154,15],[170,36,154,38],[170,41,154,8],[171,0,155,5],[171,5,133,18],[172,0,157,4,"createDescriptor"],[172,4,157,4,"createDescriptor"],[172,20,157,20],[172,22,157,22],[172,48,157,31,"syntax"],[172,54,157,22],[172,56,157,39,"type"],[172,60,157,22],[172,62,157,45,"name"],[172,66,157,22],[172,68,157,66],[173,0,157,66],[173,10,157,51,"parent"],[173,16,157,66],[173,87,157,60],[173,91,157,66],[174,0,158,8],[174,10,158,12,"ref"],[174,13,158,15],[174,16,158,18],[175,0,159,12,"type"],[175,8,159,12,"type"],[175,12,159,16],[175,14,159,18,"type"],[175,18,158,18],[176,0,160,12,"name"],[176,8,160,12,"name"],[176,12,160,16],[176,14,160,18,"name"],[177,0,158,18],[177,7,158,8],[178,0,162,8],[178,10,162,12,"descriptor"],[178,20,162,22],[178,23,162,25],[179,0,163,12,"type"],[179,8,163,12,"type"],[179,12,163,16],[179,14,163,18,"type"],[179,18,162,25],[180,0,164,12,"name"],[180,8,164,12,"name"],[180,12,164,16],[180,14,164,18,"name"],[180,18,162,25],[181,0,165,12,"parent"],[181,8,165,12,"parent"],[181,14,165,18],[181,16,165,20,"parent"],[181,22,162,25],[182,0,166,12,"syntax"],[182,8,166,12,"syntax"],[182,14,166,18],[182,16,166,20],[182,20,162,25],[183,0,167,12,"match"],[183,8,167,12,"match"],[183,13,167,17],[183,15,167,19],[184,0,162,25],[184,7,162,8],[186,0,170,8],[186,10,170,12],[186,17,170,19,"syntax"],[186,23,170,12],[186,28,170,30],[186,38,170,8],[186,40,170,42],[187,0,171,12,"descriptor"],[187,8,171,12,"descriptor"],[187,18,171,22],[187,19,171,23,"match"],[187,24,171,12],[187,27,171,31,"buildMatchGraph"],[187,42,171,46],[187,43,171,47,"syntax"],[187,49,171,46],[187,51,171,55,"ref"],[187,54,171,46],[187,55,171,12],[188,0,172,9],[188,7,170,8],[188,13,172,15],[189,0,173,12],[189,12,173,16],[189,19,173,23,"syntax"],[189,25,173,16],[189,30,173,34],[189,38,173,12],[189,40,173,44],[190,0,175,16,"Object"],[190,10,175,16,"Object"],[190,16,175,22],[190,17,175,23,"defineProperty"],[190,31,175,16],[190,32,175,38,"descriptor"],[190,42,175,16],[190,44,175,50],[190,52,175,16],[190,54,175,60],[191,0,176,20,"get"],[191,12,176,20,"get"],[191,15,176,23],[191,17,176,25],[191,32,176,36],[192,0,177,24,"Object"],[192,14,177,24,"Object"],[192,20,177,30],[192,21,177,31,"defineProperty"],[192,35,177,24],[192,36,177,46,"descriptor"],[192,46,177,24],[192,48,177,58],[192,56,177,24],[192,58,177,68],[193,0,178,28,"value"],[193,16,178,28,"value"],[193,21,178,33],[193,23,178,35,"parse"],[193,28,178,40],[193,29,178,41,"syntax"],[193,35,178,40],[194,0,177,68],[194,15,177,24],[195,0,181,24],[195,21,181,31,"descriptor"],[195,31,181,41],[195,32,181,42,"syntax"],[195,38,181,24],[196,0,182,21],[197,0,175,60],[197,11,175,16],[198,0,184,13],[198,9,173,12],[198,15,184,19],[199,0,185,16,"descriptor"],[199,10,185,16,"descriptor"],[199,20,185,26],[199,21,185,27,"syntax"],[199,27,185,16],[199,30,185,36,"syntax"],[199,36,185,16],[200,0,186,13],[202,0,189,12,"Object"],[202,8,189,12,"Object"],[202,14,189,18],[202,15,189,19,"defineProperty"],[202,29,189,12],[202,30,189,34,"descriptor"],[202,40,189,12],[202,42,189,46],[202,49,189,12],[202,51,189,55],[203,0,190,16,"get"],[203,10,190,16,"get"],[203,13,190,19],[203,15,190,21],[203,30,190,32],[204,0,191,20,"Object"],[204,12,191,20,"Object"],[204,18,191,26],[204,19,191,27,"defineProperty"],[204,33,191,20],[204,34,191,42,"descriptor"],[204,44,191,20],[204,46,191,54],[204,53,191,20],[204,55,191,63],[205,0,192,24,"value"],[205,14,192,24,"value"],[205,19,192,29],[205,21,192,31,"buildMatchGraph"],[205,36,192,46],[205,37,192,47,"descriptor"],[205,47,192,57],[205,48,192,58,"syntax"],[205,54,192,46],[205,56,192,66,"ref"],[205,59,192,46],[206,0,191,63],[206,13,191,20],[207,0,195,20],[207,19,195,27,"descriptor"],[207,29,195,37],[207,30,195,38,"match"],[207,35,195,20],[208,0,196,17],[209,0,189,55],[209,9,189,12],[210,0,198,9],[212,0,200,8],[212,13,200,15,"descriptor"],[212,23,200,8],[213,0,201,5],[213,5,133,18],[214,0,202,4,"addAtrule_"],[214,4,202,4,"addAtrule_"],[214,14,202,14],[214,16,202,16],[214,36,202,25,"name"],[214,40,202,16],[214,42,202,31,"syntax"],[214,48,202,16],[214,50,202,39],[215,0,202,39],[217,0,203,8],[217,10,203,12],[217,11,203,13,"syntax"],[217,17,203,8],[217,19,203,21],[218,0,204,12],[219,0,205,9],[221,0,207,8],[221,11,207,13,"atrules"],[221,18,207,8],[221,19,207,21,"name"],[221,23,207,8],[221,27,207,29],[222,0,208,12,"type"],[222,8,208,12,"type"],[222,12,208,16],[222,14,208,18],[222,22,207,29],[223,0,209,12,"name"],[223,8,209,12,"name"],[223,12,209,16],[223,14,209,18,"name"],[223,18,207,29],[224,0,210,12,"prelude"],[224,8,210,12,"prelude"],[224,15,210,19],[224,17,210,21,"syntax"],[224,23,210,27],[224,24,210,28,"prelude"],[224,31,210,21],[224,34,210,38],[224,39,210,43,"createDescriptor"],[224,55,210,38],[224,56,210,60,"syntax"],[224,62,210,66],[224,63,210,67,"prelude"],[224,70,210,38],[224,72,210,76],[224,87,210,38],[224,89,210,93,"name"],[224,93,210,38],[224,94,210,21],[224,97,210,101],[224,101,207,29],[225,0,211,12,"descriptors"],[225,8,211,12,"descriptors"],[225,19,211,23],[225,21,211,25,"syntax"],[225,27,211,31],[225,28,211,32,"descriptors"],[225,39,211,25],[225,42,212,18,"Object"],[225,48,212,24],[225,49,212,25,"keys"],[225,53,212,18],[225,54,212,30,"syntax"],[225,60,212,36],[225,61,212,37,"descriptors"],[225,72,212,18],[225,74,212,50,"reduce"],[225,80,212,18],[225,81,212,57],[225,91,212,58,"res"],[225,94,212,57],[225,96,212,63,"descName"],[225,104,212,57],[225,106,212,76],[226,0,213,20,"res"],[226,10,213,20,"res"],[226,13,213,23],[226,14,213,24,"descName"],[226,22,213,23],[226,23,213,20],[226,26,213,36],[226,31,213,40],[226,32,213,41,"createDescriptor"],[226,48,213,36],[226,49,213,58,"syntax"],[226,55,213,64],[226,56,213,65,"descriptors"],[226,67,213,58],[226,68,213,77,"descName"],[226,76,213,58],[226,77,213,36],[226,79,213,88],[226,97,213,36],[226,99,213,108,"descName"],[226,107,213,36],[226,109,213,118,"name"],[226,113,213,36],[226,114,213,20],[227,0,214,20],[227,17,214,27,"res"],[227,20,214,20],[228,0,215,17],[228,9,212,18],[228,11,215,19],[228,13,212,18],[228,14,211,25],[228,17,216,18],[229,0,207,29],[229,7,207,8],[230,0,218,5],[230,5,133,18],[231,0,219,4,"addProperty_"],[231,4,219,4,"addProperty_"],[231,16,219,16],[231,18,219,18],[231,40,219,27,"name"],[231,44,219,18],[231,46,219,33,"syntax"],[231,52,219,18],[231,54,219,41],[232,0,220,8],[232,10,220,12],[232,11,220,13,"syntax"],[232,17,220,8],[232,19,220,21],[233,0,221,12],[234,0,222,9],[236,0,224,8],[236,11,224,13,"properties"],[236,21,224,8],[236,22,224,24,"name"],[236,26,224,8],[236,30,224,32],[236,35,224,37,"createDescriptor"],[236,51,224,32],[236,52,224,54,"syntax"],[236,58,224,32],[236,60,224,62],[236,70,224,32],[236,72,224,74,"name"],[236,76,224,32],[236,77,224,8],[237,0,225,5],[237,5,133,18],[238,0,226,4,"addType_"],[238,4,226,4,"addType_"],[238,12,226,12],[238,14,226,14],[238,32,226,23,"name"],[238,36,226,14],[238,38,226,29,"syntax"],[238,44,226,14],[238,46,226,37],[239,0,227,8],[239,10,227,12],[239,11,227,13,"syntax"],[239,17,227,8],[239,19,227,21],[240,0,228,12],[241,0,229,9],[243,0,231,8],[243,11,231,13,"types"],[243,16,231,8],[243,17,231,19,"name"],[243,21,231,8],[243,25,231,27],[243,30,231,32,"createDescriptor"],[243,46,231,27],[243,47,231,49,"syntax"],[243,53,231,27],[243,55,231,57],[243,61,231,27],[243,63,231,65,"name"],[243,67,231,27],[243,68,231,8],[245,0,233,8],[245,10,233,12,"syntax"],[245,16,233,18],[245,21,233,23,"generic"],[245,28,233,30],[245,29,233,31],[245,52,233,30],[245,53,233,8],[245,55,233,57],[246,0,234,12],[246,13,234,17,"valueCommonSyntax"],[246,30,234,12],[246,33,234,37,"cssWideKeywordsWithExpression"],[246,62,234,12],[247,0,235,9],[248,0,236,5],[248,5,133,18],[249,0,238,4,"checkAtruleName"],[249,4,238,4,"checkAtruleName"],[249,19,238,19],[249,21,238,21],[249,46,238,30,"atruleName"],[249,56,238,21],[249,58,238,42],[250,0,239,8],[250,10,239,12],[250,11,239,13],[250,16,239,18,"getAtrule"],[250,25,239,13],[250,26,239,28,"atruleName"],[250,36,239,13],[250,37,239,8],[250,39,239,41],[251,0,240,12],[251,15,240,19],[251,19,240,23,"SyntaxReferenceError"],[251,39,240,19],[251,40,240,44],[251,57,240,19],[251,59,240,63],[251,65,240,69,"atruleName"],[251,75,240,19],[251,76,240,12],[252,0,241,9],[253,0,242,5],[253,5,133,18],[254,0,243,4,"checkAtrulePrelude"],[254,4,243,4,"checkAtrulePrelude"],[254,22,243,22],[254,24,243,24],[254,52,243,33,"atruleName"],[254,62,243,24],[254,64,243,45,"prelude"],[254,71,243,24],[254,73,243,54],[255,0,244,8],[255,10,244,12,"error"],[255,15,244,17],[255,18,244,20],[255,23,244,25,"checkAtruleName"],[255,38,244,20],[255,39,244,41,"atruleName"],[255,49,244,20],[255,50,244,8],[257,0,246,8],[257,10,246,12,"error"],[257,15,246,8],[257,17,246,19],[258,0,247,12],[258,15,247,19,"error"],[258,20,247,12],[259,0,248,9],[261,0,250,8],[261,10,250,12,"atrule"],[261,16,250,18],[261,19,250,21],[261,24,250,26,"getAtrule"],[261,33,250,21],[261,34,250,36,"atruleName"],[261,44,250,21],[261,45,250,8],[263,0,252,8],[263,10,252,12],[263,11,252,13,"atrule"],[263,17,252,19],[263,18,252,20,"prelude"],[263,25,252,12],[263,29,252,31,"prelude"],[263,36,252,8],[263,38,252,40],[264,0,253,12],[264,15,253,19],[264,19,253,23,"SyntaxError"],[264,30,253,19],[264,31,253,35],[264,46,253,50,"atruleName"],[264,56,253,35],[264,59,253,63],[264,91,253,19],[264,92,253,12],[265,0,254,9],[267,0,256,8],[267,10,256,12,"atrule"],[267,16,256,18],[267,17,256,19,"prelude"],[267,24,256,12],[267,28,256,30],[267,29,256,31,"prelude"],[267,36,256,8],[267,38,256,40],[268,0,257,12],[268,15,257,19],[268,19,257,23,"SyntaxError"],[268,30,257,19],[268,31,257,35],[268,46,257,50,"atruleName"],[268,56,257,35],[268,59,257,63],[268,87,257,19],[268,88,257,12],[269,0,258,9],[270,0,259,5],[270,5,133,18],[271,0,260,4,"checkAtruleDescriptorName"],[271,4,260,4,"checkAtruleDescriptorName"],[271,29,260,29],[271,31,260,31],[271,66,260,40,"atruleName"],[271,76,260,31],[271,78,260,52,"descriptorName"],[271,92,260,31],[271,94,260,68],[272,0,261,8],[272,10,261,12,"error"],[272,15,261,17],[272,18,261,20],[272,23,261,25,"checkAtruleName"],[272,38,261,20],[272,39,261,41,"atruleName"],[272,49,261,20],[272,50,261,8],[274,0,263,8],[274,10,263,12,"error"],[274,15,263,8],[274,17,263,19],[275,0,264,12],[275,15,264,19,"error"],[275,20,264,12],[276,0,265,9],[278,0,267,8],[278,10,267,12,"atrule"],[278,16,267,18],[278,19,267,21],[278,24,267,26,"getAtrule"],[278,33,267,21],[278,34,267,36,"atruleName"],[278,44,267,21],[278,45,267,8],[279,0,268,8],[279,10,268,12,"descriptor"],[279,20,268,22],[279,23,268,25,"names"],[279,28,268,30],[279,29,268,31,"keyword"],[279,36,268,25],[279,37,268,39,"descriptorName"],[279,51,268,25],[279,52,268,8],[281,0,270,8],[281,10,270,12],[281,11,270,13,"atrule"],[281,17,270,19],[281,18,270,20,"descriptors"],[281,29,270,8],[281,31,270,33],[282,0,271,12],[282,15,271,19],[282,19,271,23,"SyntaxError"],[282,30,271,19],[282,31,271,35],[282,46,271,50,"atruleName"],[282,56,271,35],[282,59,271,63],[282,87,271,19],[282,88,271,12],[283,0,272,9],[285,0,274,8],[285,10,274,12],[285,11,274,13,"atrule"],[285,17,274,19],[285,18,274,20,"descriptors"],[285,29,274,13],[285,30,274,32,"descriptor"],[285,40,274,42],[285,41,274,43,"name"],[285,45,274,13],[285,46,274,12],[285,50,275,12],[285,51,275,13,"atrule"],[285,57,275,19],[285,58,275,20,"descriptors"],[285,69,275,13],[285,70,275,32,"descriptor"],[285,80,275,42],[285,81,275,43,"basename"],[285,89,275,13],[285,90,274,8],[285,92,275,54],[286,0,276,12],[286,15,276,19],[286,19,276,23,"SyntaxReferenceError"],[286,39,276,19],[286,40,276,44],[286,68,276,19],[286,70,276,74,"descriptorName"],[286,84,276,19],[286,85,276,12],[287,0,277,9],[288,0,278,5],[288,5,133,18],[289,0,279,4,"checkPropertyName"],[289,4,279,4,"checkPropertyName"],[289,21,279,21],[289,23,279,23],[289,50,279,32,"propertyName"],[289,62,279,23],[289,64,279,46],[290,0,280,8],[290,10,280,12,"property"],[290,18,280,20],[290,21,280,23,"names"],[290,26,280,28],[290,27,280,29,"property"],[290,35,280,23],[290,36,280,38,"propertyName"],[290,48,280,23],[290,49,280,8],[292,0,283,8],[292,10,283,12,"property"],[292,18,283,20],[292,19,283,21,"custom"],[292,25,283,8],[292,27,283,29],[293,0,284,12],[293,15,284,19],[293,19,284,23,"Error"],[293,24,284,19],[293,25,284,29],[293,83,284,19],[293,84,284,12],[294,0,285,9],[296,0,287,8],[296,10,287,12],[296,11,287,13],[296,16,287,18,"getProperty"],[296,27,287,13],[296,28,287,30,"propertyName"],[296,40,287,13],[296,41,287,8],[296,43,287,45],[297,0,288,12],[297,15,288,19],[297,19,288,23,"SyntaxReferenceError"],[297,39,288,19],[297,40,288,44],[297,58,288,19],[297,60,288,64,"propertyName"],[297,72,288,19],[297,73,288,12],[298,0,289,9],[299,0,290,5],[299,5,133,18],[300,0,292,4,"matchAtrulePrelude"],[300,4,292,4,"matchAtrulePrelude"],[300,22,292,22],[300,24,292,24],[300,52,292,33,"atruleName"],[300,62,292,24],[300,64,292,45,"prelude"],[300,71,292,24],[300,73,292,54],[301,0,293,8],[301,10,293,12,"error"],[301,15,293,17],[301,18,293,20],[301,23,293,25,"checkAtrulePrelude"],[301,41,293,20],[301,42,293,44,"atruleName"],[301,52,293,20],[301,54,293,56,"prelude"],[301,61,293,20],[301,62,293,8],[303,0,295,8],[303,10,295,12,"error"],[303,15,295,8],[303,17,295,19],[304,0,296,12],[304,15,296,19,"buildMatchResult"],[304,31,296,35],[304,32,296,36],[304,36,296,35],[304,38,296,42,"error"],[304,43,296,35],[304,44,296,12],[305,0,297,9],[307,0,299,8],[307,10,299,12],[307,11,299,13,"prelude"],[307,18,299,8],[307,20,299,22],[308,0,300,12],[308,15,300,19,"buildMatchResult"],[308,31,300,35],[308,32,300,36],[308,36,300,35],[308,38,300,42],[308,42,300,35],[308,43,300,12],[309,0,301,9],[311,0,303,8],[311,13,303,15,"matchSyntax"],[311,24,303,26],[311,25,303,27],[311,29,303,26],[311,31,303,33],[311,36,303,38,"getAtrule"],[311,45,303,33],[311,46,303,48,"atruleName"],[311,56,303,33],[311,58,303,60,"prelude"],[311,65,303,26],[311,67,303,69,"prelude"],[311,74,303,26],[311,76,303,78],[311,80,303,26],[311,81,303,8],[312,0,304,5],[312,5,133,18],[313,0,305,4,"matchAtruleDescriptor"],[313,4,305,4,"matchAtruleDescriptor"],[313,25,305,25],[313,27,305,27],[313,58,305,36,"atruleName"],[313,68,305,27],[313,70,305,48,"descriptorName"],[313,84,305,27],[313,86,305,64,"value"],[313,91,305,27],[313,93,305,71],[314,0,306,8],[314,10,306,12,"error"],[314,15,306,17],[314,18,306,20],[314,23,306,25,"checkAtruleDescriptorName"],[314,48,306,20],[314,49,306,51,"atruleName"],[314,59,306,20],[314,61,306,63,"descriptorName"],[314,75,306,20],[314,76,306,8],[316,0,308,8],[316,10,308,12,"error"],[316,15,308,8],[316,17,308,19],[317,0,309,12],[317,15,309,19,"buildMatchResult"],[317,31,309,35],[317,32,309,36],[317,36,309,35],[317,38,309,42,"error"],[317,43,309,35],[317,44,309,12],[318,0,310,9],[320,0,312,8],[320,10,312,12,"atrule"],[320,16,312,18],[320,19,312,21],[320,24,312,26,"getAtrule"],[320,33,312,21],[320,34,312,36,"atruleName"],[320,44,312,21],[320,45,312,8],[321,0,313,8],[321,10,313,12,"descriptor"],[321,20,313,22],[321,23,313,25,"names"],[321,28,313,30],[321,29,313,31,"keyword"],[321,36,313,25],[321,37,313,39,"descriptorName"],[321,51,313,25],[321,52,313,8],[322,0,315,8],[322,13,315,15,"matchSyntax"],[322,24,315,26],[322,25,315,27],[322,29,315,26],[322,31,315,33,"atrule"],[322,37,315,39],[322,38,315,40,"descriptors"],[322,49,315,33],[322,50,315,52,"descriptor"],[322,60,315,62],[322,61,315,63,"name"],[322,65,315,33],[322,70,315,72,"atrule"],[322,76,315,78],[322,77,315,79,"descriptors"],[322,88,315,72],[322,89,315,91,"descriptor"],[322,99,315,101],[322,100,315,102,"basename"],[322,108,315,72],[322,109,315,26],[322,111,315,113,"value"],[322,116,315,26],[322,118,315,120],[322,122,315,26],[322,123,315,8],[323,0,316,5],[323,5,133,18],[324,0,317,4,"matchDeclaration"],[324,4,317,4,"matchDeclaration"],[324,20,317,20],[324,22,317,22],[324,48,317,31,"node"],[324,52,317,22],[324,54,317,37],[325,0,318,8],[325,10,318,12,"node"],[325,14,318,16],[325,15,318,17,"type"],[325,19,318,12],[325,24,318,26],[325,37,318,8],[325,39,318,41],[326,0,319,12],[326,15,319,19,"buildMatchResult"],[326,31,319,35],[326,32,319,36],[326,36,319,35],[326,38,319,42],[326,42,319,46,"Error"],[326,47,319,42],[326,48,319,52],[326,72,319,42],[326,73,319,35],[326,74,319,12],[327,0,320,9],[329,0,322,8],[329,13,322,15],[329,18,322,20,"matchProperty"],[329,31,322,15],[329,32,322,34,"node"],[329,36,322,38],[329,37,322,39,"property"],[329,45,322,15],[329,47,322,49,"node"],[329,51,322,53],[329,52,322,54,"value"],[329,57,322,15],[329,58,322,8],[330,0,323,5],[330,5,133,18],[331,0,324,4,"matchProperty"],[331,4,324,4,"matchProperty"],[331,17,324,17],[331,19,324,19],[331,42,324,28,"propertyName"],[331,54,324,19],[331,56,324,42,"value"],[331,61,324,19],[331,63,324,49],[332,0,325,8],[332,10,325,12,"error"],[332,15,325,17],[332,18,325,20],[332,23,325,25,"checkPropertyName"],[332,40,325,20],[332,41,325,43,"propertyName"],[332,53,325,20],[332,54,325,8],[334,0,327,8],[334,10,327,12,"error"],[334,15,327,8],[334,17,327,19],[335,0,328,12],[335,15,328,19,"buildMatchResult"],[335,31,328,35],[335,32,328,36],[335,36,328,35],[335,38,328,42,"error"],[335,43,328,35],[335,44,328,12],[336,0,329,9],[338,0,331,8],[338,13,331,15,"matchSyntax"],[338,24,331,26],[338,25,331,27],[338,29,331,26],[338,31,331,33],[338,36,331,38,"getProperty"],[338,47,331,33],[338,48,331,50,"propertyName"],[338,60,331,33],[338,61,331,26],[338,63,331,65,"value"],[338,68,331,26],[338,70,331,72],[338,74,331,26],[338,75,331,8],[339,0,332,5],[339,5,133,18],[340,0,333,4,"matchType"],[340,4,333,4,"matchType"],[340,13,333,13],[340,15,333,15],[340,34,333,24,"typeName"],[340,42,333,15],[340,44,333,34,"value"],[340,49,333,15],[340,51,333,41],[341,0,334,8],[341,10,334,12,"typeSyntax"],[341,20,334,22],[341,23,334,25],[341,28,334,30,"getType"],[341,35,334,25],[341,36,334,38,"typeName"],[341,44,334,25],[341,45,334,8],[343,0,336,8],[343,10,336,12],[343,11,336,13,"typeSyntax"],[343,21,336,8],[343,23,336,25],[344,0,337,12],[344,15,337,19,"buildMatchResult"],[344,31,337,35],[344,32,337,36],[344,36,337,35],[344,38,337,42],[344,42,337,46,"SyntaxReferenceError"],[344,62,337,42],[344,63,337,67],[344,77,337,42],[344,79,337,83,"typeName"],[344,87,337,42],[344,88,337,35],[344,89,337,12],[345,0,338,9],[347,0,340,8],[347,13,340,15,"matchSyntax"],[347,24,340,26],[347,25,340,27],[347,29,340,26],[347,31,340,33,"typeSyntax"],[347,41,340,26],[347,43,340,45,"value"],[347,48,340,26],[347,50,340,52],[347,55,340,26],[347,56,340,8],[348,0,341,5],[348,5,133,18],[349,0,342,4,"match"],[349,4,342,4,"match"],[349,9,342,9],[349,11,342,11],[349,26,342,20,"syntax"],[349,32,342,11],[349,34,342,28,"value"],[349,39,342,11],[349,41,342,35],[350,0,343,8],[350,10,343,12],[350,17,343,19,"syntax"],[350,23,343,12],[350,28,343,30],[350,36,343,12],[350,41,343,43],[350,42,343,44,"syntax"],[350,48,343,43],[350,52,343,54],[350,53,343,55,"syntax"],[350,59,343,61],[350,60,343,62,"type"],[350,64,343,12],[350,65,343,8],[350,67,343,69],[351,0,344,12],[351,15,344,19,"buildMatchResult"],[351,31,344,35],[351,32,344,36],[351,36,344,35],[351,38,344,42],[351,42,344,46,"SyntaxReferenceError"],[351,62,344,42],[351,63,344,67],[351,75,344,42],[351,76,344,35],[351,77,344,12],[352,0,345,9],[354,0,347,8],[354,10,347,12],[354,17,347,19,"syntax"],[354,23,347,12],[354,28,347,30],[354,36,347,12],[354,40,347,42],[354,41,347,43,"syntax"],[354,47,347,49],[354,48,347,50,"match"],[354,53,347,8],[354,55,347,57],[355,0,348,12,"syntax"],[355,8,348,12,"syntax"],[355,14,348,18],[355,17,348,21],[355,22,348,26,"createDescriptor"],[355,38,348,21],[355,39,348,43,"syntax"],[355,45,348,21],[355,47,348,51],[355,53,348,21],[355,55,348,59],[355,66,348,21],[355,67,348,12],[356,0,349,9],[358,0,351,8],[358,13,351,15,"matchSyntax"],[358,24,351,26],[358,25,351,27],[358,29,351,26],[358,31,351,33,"syntax"],[358,37,351,26],[358,39,351,41,"value"],[358,44,351,26],[358,46,351,48],[358,51,351,26],[358,52,351,8],[359,0,352,5],[359,5,133,18],[360,0,354,4,"findValueFragments"],[360,4,354,4,"findValueFragments"],[360,22,354,22],[360,24,354,24],[360,52,354,33,"propertyName"],[360,64,354,24],[360,66,354,47,"value"],[360,71,354,24],[360,73,354,54,"type"],[360,77,354,24],[360,79,354,60,"name"],[360,83,354,24],[360,85,354,66],[361,0,355,8],[361,13,355,15,"search"],[361,19,355,21],[361,20,355,22,"matchFragments"],[361,34,355,15],[361,35,355,37],[361,39,355,15],[361,41,355,43,"value"],[361,46,355,15],[361,48,355,50],[361,53,355,55,"matchProperty"],[361,66,355,50],[361,67,355,69,"propertyName"],[361,79,355,50],[361,81,355,83,"value"],[361,86,355,50],[361,87,355,15],[361,89,355,91,"type"],[361,93,355,15],[361,95,355,97,"name"],[361,99,355,15],[361,100,355,8],[362,0,356,5],[362,5,133,18],[363,0,357,4,"findDeclarationValueFragments"],[363,4,357,4,"findDeclarationValueFragments"],[363,33,357,33],[363,35,357,35],[363,74,357,44,"declaration"],[363,85,357,35],[363,87,357,57,"type"],[363,91,357,35],[363,93,357,63,"name"],[363,97,357,35],[363,99,357,69],[364,0,358,8],[364,13,358,15,"search"],[364,19,358,21],[364,20,358,22,"matchFragments"],[364,34,358,15],[364,35,358,37],[364,39,358,15],[364,41,358,43,"declaration"],[364,52,358,54],[364,53,358,55,"value"],[364,58,358,15],[364,60,358,62],[364,65,358,67,"matchDeclaration"],[364,81,358,62],[364,82,358,84,"declaration"],[364,93,358,62],[364,94,358,15],[364,96,358,98,"type"],[364,100,358,15],[364,102,358,104,"name"],[364,106,358,15],[364,107,358,8],[365,0,359,5],[365,5,133,18],[366,0,360,4,"findAllFragments"],[366,4,360,4,"findAllFragments"],[366,20,360,20],[366,22,360,22],[366,48,360,31,"ast"],[366,51,360,22],[366,53,360,36,"type"],[366,57,360,22],[366,59,360,42,"name"],[366,63,360,22],[366,65,360,48],[367,0,361,8],[367,10,361,12,"result"],[367,16,361,18],[367,19,361,21],[367,21,361,8],[368,0,363,8],[368,11,363,13,"syntax"],[368,17,363,8],[368,18,363,20,"walk"],[368,22,363,8],[368,23,363,25,"ast"],[368,26,363,8],[368,28,363,30],[369,0,364,12,"visit"],[369,8,364,12,"visit"],[369,13,364,17],[369,15,364,19],[369,28,363,30],[370,0,365,12,"enter"],[370,8,365,12,"enter"],[370,13,365,17],[370,15,365,19],[370,25,365,28,"declaration"],[370,36,365,19],[370,38,365,41],[371,0,366,16,"result"],[371,10,366,16,"result"],[371,16,366,22],[371,17,366,23,"push"],[371,21,366,16],[371,22,366,28,"apply"],[371,27,366,16],[371,28,366,34,"result"],[371,34,366,16],[371,36,366,42],[371,41,366,47,"findDeclarationValueFragments"],[371,70,366,42],[371,71,366,77,"declaration"],[371,82,366,42],[371,84,366,90,"type"],[371,88,366,42],[371,90,366,96,"name"],[371,94,366,42],[371,95,366,16],[372,0,367,13],[372,9,365,19],[372,10,367,14,"bind"],[372,14,365,19],[372,15,367,19],[372,19,365,19],[373,0,363,30],[373,7,363,8],[374,0,370,8],[374,13,370,15,"result"],[374,19,370,8],[375,0,371,5],[375,5,133,18],[376,0,373,4,"getAtrule"],[376,4,373,4,"getAtrule"],[376,13,373,13],[376,15,373,15],[376,34,373,24,"atruleName"],[376,44,373,15],[376,46,373,61],[377,0,373,61],[377,10,373,36,"fallbackBasename"],[377,26,373,61],[377,97,373,55],[377,101,373,61],[378,0,374,8],[378,10,374,12,"atrule"],[378,16,374,18],[378,19,374,21,"names"],[378,24,374,26],[378,25,374,27,"keyword"],[378,32,374,21],[378,33,374,35,"atruleName"],[378,43,374,21],[378,44,374,8],[379,0,375,8],[379,10,375,12,"atruleEntry"],[379,21,375,23],[379,24,375,26,"atrule"],[379,30,375,32],[379,31,375,33,"vendor"],[379,37,375,26],[379,41,375,43,"fallbackBasename"],[379,57,375,26],[379,60,376,14],[379,65,376,19,"atrules"],[379,72,376,14],[379,73,376,27,"atrule"],[379,79,376,33],[379,80,376,34,"name"],[379,84,376,14],[379,89,376,43],[379,94,376,48,"atrules"],[379,101,376,43],[379,102,376,56,"atrule"],[379,108,376,62],[379,109,376,63,"basename"],[379,117,376,43],[379,118,375,26],[379,121,377,14],[379,126,377,19,"atrules"],[379,133,377,14],[379,134,377,27,"atrule"],[379,140,377,33],[379,141,377,34,"name"],[379,145,377,14],[379,146,375,8],[380,0,379,8],[380,13,379,15,"atruleEntry"],[380,24,379,26],[380,28,379,30],[380,32,379,8],[381,0,380,5],[381,5,133,18],[382,0,381,4,"getAtrulePrelude"],[382,4,381,4,"getAtrulePrelude"],[382,20,381,20],[382,22,381,22],[382,48,381,31,"atruleName"],[382,58,381,22],[382,60,381,68],[383,0,381,68],[383,10,381,43,"fallbackBasename"],[383,26,381,68],[383,97,381,62],[383,101,381,68],[384,0,382,8],[384,10,382,14,"atrule"],[384,16,382,20],[384,19,382,23],[384,24,382,28,"getAtrule"],[384,33,382,23],[384,34,382,38,"atruleName"],[384,44,382,23],[384,46,382,50,"fallbackBasename"],[384,62,382,23],[384,63,382,8],[385,0,384,8],[385,13,384,15,"atrule"],[385,19,384,21],[385,23,384,25,"atrule"],[385,29,384,31],[385,30,384,32,"prelude"],[385,37,384,15],[385,41,384,43],[385,45,384,8],[386,0,385,5],[386,5,133,18],[387,0,386,4,"getAtruleDescriptor"],[387,4,386,4,"getAtruleDescriptor"],[387,23,386,23],[387,25,386,25],[387,54,386,34,"atruleName"],[387,64,386,25],[387,66,386,46,"name"],[387,70,386,25],[387,72,386,52],[388,0,387,8],[388,13,387,15],[388,18,387,20,"atrules"],[388,25,387,15],[388,26,387,28,"hasOwnProperty"],[388,40,387,15],[388,41,387,43,"atruleName"],[388,51,387,15],[388,56,387,58],[388,61,387,63,"atrules"],[388,68,387,58],[388,69,387,71,"declarators"],[388,80,387,15],[388,83,388,14],[388,88,388,19,"atrules"],[388,95,388,14],[388,96,388,27,"atruleName"],[388,106,388,14],[388,108,388,39,"declarators"],[388,119,388,14],[388,120,388,51,"name"],[388,124,388,14],[388,129,388,60],[388,133,387,15],[388,136,389,14],[388,140,387,8],[389,0,390,5],[389,5,133,18],[390,0,391,4,"getProperty"],[390,4,391,4,"getProperty"],[390,15,391,15],[390,17,391,17],[390,38,391,26,"propertyName"],[390,50,391,17],[390,52,391,65],[391,0,391,65],[391,10,391,40,"fallbackBasename"],[391,26,391,65],[391,97,391,59],[391,101,391,65],[392,0,392,8],[392,10,392,12,"property"],[392,18,392,20],[392,21,392,23,"names"],[392,26,392,28],[392,27,392,29,"property"],[392,35,392,23],[392,36,392,38,"propertyName"],[392,48,392,23],[392,49,392,8],[393,0,393,8],[393,10,393,12,"propertyEntry"],[393,23,393,25],[393,26,393,28,"property"],[393,34,393,36],[393,35,393,37,"vendor"],[393,41,393,28],[393,45,393,47,"fallbackBasename"],[393,61,393,28],[393,64,394,14],[393,69,394,19,"properties"],[393,79,394,14],[393,80,394,30,"property"],[393,88,394,38],[393,89,394,39,"name"],[393,93,394,14],[393,98,394,48],[393,103,394,53,"properties"],[393,113,394,48],[393,114,394,64,"property"],[393,122,394,72],[393,123,394,73,"basename"],[393,131,394,48],[393,132,393,28],[393,135,395,14],[393,140,395,19,"properties"],[393,150,395,14],[393,151,395,30,"property"],[393,159,395,38],[393,160,395,39,"name"],[393,164,395,14],[393,165,393,8],[394,0,397,8],[394,13,397,15,"propertyEntry"],[394,26,397,28],[394,30,397,32],[394,34,397,8],[395,0,398,5],[395,5,133,18],[396,0,399,4,"getType"],[396,4,399,4,"getType"],[396,11,399,11],[396,13,399,13],[396,30,399,22,"name"],[396,34,399,13],[396,36,399,28],[397,0,400,8],[397,13,400,15],[397,18,400,20,"types"],[397,23,400,15],[397,24,400,26,"hasOwnProperty"],[397,38,400,15],[397,39,400,41,"name"],[397,43,400,15],[397,47,400,49],[397,52,400,54,"types"],[397,57,400,49],[397,58,400,60,"name"],[397,62,400,49],[397,63,400,15],[397,66,400,68],[397,70,400,8],[398,0,401,5],[398,5,133,18],[399,0,403,4,"validate"],[399,4,403,4,"validate"],[399,12,403,12],[399,14,403,14],[399,34,403,25],[400,0,404,8],[400,15,404,17,"validate"],[400,23,404,8],[400,24,404,26,"syntax"],[400,30,404,8],[400,32,404,34,"name"],[400,36,404,8],[400,38,404,40,"broken"],[400,44,404,8],[400,46,404,48,"descriptor"],[400,56,404,8],[400,58,404,60],[401,0,405,12],[401,12,405,16,"broken"],[401,18,405,22],[401,19,405,23,"hasOwnProperty"],[401,33,405,16],[401,34,405,38,"name"],[401,38,405,16],[401,39,405,12],[401,41,405,45],[402,0,406,16],[402,17,406,23,"broken"],[402,23,406,29],[402,24,406,30,"name"],[402,28,406,29],[402,29,406,16],[403,0,407,13],[405,0,409,12,"broken"],[405,8,409,12,"broken"],[405,14,409,18],[405,15,409,19,"name"],[405,19,409,18],[405,20,409,12],[405,23,409,27],[405,28,409,12],[407,0,410,12],[407,12,410,16,"descriptor"],[407,22,410,26],[407,23,410,27,"syntax"],[407,29,410,16],[407,34,410,38],[407,38,410,12],[407,40,410,44],[408,0,411,16,"walk"],[408,10,411,16,"walk"],[408,14,411,20],[408,15,411,21,"descriptor"],[408,25,411,31],[408,26,411,32,"syntax"],[408,32,411,20],[408,34,411,40],[408,44,411,49,"node"],[408,48,411,40],[408,50,411,55],[409,0,412,20],[409,16,412,24,"node"],[409,20,412,28],[409,21,412,29,"type"],[409,25,412,24],[409,30,412,38],[409,36,412,24],[409,40,412,48,"node"],[409,44,412,52],[409,45,412,53,"type"],[409,49,412,48],[409,54,412,62],[409,64,412,20],[409,66,412,74],[410,0,413,24],[411,0,414,21],[413,0,416,20],[413,16,416,24,"map"],[413,19,416,27],[413,22,416,30,"node"],[413,26,416,34],[413,27,416,35,"type"],[413,31,416,30],[413,36,416,44],[413,42,416,30],[413,45,416,53,"syntax"],[413,51,416,59],[413,52,416,60,"types"],[413,57,416,30],[413,60,416,68,"syntax"],[413,66,416,74],[413,67,416,75,"properties"],[413,77,416,20],[414,0,417,20],[414,16,417,24,"brokenMap"],[414,25,417,33],[414,28,417,36,"node"],[414,32,417,40],[414,33,417,41,"type"],[414,37,417,36],[414,42,417,50],[414,48,417,36],[414,51,417,59,"brokenTypes"],[414,62,417,36],[414,65,417,73,"brokenProperties"],[414,81,417,20],[416,0,419,20],[416,16,419,24],[416,17,419,25,"map"],[416,20,419,28],[416,21,419,29,"hasOwnProperty"],[416,35,419,25],[416,36,419,44,"node"],[416,40,419,48],[416,41,419,49,"name"],[416,45,419,25],[416,46,419,24],[416,50,419,58,"validate"],[416,58,419,66],[416,59,419,67,"syntax"],[416,65,419,66],[416,67,419,75,"node"],[416,71,419,79],[416,72,419,80,"name"],[416,76,419,66],[416,78,419,86,"brokenMap"],[416,87,419,66],[416,89,419,97,"map"],[416,92,419,100],[416,93,419,101,"node"],[416,97,419,105],[416,98,419,106,"name"],[416,102,419,100],[416,103,419,66],[416,104,419,20],[416,106,419,114],[417,0,420,24,"broken"],[417,14,420,24,"broken"],[417,20,420,30],[417,21,420,31,"name"],[417,25,420,30],[417,26,420,24],[417,29,420,39],[417,33,420,24],[418,0,421,21],[419,0,422,17],[419,11,411,20],[419,13,422,19],[419,17,411,20],[419,18,411,16],[420,0,423,13],[421,0,424,9],[423,0,426,8],[423,10,426,12,"brokenTypes"],[423,21,426,23],[423,24,426,26],[423,26,426,8],[424,0,427,8],[424,10,427,12,"brokenProperties"],[424,26,427,28],[424,29,427,31],[424,31,427,8],[426,0,429,8],[426,11,429,13],[426,15,429,17,"key"],[426,18,429,8],[426,22,429,24],[426,27,429,29,"types"],[426,32,429,8],[426,34,429,36],[427,0,430,12,"validate"],[427,8,430,12,"validate"],[427,16,430,20],[427,17,430,21],[427,21,430,20],[427,23,430,27,"key"],[427,26,430,20],[427,28,430,32,"brokenTypes"],[427,39,430,20],[427,41,430,45],[427,46,430,50,"types"],[427,51,430,45],[427,52,430,56,"key"],[427,55,430,45],[427,56,430,20],[427,57,430,12],[428,0,431,9],[430,0,433,8],[430,11,433,13],[430,15,433,17,"key"],[430,18,433,8],[430,22,433,24],[430,27,433,29,"properties"],[430,37,433,8],[430,39,433,41],[431,0,434,12,"validate"],[431,8,434,12,"validate"],[431,16,434,20],[431,17,434,21],[431,21,434,20],[431,23,434,27,"key"],[431,26,434,20],[431,28,434,32,"brokenProperties"],[431,44,434,20],[431,46,434,50],[431,51,434,55,"properties"],[431,61,434,50],[431,62,434,66,"key"],[431,65,434,50],[431,66,434,20],[431,67,434,12],[432,0,435,9],[434,0,437,8,"brokenTypes"],[434,6,437,8,"brokenTypes"],[434,17,437,19],[434,20,437,22,"Object"],[434,26,437,28],[434,27,437,29,"keys"],[434,31,437,22],[434,32,437,34,"brokenTypes"],[434,43,437,22],[434,45,437,47,"filter"],[434,51,437,22],[434,52,437,54],[434,62,437,63,"name"],[434,66,437,54],[434,68,437,69],[435,0,438,12],[435,15,438,19,"brokenTypes"],[435,26,438,30],[435,27,438,31,"name"],[435,31,438,30],[435,32,438,12],[436,0,439,9],[436,7,437,22],[436,8,437,8],[437,0,440,8,"brokenProperties"],[437,6,440,8,"brokenProperties"],[437,22,440,24],[437,25,440,27,"Object"],[437,31,440,33],[437,32,440,34,"keys"],[437,36,440,27],[437,37,440,39,"brokenProperties"],[437,53,440,27],[437,55,440,57,"filter"],[437,61,440,27],[437,62,440,64],[437,72,440,73,"name"],[437,76,440,64],[437,78,440,79],[438,0,441,12],[438,15,441,19,"brokenProperties"],[438,31,441,35],[438,32,441,36,"name"],[438,36,441,35],[438,37,441,12],[439,0,442,9],[439,7,440,27],[439,8,440,8],[441,0,444,8],[441,10,444,12,"brokenTypes"],[441,21,444,23],[441,22,444,24,"length"],[441,28,444,12],[441,32,444,34,"brokenProperties"],[441,48,444,50],[441,49,444,51,"length"],[441,55,444,8],[441,57,444,59],[442,0,445,12],[442,15,445,19],[443,0,446,16,"types"],[443,10,446,16,"types"],[443,15,446,21],[443,17,446,23,"brokenTypes"],[443,28,445,19],[444,0,447,16,"properties"],[444,10,447,16,"properties"],[444,20,447,26],[444,22,447,28,"brokenProperties"],[445,0,445,19],[445,9,445,12],[446,0,449,9],[448,0,451,8],[448,13,451,15],[448,17,451,8],[449,0,452,5],[449,5,133,18],[450,0,453,4,"dump"],[450,4,453,4,"dump"],[450,8,453,8],[450,10,453,10],[450,24,453,19,"syntaxAsAst"],[450,35,453,10],[450,37,453,32,"pretty"],[450,43,453,10],[450,45,453,40],[451,0,454,8],[451,13,454,15],[452,0,455,12,"generic"],[452,8,455,12,"generic"],[452,15,455,19],[452,17,455,21],[452,22,455,26,"generic"],[452,29,454,15],[453,0,456,12,"types"],[453,8,456,12,"types"],[453,13,456,17],[453,15,456,19,"dumpMapSyntax"],[453,28,456,32],[453,29,456,33],[453,34,456,38,"types"],[453,39,456,32],[453,41,456,45],[453,42,456,46,"pretty"],[453,48,456,32],[453,50,456,54,"syntaxAsAst"],[453,61,456,32],[453,62,454,15],[454,0,457,12,"properties"],[454,8,457,12,"properties"],[454,18,457,22],[454,20,457,24,"dumpMapSyntax"],[454,33,457,37],[454,34,457,38],[454,39,457,43,"properties"],[454,49,457,37],[454,51,457,55],[454,52,457,56,"pretty"],[454,58,457,37],[454,60,457,64,"syntaxAsAst"],[454,71,457,37],[454,72,454,15],[455,0,458,12,"atrules"],[455,8,458,12,"atrules"],[455,15,458,19],[455,17,458,21,"dumpAtruleMapSyntax"],[455,36,458,40],[455,37,458,41],[455,42,458,46,"atrules"],[455,49,458,40],[455,51,458,55],[455,52,458,56,"pretty"],[455,58,458,40],[455,60,458,64,"syntaxAsAst"],[455,71,458,40],[456,0,454,15],[456,7,454,8],[457,0,460,5],[457,5,133,18],[458,0,461,4,"toString"],[458,4,461,4,"toString"],[458,12,461,12],[458,14,461,14],[458,34,461,25],[459,0,462,8],[459,13,462,15,"JSON"],[459,17,462,19],[459,18,462,20,"stringify"],[459,27,462,15],[459,28,462,30],[459,33,462,35,"dump"],[459,37,462,30],[459,39,462,15],[459,40,462,8],[460,0,463,5],[461,0,133,18],[461,3,133,0],[462,0,466,0,"module"],[462,2,466,0,"module"],[462,8,466,6],[462,9,466,7,"exports"],[462,16,466,0],[462,19,466,17,"Lexer"],[462,24,466,0]],"functionMap":{"names":["<global>","dumpMapSyntax","dumpAtruleMapSyntax","valueHasVar","buildMatchResult","matchSyntax","Lexer","prototype.checkStructure","collectWarning","syntax.walk$argument_1","prototype.createDescriptor","Object.defineProperty$argument_2.get","prototype.addAtrule_","Object.keys.reduce$argument_0","prototype.addProperty_","prototype.addType_","prototype.checkAtruleName","prototype.checkAtrulePrelude","prototype.checkAtruleDescriptorName","prototype.checkPropertyName","prototype.matchAtrulePrelude","prototype.matchAtruleDescriptor","prototype.matchDeclaration","prototype.matchProperty","prototype.matchType","prototype.match","prototype.findValueFragments","prototype.findDeclarationValueFragments","prototype.findAllFragments","<anonymous>","prototype.getAtrule","prototype.getAtrulePrelude","prototype.getAtruleDescriptor","prototype.getProperty","prototype.getType","prototype.validate","validate","walk$argument_1","Object.keys.filter$argument_0","prototype.dump","prototype.toString"],"mappings":"AAA;ACgB;CDY;AEE;CFe;AGE;CHQ;AIE;CJU;AKE;CLwB;YME;CNmC;oBOI;QCC;SDK;8BEK;SFM;KPG;sBUE;yBCmB;qBDM;qBCQ;iBDM;KVK;gBYC;yDCU;iBDG;KZG;kBcC;KdM;ceC;KfU;qBgBE;KhBI;wBiBC;KjBgB;+BkBC;KlBkB;uBmBC;KnBW;wBoBE;KpBY;2BqBC;KrBW;sBsBC;KtBM;mBuBC;KvBQ;ewBC;KxBQ;WyBC;KzBU;wB0BE;K1BE;mC2BC;K3BE;sB4BC;mBCK;aDE;K5BI;e8BE;K9BO;sB+BC;K/BI;yBgCC;KhCI;iBiCC;KjCO;akCC;KlCE;cmCE;QCC;wCCO;iBDW;SDE;sDGa;SHE;gEGC;SHE;KnCU;UuCC;KvCO;cwCC;KxCE"}},"type":"js/module"}]}