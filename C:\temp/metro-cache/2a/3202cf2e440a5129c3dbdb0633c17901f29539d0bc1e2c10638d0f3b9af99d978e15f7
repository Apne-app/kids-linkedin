{"dependencies":[{"name":"./core","data":{"isAsync":false,"locs":[{"start":{"line":4,"column":37},"end":{"line":4,"column":54}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  ;\n\n  (function (root, factory) {\n    if (typeof exports === \"object\") {\n      module.exports = exports = factory(_$$_REQUIRE(_dependencyMap[0], \"./core\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      define([\"./core\"], factory);\n    } else {\n      factory(root.CryptoJS);\n    }\n  })(this, function (CryptoJS) {\n    (function () {\n      var C = CryptoJS;\n      var C_lib = C.lib;\n      var WordArray = C_lib.WordArray;\n      var C_enc = C.enc;\n      var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {\n        stringify: function stringify(wordArray) {\n          var words = wordArray.words;\n          var sigBytes = wordArray.sigBytes;\n          var utf16Chars = [];\n\n          for (var i = 0; i < sigBytes; i += 2) {\n            var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff;\n            utf16Chars.push(String.fromCharCode(codePoint));\n          }\n\n          return utf16Chars.join('');\n        },\n        parse: function parse(utf16Str) {\n          var utf16StrLength = utf16Str.length;\n          var words = [];\n\n          for (var i = 0; i < utf16StrLength; i++) {\n            words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;\n          }\n\n          return WordArray.create(words, utf16StrLength * 2);\n        }\n      };\n      C_enc.Utf16LE = {\n        stringify: function stringify(wordArray) {\n          var words = wordArray.words;\n          var sigBytes = wordArray.sigBytes;\n          var utf16Chars = [];\n\n          for (var i = 0; i < sigBytes; i += 2) {\n            var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff);\n            utf16Chars.push(String.fromCharCode(codePoint));\n          }\n\n          return utf16Chars.join('');\n        },\n        parse: function parse(utf16Str) {\n          var utf16StrLength = utf16Str.length;\n          var words = [];\n\n          for (var i = 0; i < utf16StrLength; i++) {\n            words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);\n          }\n\n          return WordArray.create(words, utf16StrLength * 2);\n        }\n      };\n\n      function swapEndian(word) {\n        return word << 8 & 0xff00ff00 | word >>> 8 & 0x00ff00ff;\n      }\n    })();\n\n    return CryptoJS.enc.Utf16;\n  });\n});","lineCount":74,"map":[[2,0,1,0],[4,0,1,2],[4,13,1,12,"root"],[4,17,1,2],[4,19,1,18,"factory"],[4,26,1,2],[4,28,1,27],[5,0,2,1],[5,8,2,5],[5,15,2,12,"exports"],[5,22,2,5],[5,27,2,24],[5,35,2,1],[5,37,2,34],[6,0,4,2,"module"],[6,6,4,2,"module"],[6,12,4,8],[6,13,4,9,"exports"],[6,20,4,2],[6,23,4,19,"exports"],[6,30,4,26],[6,33,4,29,"factory"],[6,40,4,36],[6,41,4,37,"require"],[6,52,4,44],[6,81,4,36],[6,82,4,2],[7,0,5,2],[7,5,2,1],[7,11,6,6],[7,15,6,10],[7,22,6,17,"define"],[7,28,6,10],[7,33,6,28],[7,43,6,10],[7,47,6,42,"define"],[7,53,6,48],[7,54,6,49,"amd"],[7,57,6,6],[7,59,6,54],[8,0,8,2,"define"],[8,6,8,2,"define"],[8,12,8,8],[8,13,8,9],[8,14,8,10],[8,22,8,9],[8,23,8,8],[8,25,8,21,"factory"],[8,32,8,8],[8,33,8,2],[9,0,9,2],[9,5,6,6],[9,11,10,6],[10,0,12,2,"factory"],[10,6,12,2,"factory"],[10,13,12,9],[10,14,12,10,"root"],[10,18,12,14],[10,19,12,15,"CryptoJS"],[10,27,12,9],[10,28,12,2],[11,0,13,2],[12,0,14,1],[12,3,1,2],[12,5,14,2],[12,9,1,2],[12,11,14,8],[12,21,14,18,"CryptoJS"],[12,29,14,8],[12,31,14,28],[13,0,16,2],[13,17,16,14],[14,0,18,5],[14,10,18,9,"C"],[14,11,18,10],[14,14,18,13,"CryptoJS"],[14,22,18,5],[15,0,19,5],[15,10,19,9,"C_lib"],[15,15,19,14],[15,18,19,17,"C"],[15,19,19,18],[15,20,19,19,"lib"],[15,23,19,5],[16,0,20,5],[16,10,20,9,"WordArray"],[16,19,20,18],[16,22,20,21,"C_lib"],[16,27,20,26],[16,28,20,27,"WordArray"],[16,37,20,5],[17,0,21,5],[17,10,21,9,"C_enc"],[17,15,21,14],[17,18,21,17,"C"],[17,19,21,18],[17,20,21,19,"enc"],[17,23,21,5],[18,0,26,5],[18,10,26,9,"Utf16BE"],[18,17,26,16],[18,20,26,19,"C_enc"],[18,25,26,24],[18,26,26,25,"Utf16"],[18,31,26,19],[18,34,26,33,"C_enc"],[18,39,26,38],[18,40,26,39,"Utf16BE"],[18,47,26,33],[18,50,26,49],[19,0,40,9,"stringify"],[19,8,40,9,"stringify"],[19,17,40,18],[19,19,40,20],[19,38,40,30,"wordArray"],[19,47,40,20],[19,49,40,41],[20,0,42,13],[20,14,42,17,"words"],[20,19,42,22],[20,22,42,25,"wordArray"],[20,31,42,34],[20,32,42,35,"words"],[20,37,42,13],[21,0,43,13],[21,14,43,17,"sigBytes"],[21,22,43,25],[21,25,43,28,"wordArray"],[21,34,43,37],[21,35,43,38,"sigBytes"],[21,43,43,13],[22,0,46,13],[22,14,46,17,"utf16Chars"],[22,24,46,27],[22,27,46,30],[22,29,46,13],[24,0,47,13],[24,15,47,18],[24,19,47,22,"i"],[24,20,47,23],[24,23,47,26],[24,24,47,13],[24,26,47,29,"i"],[24,27,47,30],[24,30,47,33,"sigBytes"],[24,38,47,13],[24,40,47,43,"i"],[24,41,47,44],[24,45,47,48],[24,46,47,13],[24,48,47,51],[25,0,48,17],[25,16,48,21,"codePoint"],[25,25,48,30],[25,28,48,34,"words"],[25,33,48,39],[25,34,48,40,"i"],[25,35,48,41],[25,40,48,46],[25,41,48,39],[25,42,48,34],[25,47,48,54],[25,52,48,60,"i"],[25,53,48,61],[25,56,48,64],[25,57,48,59],[25,60,48,69],[25,61,48,33],[25,64,48,75],[25,70,48,17],[26,0,49,17,"utf16Chars"],[26,12,49,17,"utf16Chars"],[26,22,49,27],[26,23,49,28,"push"],[26,27,49,17],[26,28,49,33,"String"],[26,34,49,39],[26,35,49,40,"fromCharCode"],[26,47,49,33],[26,48,49,53,"codePoint"],[26,57,49,33],[26,58,49,17],[27,0,50,14],[29,0,52,13],[29,17,52,20,"utf16Chars"],[29,27,52,30],[29,28,52,31,"join"],[29,32,52,20],[29,33,52,36],[29,35,52,20],[29,36,52,13],[30,0,53,10],[30,9,26,49],[31,0,68,9,"parse"],[31,8,68,9,"parse"],[31,13,68,14],[31,15,68,16],[31,30,68,26,"utf16Str"],[31,38,68,16],[31,40,68,36],[32,0,70,13],[32,14,70,17,"utf16StrLength"],[32,28,70,31],[32,31,70,34,"utf16Str"],[32,39,70,42],[32,40,70,43,"length"],[32,46,70,13],[33,0,73,13],[33,14,73,17,"words"],[33,19,73,22],[33,22,73,25],[33,24,73,13],[35,0,74,13],[35,15,74,18],[35,19,74,22,"i"],[35,20,74,23],[35,23,74,26],[35,24,74,13],[35,26,74,29,"i"],[35,27,74,30],[35,30,74,33,"utf16StrLength"],[35,44,74,13],[35,46,74,49,"i"],[35,47,74,50],[35,49,74,13],[35,51,74,54],[36,0,75,17,"words"],[36,12,75,17,"words"],[36,17,75,22],[36,18,75,23,"i"],[36,19,75,24],[36,24,75,29],[36,25,75,22],[36,26,75,17],[36,30,75,35,"utf16Str"],[36,38,75,43],[36,39,75,44,"charCodeAt"],[36,49,75,35],[36,50,75,55,"i"],[36,51,75,35],[36,56,75,62],[36,61,75,68,"i"],[36,62,75,69],[36,65,75,72],[36,66,75,67],[36,69,75,77],[36,71,75,17],[37,0,76,14],[39,0,78,13],[39,17,78,20,"WordArray"],[39,26,78,29],[39,27,78,30,"create"],[39,33,78,20],[39,34,78,37,"words"],[39,39,78,20],[39,41,78,44,"utf16StrLength"],[39,55,78,58],[39,58,78,61],[39,59,78,20],[39,60,78,13],[40,0,79,10],[41,0,26,49],[41,7,26,5],[42,0,85,5,"C_enc"],[42,6,85,5,"C_enc"],[42,11,85,10],[42,12,85,11,"Utf16LE"],[42,19,85,5],[42,22,85,21],[43,0,99,9,"stringify"],[43,8,99,9,"stringify"],[43,17,99,18],[43,19,99,20],[43,38,99,30,"wordArray"],[43,47,99,20],[43,49,99,41],[44,0,101,13],[44,14,101,17,"words"],[44,19,101,22],[44,22,101,25,"wordArray"],[44,31,101,34],[44,32,101,35,"words"],[44,37,101,13],[45,0,102,13],[45,14,102,17,"sigBytes"],[45,22,102,25],[45,25,102,28,"wordArray"],[45,34,102,37],[45,35,102,38,"sigBytes"],[45,43,102,13],[46,0,105,13],[46,14,105,17,"utf16Chars"],[46,24,105,27],[46,27,105,30],[46,29,105,13],[48,0,106,13],[48,15,106,18],[48,19,106,22,"i"],[48,20,106,23],[48,23,106,26],[48,24,106,13],[48,26,106,29,"i"],[48,27,106,30],[48,30,106,33,"sigBytes"],[48,38,106,13],[48,40,106,43,"i"],[48,41,106,44],[48,45,106,48],[48,46,106,13],[48,48,106,51],[49,0,107,17],[49,16,107,21,"codePoint"],[49,25,107,30],[49,28,107,33,"swapEndian"],[49,38,107,43],[49,39,107,45,"words"],[49,44,107,50],[49,45,107,51,"i"],[49,46,107,52],[49,51,107,57],[49,52,107,50],[49,53,107,45],[49,58,107,65],[49,63,107,71,"i"],[49,64,107,72],[49,67,107,75],[49,68,107,70],[49,71,107,80],[49,72,107,44],[49,75,107,86],[49,81,107,43],[49,82,107,17],[50,0,108,17,"utf16Chars"],[50,12,108,17,"utf16Chars"],[50,22,108,27],[50,23,108,28,"push"],[50,27,108,17],[50,28,108,33,"String"],[50,34,108,39],[50,35,108,40,"fromCharCode"],[50,47,108,33],[50,48,108,53,"codePoint"],[50,57,108,33],[50,58,108,17],[51,0,109,14],[53,0,111,13],[53,17,111,20,"utf16Chars"],[53,27,111,30],[53,28,111,31,"join"],[53,32,111,20],[53,33,111,36],[53,35,111,20],[53,36,111,13],[54,0,112,10],[54,9,85,21],[55,0,127,9,"parse"],[55,8,127,9,"parse"],[55,13,127,14],[55,15,127,16],[55,30,127,26,"utf16Str"],[55,38,127,16],[55,40,127,36],[56,0,129,13],[56,14,129,17,"utf16StrLength"],[56,28,129,31],[56,31,129,34,"utf16Str"],[56,39,129,42],[56,40,129,43,"length"],[56,46,129,13],[57,0,132,13],[57,14,132,17,"words"],[57,19,132,22],[57,22,132,25],[57,24,132,13],[59,0,133,13],[59,15,133,18],[59,19,133,22,"i"],[59,20,133,23],[59,23,133,26],[59,24,133,13],[59,26,133,29,"i"],[59,27,133,30],[59,30,133,33,"utf16StrLength"],[59,44,133,13],[59,46,133,49,"i"],[59,47,133,50],[59,49,133,13],[59,51,133,54],[60,0,134,17,"words"],[60,12,134,17,"words"],[60,17,134,22],[60,18,134,23,"i"],[60,19,134,24],[60,24,134,29],[60,25,134,22],[60,26,134,17],[60,30,134,35,"swapEndian"],[60,40,134,45],[60,41,134,46,"utf16Str"],[60,49,134,54],[60,50,134,55,"charCodeAt"],[60,60,134,46],[60,61,134,66,"i"],[60,62,134,46],[60,67,134,73],[60,72,134,79,"i"],[60,73,134,80],[60,76,134,83],[60,77,134,78],[60,80,134,88],[60,82,134,45],[60,83,134,17],[61,0,135,14],[63,0,137,13],[63,17,137,20,"WordArray"],[63,26,137,29],[63,27,137,30,"create"],[63,33,137,20],[63,34,137,37,"words"],[63,39,137,20],[63,41,137,44,"utf16StrLength"],[63,55,137,58],[63,58,137,61],[63,59,137,20],[63,60,137,13],[64,0,138,10],[65,0,85,21],[65,7,85,5],[67,0,141,5],[67,15,141,14,"swapEndian"],[67,25,141,5],[67,26,141,25,"word"],[67,30,141,5],[67,32,141,31],[68,0,142,9],[68,15,142,18,"word"],[68,19,142,22],[68,23,142,26],[68,24,142,17],[68,27,142,31],[68,37,142,16],[68,40,142,47,"word"],[68,44,142,51],[68,49,142,56],[68,50,142,46],[68,53,142,61],[68,63,142,9],[69,0,143,6],[70,0,144,2],[70,5,16,2],[70,8,16,1],[72,0,147,1],[72,11,147,8,"CryptoJS"],[72,19,147,16],[72,20,147,17,"enc"],[72,23,147,8],[72,24,147,21,"Utf16"],[72,29,147,1],[73,0,149,1],[73,3,1,2],[73,4,1,1]],"functionMap":{"names":["<global>","<anonymous>","C_enc.Utf16BE.stringify","C_enc.Utf16BE.parse","C_enc.Utf16LE.stringify","C_enc.Utf16LE.parse","swapEndian"],"mappings":"AAA,EC;CDa,OC;oBC0B;UDa;gBEe;UFW;oBGoB;UHa;gBIe;UJW;KKG;MLE;CDM"}},"type":"js/module"}]}