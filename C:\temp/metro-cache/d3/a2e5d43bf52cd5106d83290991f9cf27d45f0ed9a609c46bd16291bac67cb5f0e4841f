{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"nanoid/non-secure","data":{"isAsync":false}},{"name":"./BaseRouter","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = TabRouter;\n  exports.TabActions = void 0;\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/defineProperty\"));\n\n  var _nonSecure = _$$_REQUIRE(_dependencyMap[2], \"nanoid/non-secure\");\n\n  var _BaseRouter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"./BaseRouter\"));\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  var TYPE_ROUTE = 'route';\n  var TabActions = {\n    jumpTo: function jumpTo(name, params) {\n      return {\n        type: 'JUMP_TO',\n        payload: {\n          name: name,\n          params: params\n        }\n      };\n    }\n  };\n  exports.TabActions = TabActions;\n\n  var getRouteHistory = function getRouteHistory(routes, index, backBehavior, initialRouteName) {\n    var history = [{\n      type: TYPE_ROUTE,\n      key: routes[index].key\n    }];\n    var initialRouteIndex;\n\n    switch (backBehavior) {\n      case 'order':\n        for (var i = index; i > 0; i--) {\n          history.unshift({\n            type: TYPE_ROUTE,\n            key: routes[i - 1].key\n          });\n        }\n\n        break;\n\n      case 'initialRoute':\n        initialRouteIndex = routes.findIndex(function (route) {\n          return route.name === initialRouteName;\n        });\n        initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n        if (initialRouteIndex !== index) {\n          history.unshift({\n            type: TYPE_ROUTE,\n            key: routes[initialRouteIndex].key\n          });\n        }\n\n        break;\n\n      case 'history':\n        break;\n    }\n\n    return history;\n  };\n\n  var changeIndex = function changeIndex(state, index, backBehavior, initialRouteName) {\n    var history;\n\n    if (backBehavior === 'history') {\n      var currentKey = state.routes[index].key;\n      history = state.history.filter(function (it) {\n        return it.type === 'route' ? it.key !== currentKey : false;\n      }).concat({\n        type: TYPE_ROUTE,\n        key: currentKey\n      });\n    } else {\n      history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n    }\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      index: index,\n      history: history\n    });\n  };\n\n  function TabRouter(_ref) {\n    var initialRouteName = _ref.initialRouteName,\n        _ref$backBehavior = _ref.backBehavior,\n        backBehavior = _ref$backBehavior === void 0 ? 'history' : _ref$backBehavior;\n\n    var router = _objectSpread(_objectSpread({}, _BaseRouter.default), {}, {\n      type: 'tab',\n      getInitialState: function getInitialState(_ref2) {\n        var routeNames = _ref2.routeNames,\n            routeParamList = _ref2.routeParamList;\n        var index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n        var routes = routeNames.map(function (name) {\n          return {\n            name: name,\n            key: name + \"-\" + (0, _nonSecure.nanoid)(),\n            params: routeParamList[name]\n          };\n        });\n        var history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n        return {\n          stale: false,\n          type: 'tab',\n          key: \"tab-\" + (0, _nonSecure.nanoid)(),\n          index: index,\n          routeNames: routeNames,\n          history: history,\n          routes: routes\n        };\n      },\n      getRehydratedState: function getRehydratedState(partialState, _ref3) {\n        var _state$routes, _state$index, _state$history$filter, _state$history;\n\n        var routeNames = _ref3.routeNames,\n            routeParamList = _ref3.routeParamList;\n        var state = partialState;\n\n        if (state.stale === false) {\n          return state;\n        }\n\n        var routes = routeNames.map(function (name) {\n          var route = state.routes.find(function (r) {\n            return r.name === name;\n          });\n          return _objectSpread(_objectSpread({}, route), {}, {\n            name: name,\n            key: route && route.name === name && route.key ? route.key : name + \"-\" + (0, _nonSecure.nanoid)(),\n            params: routeParamList[name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[name]), route ? route.params : undefined) : route ? route.params : undefined\n          });\n        });\n        var index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(_state$index = state == null ? void 0 : state.index) != null ? _state$index : 0]) == null ? void 0 : _state$routes.name), 0), routes.length - 1);\n        var history = (_state$history$filter = (_state$history = state.history) == null ? void 0 : _state$history.filter(function (it) {\n          return routes.find(function (r) {\n            return r.key === it.key;\n          });\n        })) != null ? _state$history$filter : [];\n        return changeIndex({\n          stale: false,\n          type: 'tab',\n          key: \"tab-\" + (0, _nonSecure.nanoid)(),\n          index: index,\n          routeNames: routeNames,\n          history: history,\n          routes: routes\n        }, index, backBehavior, initialRouteName);\n      },\n      getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref4) {\n        var routeNames = _ref4.routeNames,\n            routeParamList = _ref4.routeParamList;\n        var routes = routeNames.map(function (name) {\n          return state.routes.find(function (r) {\n            return r.name === name;\n          }) || {\n            name: name,\n            key: name + \"-\" + (0, _nonSecure.nanoid)(),\n            params: routeParamList[name]\n          };\n        });\n        var index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n        var history = state.history.filter(function (it) {\n          return it.type !== 'route' || routes.find(function (r) {\n            return r.key === it.key;\n          });\n        });\n\n        if (!history.length) {\n          history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          history: history,\n          routeNames: routeNames,\n          routes: routes,\n          index: index\n        });\n      },\n      getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n        var index = state.routes.findIndex(function (r) {\n          return r.key === key;\n        });\n\n        if (index === -1 || index === state.index) {\n          return state;\n        }\n\n        return changeIndex(state, index, backBehavior, initialRouteName);\n      },\n      getStateForAction: function getStateForAction(state, action, _ref5) {\n        var routeParamList = _ref5.routeParamList;\n\n        switch (action.type) {\n          case 'JUMP_TO':\n          case 'NAVIGATE':\n            {\n              var index = -1;\n\n              if (action.type === 'NAVIGATE' && action.payload.key) {\n                index = state.routes.findIndex(function (route) {\n                  return route.key === action.payload.key;\n                });\n              } else {\n                index = state.routes.findIndex(function (route) {\n                  return route.name === action.payload.name;\n                });\n              }\n\n              if (index === -1) {\n                return null;\n              }\n\n              return changeIndex(_objectSpread(_objectSpread({}, state), {}, {\n                routes: action.payload.params !== undefined ? state.routes.map(function (route, i) {\n                  if (i !== index) {\n                    return route;\n                  }\n\n                  var params;\n\n                  if (action.type === 'NAVIGATE' && action.payload.merge === false) {\n                    params = routeParamList[route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[route.name]), action.payload.params) : action.payload.params;\n                  } else {\n                    params = action.payload.params ? _objectSpread(_objectSpread({}, route.params), action.payload.params) : route.params;\n                  }\n\n                  return params !== route.params ? _objectSpread(_objectSpread({}, route), {}, {\n                    params: params\n                  }) : route;\n                }) : state.routes\n              }), index, backBehavior, initialRouteName);\n            }\n\n          case 'GO_BACK':\n            {\n              if (state.history.length === 1) {\n                return null;\n              }\n\n              var previousKey = state.history[state.history.length - 2].key;\n\n              var _index = state.routes.findIndex(function (route) {\n                return route.key === previousKey;\n              });\n\n              if (_index === -1) {\n                return null;\n              }\n\n              return _objectSpread(_objectSpread({}, state), {}, {\n                history: state.history.slice(0, -1),\n                index: _index\n              });\n            }\n\n          default:\n            return _BaseRouter.default.getStateForAction(state, action);\n        }\n      },\n      shouldActionChangeFocus: function shouldActionChangeFocus(action) {\n        return action.type === 'NAVIGATE';\n      },\n      actionCreators: TabActions\n    });\n\n    return router;\n  }\n});","lineCount":280,"map":[[12,0,1,0],[14,0,2,0],[20,0,54,0],[20,6,54,6,"TYPE_ROUTE"],[20,16,54,16],[20,19,54,19],[20,26,54,0],[21,0,56,7],[21,6,56,13,"TabActions"],[21,16,56,23],[21,19,56,26],[22,0,57,2,"jumpTo"],[22,4,57,2,"jumpTo"],[22,10,56,26],[22,28,57,9,"name"],[22,32,56,26],[22,34,57,23,"params"],[22,40,56,26],[22,42,57,55],[23,0,58,4],[23,13,58,11],[24,0,58,13,"type"],[24,8,58,13,"type"],[24,12,58,17],[24,14,58,19],[24,23,58,11],[25,0,58,30,"payload"],[25,8,58,30,"payload"],[25,15,58,37],[25,17,58,39],[26,0,58,41,"name"],[26,10,58,41,"name"],[26,14,58,45],[26,16,58,41,"name"],[26,20,58,39],[27,0,58,47,"params"],[27,10,58,47,"params"],[27,16,58,53],[27,18,58,47,"params"],[28,0,58,39],[29,0,58,11],[29,7,58,4],[30,0,59,3],[31,0,56,26],[31,3,56,7],[34,0,62,0],[34,6,62,6,"getRouteHistory"],[34,21,62,21],[34,24,62,24],[34,33,62,6,"getRouteHistory"],[34,48,62,24],[34,49,63,2,"routes"],[34,55,62,24],[34,57,64,2,"index"],[34,62,62,24],[34,64,65,2,"backBehavior"],[34,76,62,24],[34,78,66,2,"initialRouteName"],[34,94,62,24],[34,96,67,5],[35,0,68,2],[35,8,68,8,"history"],[35,15,68,15],[35,18,68,18],[35,19,68,19],[36,0,68,21,"type"],[36,6,68,21,"type"],[36,10,68,25],[36,12,68,27,"TYPE_ROUTE"],[36,22,68,19],[37,0,68,39,"key"],[37,6,68,39,"key"],[37,9,68,42],[37,11,68,44,"routes"],[37,17,68,50],[37,18,68,51,"index"],[37,23,68,50],[37,24,68,44],[37,25,68,58,"key"],[38,0,68,19],[38,5,68,18],[38,6,68,2],[39,0,69,2],[39,8,69,6,"initialRouteIndex"],[39,25,69,2],[41,0,71,2],[41,12,71,10,"backBehavior"],[41,24,71,2],[42,0,72,4],[42,11,72,9],[42,18,72,4],[43,0,73,6],[43,13,73,11],[43,17,73,15,"i"],[43,18,73,16],[43,21,73,19,"index"],[43,26,73,6],[43,28,73,26,"i"],[43,29,73,27],[43,32,73,30],[43,33,73,6],[43,35,73,33,"i"],[43,36,73,34],[43,38,73,6],[43,40,73,38],[44,0,74,8,"history"],[44,10,74,8,"history"],[44,17,74,15],[44,18,74,16,"unshift"],[44,25,74,8],[44,26,74,24],[45,0,74,26,"type"],[45,12,74,26,"type"],[45,16,74,30],[45,18,74,32,"TYPE_ROUTE"],[45,28,74,24],[46,0,74,44,"key"],[46,12,74,44,"key"],[46,15,74,47],[46,17,74,49,"routes"],[46,23,74,55],[46,24,74,56,"i"],[46,25,74,57],[46,28,74,60],[46,29,74,55],[46,30,74,49],[46,31,74,63,"key"],[47,0,74,24],[47,11,74,8],[48,0,75,7],[50,0,76,6],[52,0,77,4],[52,11,77,9],[52,25,77,4],[53,0,78,6,"initialRouteIndex"],[53,8,78,6,"initialRouteIndex"],[53,25,78,23],[53,28,78,26,"routes"],[53,34,78,32],[53,35,78,33,"findIndex"],[53,44,78,26],[53,45,79,8],[53,55,79,9,"route"],[53,60,79,8],[54,0,79,8],[54,17,79,19,"route"],[54,22,79,24],[54,23,79,25,"name"],[54,27,79,19],[54,32,79,34,"initialRouteName"],[54,48,79,8],[55,0,79,8],[55,9,78,26],[55,10,78,6],[56,0,81,6,"initialRouteIndex"],[56,8,81,6,"initialRouteIndex"],[56,25,81,23],[56,28,81,26,"initialRouteIndex"],[56,45,81,43],[56,50,81,48],[56,51,81,49],[56,52,81,26],[56,55,81,53],[56,56,81,26],[56,59,81,57,"initialRouteIndex"],[56,76,81,6],[58,0,83,6],[58,12,83,10,"initialRouteIndex"],[58,29,83,27],[58,34,83,32,"index"],[58,39,83,6],[58,41,83,39],[59,0,84,8,"history"],[59,10,84,8,"history"],[59,17,84,15],[59,18,84,16,"unshift"],[59,25,84,8],[59,26,84,24],[60,0,85,10,"type"],[60,12,85,10,"type"],[60,16,85,14],[60,18,85,16,"TYPE_ROUTE"],[60,28,84,24],[61,0,86,10,"key"],[61,12,86,10,"key"],[61,15,86,13],[61,17,86,15,"routes"],[61,23,86,21],[61,24,86,22,"initialRouteIndex"],[61,41,86,21],[61,42,86,15],[61,43,86,41,"key"],[62,0,84,24],[62,11,84,8],[63,0,88,7],[65,0,89,6],[67,0,90,4],[67,11,90,9],[67,20,90,4],[68,0,92,6],[69,0,71,2],[71,0,95,2],[71,11,95,9,"history"],[71,18,95,2],[72,0,96,1],[72,3,62,0],[74,0,98,0],[74,6,98,6,"changeIndex"],[74,17,98,17],[74,20,98,20],[74,29,98,6,"changeIndex"],[74,40,98,20],[74,41,99,2,"state"],[74,46,98,20],[74,48,100,2,"index"],[74,53,98,20],[74,55,101,2,"backBehavior"],[74,67,98,20],[74,69,102,2,"initialRouteName"],[74,85,98,20],[74,87,103,5],[75,0,104,2],[75,8,104,6,"history"],[75,15,104,2],[77,0,106,2],[77,8,106,6,"backBehavior"],[77,20,106,18],[77,25,106,23],[77,34,106,2],[77,36,106,34],[78,0,107,4],[78,10,107,10,"currentKey"],[78,20,107,20],[78,23,107,23,"state"],[78,28,107,28],[78,29,107,29,"routes"],[78,35,107,23],[78,36,107,36,"index"],[78,41,107,23],[78,43,107,43,"key"],[78,46,107,4],[79,0,109,4,"history"],[79,6,109,4,"history"],[79,13,109,11],[79,16,109,14,"state"],[79,21,109,19],[79,22,109,20,"history"],[79,29,109,14],[79,30,110,7,"filter"],[79,36,109,14],[79,37,110,14],[79,47,110,15,"it"],[79,49,110,14],[80,0,110,14],[80,15,110,23,"it"],[80,17,110,25],[80,18,110,26,"type"],[80,22,110,23],[80,27,110,35],[80,34,110,23],[80,37,110,45,"it"],[80,39,110,47],[80,40,110,48,"key"],[80,43,110,45],[80,48,110,56,"currentKey"],[80,58,110,23],[80,61,110,69],[80,66,110,14],[81,0,110,14],[81,7,109,14],[81,9,111,7,"concat"],[81,15,109,14],[81,16,111,14],[82,0,111,16,"type"],[82,8,111,16,"type"],[82,12,111,20],[82,14,111,22,"TYPE_ROUTE"],[82,24,111,14],[83,0,111,34,"key"],[83,8,111,34,"key"],[83,11,111,37],[83,13,111,39,"currentKey"],[84,0,111,14],[84,7,109,14],[84,8,109,4],[85,0,112,3],[85,5,106,2],[85,11,112,9],[86,0,113,4,"history"],[86,6,113,4,"history"],[86,13,113,11],[86,16,113,14,"getRouteHistory"],[86,31,113,29],[86,32,114,6,"state"],[86,37,114,11],[86,38,114,12,"routes"],[86,44,113,29],[86,46,115,6,"index"],[86,51,113,29],[86,53,116,6,"backBehavior"],[86,65,113,29],[86,67,117,6,"initialRouteName"],[86,83,113,29],[86,84,113,4],[87,0,119,3],[89,0,121,2],[89,43,122,7,"state"],[89,48,121,2],[90,0,123,4,"index"],[90,6,123,4,"index"],[90,11,123,9],[90,13,123,4,"index"],[90,18,121,2],[91,0,124,4,"history"],[91,6,124,4,"history"],[91,13,124,11],[91,15,124,4,"history"],[92,0,121,2],[93,0,126,1],[93,3,98,0],[95,0,128,15],[95,11,128,24,"TabRouter"],[95,20,128,15],[95,27,131,21],[96,0,131,21],[96,8,129,2,"initialRouteName"],[96,24,131,21],[96,32,129,2,"initialRouteName"],[96,48,131,21],[97,0,131,21],[97,33,130,2,"backBehavior"],[97,45,131,21],[98,0,131,21],[98,8,130,2,"backBehavior"],[98,20,131,21],[98,54,130,17],[98,63,131,21],[100,0,132,2],[100,8,132,8,"router"],[100,14,135,3],[100,49,136,7,"BaseRouter"],[100,68,135,3],[101,0,138,4,"type"],[101,6,138,4,"type"],[101,10,138,8],[101,12,138,10],[101,17,135,3],[102,0,140,4,"getInitialState"],[102,6,140,4,"getInitialState"],[102,21,135,3],[102,55,140,52],[103,0,140,52],[103,12,140,22,"routeNames"],[103,22,140,52],[103,31,140,22,"routeNames"],[103,41,140,52],[104,0,140,52],[104,12,140,34,"routeParamList"],[104,26,140,52],[104,35,140,34,"routeParamList"],[104,49,140,52],[105,0,141,6],[105,12,141,12,"index"],[105,17,141,17],[105,20,142,8,"initialRouteName"],[105,36,142,24],[105,41,142,29,"undefined"],[105,50,142,8],[105,54,142,42,"routeNames"],[105,64,142,52],[105,65,142,53,"includes"],[105,73,142,42],[105,74,142,62,"initialRouteName"],[105,90,142,42],[105,91,142,8],[105,94,143,12,"routeNames"],[105,104,143,22],[105,105,143,23,"indexOf"],[105,112,143,12],[105,113,143,31,"initialRouteName"],[105,129,143,12],[105,130,142,8],[105,133,144,12],[105,134,141,6],[106,0,146,6],[106,12,146,12,"routes"],[106,18,146,18],[106,21,146,21,"routeNames"],[106,31,146,31],[106,32,146,32,"map"],[106,35,146,21],[106,36,146,36],[106,46,146,37,"name"],[106,50,146,36],[107,0,146,36],[107,17,146,47],[108,0,147,8,"name"],[108,12,147,8,"name"],[108,16,147,12],[108,18,147,8,"name"],[108,22,146,47],[109,0,148,8,"key"],[109,12,148,8,"key"],[109,15,148,11],[109,17,148,16,"name"],[109,21,148,11],[109,30,148,24],[109,54,146,47],[110,0,149,8,"params"],[110,12,149,8,"params"],[110,18,149,14],[110,20,149,16,"routeParamList"],[110,34,149,30],[110,35,149,31,"name"],[110,39,149,30],[111,0,146,47],[111,11,146,36],[112,0,146,36],[112,9,146,21],[112,10,146,6],[113,0,152,6],[113,12,152,12,"history"],[113,19,152,19],[113,22,152,22,"getRouteHistory"],[113,37,152,37],[113,38,153,8,"routes"],[113,44,152,37],[113,46,154,8,"index"],[113,51,152,37],[113,53,155,8,"backBehavior"],[113,65,152,37],[113,67,156,8,"initialRouteName"],[113,83,152,37],[113,84,152,6],[114,0,159,6],[114,15,159,13],[115,0,160,8,"stale"],[115,10,160,8,"stale"],[115,15,160,13],[115,17,160,15],[115,22,159,13],[116,0,161,8,"type"],[116,10,161,8,"type"],[116,14,161,12],[116,16,161,14],[116,21,159,13],[117,0,162,8,"key"],[117,10,162,8,"key"],[117,13,162,11],[117,24,162,20],[117,48,159,13],[118,0,163,8,"index"],[118,10,163,8,"index"],[118,15,163,13],[118,17,163,8,"index"],[118,22,159,13],[119,0,164,8,"routeNames"],[119,10,164,8,"routeNames"],[119,20,164,18],[119,22,164,8,"routeNames"],[119,32,159,13],[120,0,165,8,"history"],[120,10,165,8,"history"],[120,17,165,15],[120,19,165,8,"history"],[120,26,159,13],[121,0,166,8,"routes"],[121,10,166,8,"routes"],[121,16,166,14],[121,18,166,8,"routes"],[122,0,159,13],[122,9,159,6],[123,0,168,5],[123,7,135,3],[124,0,170,4,"getRehydratedState"],[124,6,170,4,"getRehydratedState"],[124,24,135,3],[124,54,170,23,"partialState"],[124,66,135,3],[124,75,170,69],[125,0,170,69],[127,0,170,69],[127,12,170,39,"routeNames"],[127,22,170,69],[127,31,170,39,"routeNames"],[127,41,170,69],[128,0,170,69],[128,12,170,51,"routeParamList"],[128,26,170,69],[128,35,170,51,"routeParamList"],[128,49,170,69],[129,0,171,6],[129,12,171,10,"state"],[129,17,171,15],[129,20,171,18,"partialState"],[129,32,171,6],[131,0,173,6],[131,12,173,10,"state"],[131,17,173,15],[131,18,173,16,"stale"],[131,23,173,10],[131,28,173,26],[131,33,173,6],[131,35,173,33],[132,0,174,8],[132,17,174,15,"state"],[132,22,174,8],[133,0,175,7],[135,0,177,6],[135,12,177,12,"routes"],[135,18,177,18],[135,21,177,21,"routeNames"],[135,31,177,31],[135,32,177,32,"map"],[135,35,177,21],[135,36,177,36],[135,46,177,37,"name"],[135,50,177,36],[135,52,177,46],[136,0,178,8],[136,14,178,14,"route"],[136,19,178,19],[136,22,178,23,"state"],[136,27,178,22],[136,28,180,11,"routes"],[136,34,178,22],[136,35,180,18,"find"],[136,39,178,22],[136,40,180,23],[136,50,180,24,"r"],[136,51,180,23],[137,0,180,23],[137,19,180,30,"r"],[137,20,180,31],[137,21,180,32,"name"],[137,25,180,30],[137,30,180,41,"name"],[137,34,180,23],[138,0,180,23],[138,11,178,22],[138,12,178,8],[139,0,182,8],[139,49,183,13,"route"],[139,54,182,8],[140,0,184,10,"name"],[140,12,184,10,"name"],[140,16,184,14],[140,18,184,10,"name"],[140,22,182,8],[141,0,185,10,"key"],[141,12,185,10,"key"],[141,15,185,13],[141,17,186,12,"route"],[141,22,186,17],[141,26,186,21,"route"],[141,31,186,26],[141,32,186,27,"name"],[141,36,186,21],[141,41,186,36,"name"],[141,45,186,12],[141,49,186,44,"route"],[141,54,186,49],[141,55,186,50,"key"],[141,58,186,12],[141,61,187,16,"route"],[141,66,187,21],[141,67,187,22,"key"],[141,70,186,12],[141,73,188,19,"name"],[141,77,186,12],[141,86,188,27],[141,110,182,8],[142,0,189,10,"params"],[142,12,189,10,"params"],[142,18,189,16],[142,20,190,12,"routeParamList"],[142,34,190,26],[142,35,190,27,"name"],[142,39,190,26],[142,40,190,12],[142,45,190,37,"undefined"],[142,54,190,12],[142,89,192,21,"routeParamList"],[142,103,192,35],[142,104,192,36,"name"],[142,108,192,35],[142,109,190,12],[142,112,193,22,"route"],[142,117,193,27],[142,120,193,30,"route"],[142,125,193,35],[142,126,193,36,"params"],[142,132,193,27],[142,135,193,45,"undefined"],[142,144,190,12],[142,148,195,16,"route"],[142,153,195,21],[142,156,196,16,"route"],[142,161,196,21],[142,162,196,22,"params"],[142,168,195,21],[142,171,197,16,"undefined"],[143,0,182,8],[144,0,199,7],[144,9,177,21],[144,10,177,6],[145,0,201,6],[145,12,201,12,"index"],[145,17,201,17],[145,20,201,20,"Math"],[145,24,201,24],[145,25,201,25,"min"],[145,28,201,20],[145,29,202,8,"Math"],[145,33,202,12],[145,34,202,13,"max"],[145,37,202,8],[145,38,202,17,"routeNames"],[145,48,202,27],[145,49,202,28,"indexOf"],[145,56,202,17],[145,74,202,36,"state"],[145,79,202,41],[145,80,202,42,"routes"],[145,86,202,36],[145,103,202,49,"state"],[145,108,202,36],[145,128,202,49,"state"],[145,133,202,54],[145,134,202,56,"index"],[145,139,202,36],[145,166,202,65],[145,167,202,36],[145,168,202,17],[145,189,202,36],[145,203,202,69,"name"],[145,207,202,17],[145,208,202,8],[145,210,202,76],[145,211,202,8],[145,212,201,20],[145,214,203,8,"routes"],[145,220,203,14],[145,221,203,15,"length"],[145,227,203,8],[145,230,203,24],[145,231,201,20],[145,232,201,6],[146,0,206,6],[146,12,206,12,"history"],[146,19,206,19],[146,65,207,8,"state"],[146,70,207,13],[146,71,207,14,"history"],[146,78,206,19],[146,99,207,8],[146,114,207,23,"filter"],[146,120,207,8],[146,121,207,30],[146,131,207,31,"it"],[146,133,207,30],[147,0,207,30],[147,17,207,38,"routes"],[147,23,207,44],[147,24,207,45,"find"],[147,28,207,38],[147,29,207,50],[147,39,207,51,"r"],[147,40,207,50],[148,0,207,50],[148,19,207,57,"r"],[148,20,207,58],[148,21,207,59,"key"],[148,24,207,57],[148,29,207,67,"it"],[148,31,207,69],[148,32,207,70,"key"],[148,35,207,50],[149,0,207,50],[149,11,207,38],[149,12,207,30],[150,0,207,30],[150,9,207,8],[150,10,206,19],[150,46,208,8],[150,48,206,6],[151,0,210,6],[151,15,210,13,"changeIndex"],[151,26,210,24],[151,27,211,8],[152,0,212,10,"stale"],[152,10,212,10,"stale"],[152,15,212,15],[152,17,212,17],[152,22,211,8],[153,0,213,10,"type"],[153,10,213,10,"type"],[153,14,213,14],[153,16,213,16],[153,21,211,8],[154,0,214,10,"key"],[154,10,214,10,"key"],[154,13,214,13],[154,24,214,22],[154,48,211,8],[155,0,215,10,"index"],[155,10,215,10,"index"],[155,15,215,15],[155,17,215,10,"index"],[155,22,211,8],[156,0,216,10,"routeNames"],[156,10,216,10,"routeNames"],[156,20,216,20],[156,22,216,10,"routeNames"],[156,32,211,8],[157,0,217,10,"history"],[157,10,217,10,"history"],[157,17,217,17],[157,19,217,10,"history"],[157,26,211,8],[158,0,218,10,"routes"],[158,10,218,10,"routes"],[158,16,218,16],[158,18,218,10,"routes"],[159,0,211,8],[159,9,210,24],[159,11,220,8,"index"],[159,16,210,24],[159,18,221,8,"backBehavior"],[159,30,210,24],[159,32,222,8,"initialRouteName"],[159,48,210,24],[159,49,210,6],[160,0,224,5],[160,7,135,3],[161,0,226,4,"getStateForRouteNamesChange"],[161,6,226,4,"getStateForRouteNamesChange"],[161,33,135,3],[161,72,226,32,"state"],[161,77,135,3],[161,86,226,71],[162,0,226,71],[162,12,226,41,"routeNames"],[162,22,226,71],[162,31,226,41,"routeNames"],[162,41,226,71],[163,0,226,71],[163,12,226,53,"routeParamList"],[163,26,226,71],[163,35,226,53,"routeParamList"],[163,49,226,71],[164,0,227,6],[164,12,227,12,"routes"],[164,18,227,18],[164,21,227,21,"routeNames"],[164,31,227,31],[164,32,227,32,"map"],[164,35,227,21],[164,36,228,8],[164,46,228,9,"name"],[164,50,228,8],[165,0,228,8],[165,17,229,10,"state"],[165,22,229,15],[165,23,229,16,"routes"],[165,29,229,10],[165,30,229,23,"find"],[165,34,229,10],[165,35,229,28],[165,45,229,29,"r"],[165,46,229,28],[166,0,229,28],[166,19,229,35,"r"],[166,20,229,36],[166,21,229,37,"name"],[166,25,229,35],[166,30,229,46,"name"],[166,34,229,28],[167,0,229,28],[167,11,229,10],[167,16,229,55],[168,0,230,12,"name"],[168,12,230,12,"name"],[168,16,230,16],[168,18,230,12,"name"],[168,22,229,55],[169,0,231,12,"key"],[169,12,231,12,"key"],[169,15,231,15],[169,17,231,20,"name"],[169,21,231,15],[169,30,231,28],[169,54,229,55],[170,0,232,12,"params"],[170,12,232,12,"params"],[170,18,232,18],[170,20,232,20,"routeParamList"],[170,34,232,34],[170,35,232,35,"name"],[170,39,232,34],[171,0,229,55],[171,11,228,8],[172,0,228,8],[172,9,227,21],[172,10,227,6],[173,0,236,6],[173,12,236,12,"index"],[173,17,236,17],[173,20,236,20,"Math"],[173,24,236,24],[173,25,236,25,"max"],[173,28,236,20],[173,29,237,8],[173,30,236,20],[173,32,238,8,"routeNames"],[173,42,238,18],[173,43,238,19,"indexOf"],[173,50,238,8],[173,51,238,27,"state"],[173,56,238,32],[173,57,238,33,"routes"],[173,63,238,27],[173,64,238,40,"state"],[173,69,238,45],[173,70,238,46,"index"],[173,75,238,27],[173,77,238,53,"name"],[173,81,238,8],[173,82,236,20],[173,83,236,6],[174,0,241,6],[174,12,241,10,"history"],[174,19,241,17],[174,22,241,20,"state"],[174,27,241,25],[174,28,241,26,"history"],[174,35,241,20],[174,36,241,34,"filter"],[174,42,241,20],[174,43,243,8],[174,53,243,9,"it"],[174,55,243,8],[175,0,243,8],[175,17,243,16,"it"],[175,19,243,18],[175,20,243,19,"type"],[175,24,243,16],[175,29,243,28],[175,36,243,16],[175,40,243,39,"routes"],[175,46,243,45],[175,47,243,46,"find"],[175,51,243,39],[175,52,243,51],[175,62,243,52,"r"],[175,63,243,51],[176,0,243,51],[176,19,243,58,"r"],[176,20,243,59],[176,21,243,60,"key"],[176,24,243,58],[176,29,243,68,"it"],[176,31,243,70],[176,32,243,71,"key"],[176,35,243,51],[177,0,243,51],[177,11,243,39],[177,12,243,8],[178,0,243,8],[178,9,241,20],[178,10,241,6],[180,0,246,6],[180,12,246,10],[180,13,246,11,"history"],[180,20,246,18],[180,21,246,19,"length"],[180,27,246,6],[180,29,246,27],[181,0,247,8,"history"],[181,10,247,8,"history"],[181,17,247,15],[181,20,247,18,"getRouteHistory"],[181,35,247,33],[181,36,248,10,"routes"],[181,42,247,33],[181,44,249,10,"index"],[181,49,247,33],[181,51,250,10,"backBehavior"],[181,63,247,33],[181,65,251,10,"initialRouteName"],[181,81,247,33],[181,82,247,8],[182,0,253,7],[184,0,255,6],[184,47,256,11,"state"],[184,52,255,6],[185,0,257,8,"history"],[185,10,257,8,"history"],[185,17,257,15],[185,19,257,8,"history"],[185,26,255,6],[186,0,258,8,"routeNames"],[186,10,258,8,"routeNames"],[186,20,258,18],[186,22,258,8,"routeNames"],[186,32,255,6],[187,0,259,8,"routes"],[187,10,259,8,"routes"],[187,16,259,14],[187,18,259,8,"routes"],[187,24,255,6],[188,0,260,8,"index"],[188,10,260,8,"index"],[188,15,260,13],[188,17,260,8,"index"],[189,0,255,6],[190,0,262,5],[190,7,135,3],[191,0,264,4,"getStateForRouteFocus"],[191,6,264,4,"getStateForRouteFocus"],[191,27,135,3],[191,60,264,26,"state"],[191,65,135,3],[191,67,264,33,"key"],[191,70,135,3],[191,72,264,38],[192,0,265,6],[192,12,265,12,"index"],[192,17,265,17],[192,20,265,20,"state"],[192,25,265,25],[192,26,265,26,"routes"],[192,32,265,20],[192,33,265,33,"findIndex"],[192,42,265,20],[192,43,265,43],[192,53,265,44,"r"],[192,54,265,43],[193,0,265,43],[193,17,265,50,"r"],[193,18,265,51],[193,19,265,52,"key"],[193,22,265,50],[193,27,265,60,"key"],[193,30,265,43],[194,0,265,43],[194,9,265,20],[194,10,265,6],[196,0,267,6],[196,12,267,10,"index"],[196,17,267,15],[196,22,267,20],[196,23,267,21],[196,24,267,10],[196,28,267,26,"index"],[196,33,267,31],[196,38,267,36,"state"],[196,43,267,41],[196,44,267,42,"index"],[196,49,267,6],[196,51,267,49],[197,0,268,8],[197,17,268,15,"state"],[197,22,268,8],[198,0,269,7],[200,0,271,6],[200,15,271,13,"changeIndex"],[200,26,271,24],[200,27,271,25,"state"],[200,32,271,24],[200,34,271,32,"index"],[200,39,271,24],[200,41,271,39,"backBehavior"],[200,53,271,24],[200,55,271,53,"initialRouteName"],[200,71,271,24],[200,72,271,6],[201,0,272,5],[201,7,135,3],[202,0,274,4,"getStateForAction"],[202,6,274,4,"getStateForAction"],[202,23,135,3],[202,52,274,22,"state"],[202,57,135,3],[202,59,274,29,"action"],[202,65,135,3],[202,74,274,57],[203,0,274,57],[203,12,274,39,"routeParamList"],[203,26,274,57],[203,35,274,39,"routeParamList"],[203,49,274,57],[205,0,275,6],[205,16,275,14,"action"],[205,22,275,20],[205,23,275,21,"type"],[205,27,275,6],[206,0,276,8],[206,15,276,13],[206,24,276,8],[207,0,277,8],[207,15,277,13],[207,25,277,8],[208,0,277,25],[209,0,278,10],[209,18,278,14,"index"],[209,23,278,19],[209,26,278,22],[209,27,278,23],[209,28,278,10],[211,0,280,10],[211,18,280,14,"action"],[211,24,280,20],[211,25,280,21,"type"],[211,29,280,14],[211,34,280,30],[211,44,280,14],[211,48,280,44,"action"],[211,54,280,50],[211,55,280,51,"payload"],[211,62,280,44],[211,63,280,59,"key"],[211,66,280,10],[211,68,280,64],[212,0,281,12,"index"],[212,16,281,12,"index"],[212,21,281,17],[212,24,281,20,"state"],[212,29,281,25],[212,30,281,26,"routes"],[212,36,281,20],[212,37,281,33,"findIndex"],[212,46,281,20],[212,47,282,14],[212,57,282,15,"route"],[212,62,282,14],[213,0,282,14],[213,25,282,25,"route"],[213,30,282,30],[213,31,282,31,"key"],[213,34,282,25],[213,39,282,39,"action"],[213,45,282,45],[213,46,282,46,"payload"],[213,53,282,39],[213,54,282,54,"key"],[213,57,282,14],[214,0,282,14],[214,17,281,20],[214,18,281,12],[215,0,284,11],[215,15,280,10],[215,21,284,17],[216,0,285,12,"index"],[216,16,285,12,"index"],[216,21,285,17],[216,24,285,20,"state"],[216,29,285,25],[216,30,285,26,"routes"],[216,36,285,20],[216,37,285,33,"findIndex"],[216,46,285,20],[216,47,286,14],[216,57,286,15,"route"],[216,62,286,14],[217,0,286,14],[217,25,286,25,"route"],[217,30,286,30],[217,31,286,31,"name"],[217,35,286,25],[217,40,286,40,"action"],[217,46,286,46],[217,47,286,47,"payload"],[217,54,286,40],[217,55,286,55,"name"],[217,59,286,14],[218,0,286,14],[218,17,285,20],[218,18,285,12],[219,0,288,11],[221,0,290,10],[221,18,290,14,"index"],[221,23,290,19],[221,28,290,24],[221,29,290,25],[221,30,290,10],[221,32,290,28],[222,0,291,12],[222,23,291,19],[222,27,291,12],[223,0,292,11],[225,0,294,10],[225,21,294,17,"changeIndex"],[225,32,294,28],[225,65,296,17,"state"],[225,70,294,28],[226,0,297,14,"routes"],[226,16,297,14,"routes"],[226,22,297,20],[226,24,298,16,"action"],[226,30,298,22],[226,31,298,23,"payload"],[226,38,298,16],[226,39,298,31,"params"],[226,45,298,16],[226,50,298,42,"undefined"],[226,59,298,16],[226,62,299,20,"state"],[226,67,299,25],[226,68,299,26,"routes"],[226,74,299,20],[226,75,299,33,"map"],[226,78,299,20],[226,79,299,37],[226,89,299,38,"route"],[226,94,299,37],[226,96,299,45,"i"],[226,97,299,37],[226,99,299,51],[227,0,300,22],[227,22,300,26,"i"],[227,23,300,27],[227,28,300,32,"index"],[227,33,300,22],[227,35,300,39],[228,0,301,24],[228,27,301,31,"route"],[228,32,301,24],[229,0,302,23],[231,0,304,22],[231,22,304,26,"params"],[231,28,304,22],[233,0,306,22],[233,22,307,24,"action"],[233,28,307,30],[233,29,307,31,"type"],[233,33,307,24],[233,38,307,40],[233,48,307,24],[233,52,308,24,"action"],[233,58,308,30],[233,59,308,31,"payload"],[233,66,308,24],[233,67,308,39,"merge"],[233,72,308,24],[233,77,308,49],[233,82,306,22],[233,84,309,24],[234,0,310,24,"params"],[234,20,310,24,"params"],[234,26,310,30],[234,29,311,26,"routeParamList"],[234,43,311,40],[234,44,311,41,"route"],[234,49,311,46],[234,50,311,47,"name"],[234,54,311,40],[234,55,311,26],[234,60,311,57,"undefined"],[234,69,311,26],[234,104,313,35,"routeParamList"],[234,118,313,49],[234,119,313,50,"route"],[234,124,313,55],[234,125,313,56,"name"],[234,129,313,49],[234,130,311,26],[234,133,314,35,"action"],[234,139,314,41],[234,140,314,42,"payload"],[234,147,314,35],[234,148,314,50,"params"],[234,154,311,26],[234,158,316,30,"action"],[234,164,316,36],[234,165,316,37,"payload"],[234,172,316,30],[234,173,316,45,"params"],[234,179,310,24],[235,0,317,23],[235,19,306,22],[235,25,317,29],[236,0,318,24,"params"],[236,20,318,24,"params"],[236,26,318,30],[236,29,318,33,"action"],[236,35,318,39],[236,36,318,40,"payload"],[236,43,318,33],[236,44,318,48,"params"],[236,50,318,33],[236,85,320,33,"route"],[236,90,320,38],[236,91,320,39,"params"],[236,97,318,33],[236,100,321,33,"action"],[236,106,321,39],[236,107,321,40,"payload"],[236,114,321,33],[236,115,321,48,"params"],[236,121,318,33],[236,125,323,28,"route"],[236,130,323,33],[236,131,323,34,"params"],[236,137,318,24],[237,0,324,23],[239,0,326,22],[239,25,326,29,"params"],[239,31,326,35],[239,36,326,40,"route"],[239,41,326,45],[239,42,326,46,"params"],[239,48,326,29],[239,83,327,31,"route"],[239,88,326,29],[240,0,327,38,"params"],[240,20,327,38,"params"],[240,26,327,44],[240,28,327,38,"params"],[241,0,326,29],[241,23,328,26,"route"],[241,28,326,22],[242,0,329,21],[242,17,299,20],[242,18,298,16],[242,21,330,20,"state"],[242,26,330,25],[242,27,330,26,"routes"],[243,0,294,28],[243,18,332,12,"index"],[243,23,294,28],[243,25,333,12,"backBehavior"],[243,37,294,28],[243,39,334,12,"initialRouteName"],[243,55,294,28],[243,56,294,10],[244,0,336,9],[246,0,338,8],[246,15,338,13],[246,24,338,8],[247,0,338,24],[248,0,339,10],[248,18,339,14,"state"],[248,23,339,19],[248,24,339,20,"history"],[248,31,339,14],[248,32,339,28,"length"],[248,38,339,14],[248,43,339,39],[248,44,339,10],[248,46,339,42],[249,0,340,12],[249,23,340,19],[249,27,340,12],[250,0,341,11],[252,0,343,10],[252,18,343,16,"previousKey"],[252,29,343,27],[252,32,343,30,"state"],[252,37,343,35],[252,38,343,36,"history"],[252,45,343,30],[252,46,343,44,"state"],[252,51,343,49],[252,52,343,50,"history"],[252,59,343,44],[252,60,343,58,"length"],[252,66,343,44],[252,69,343,67],[252,70,343,30],[252,72,343,70,"key"],[252,75,343,10],[254,0,344,10],[254,18,344,16,"index"],[254,24,344,21],[254,27,344,24,"state"],[254,32,344,29],[254,33,344,30,"routes"],[254,39,344,24],[254,40,344,37,"findIndex"],[254,49,344,24],[254,50,345,12],[254,60,345,13,"route"],[254,65,345,12],[255,0,345,12],[255,23,345,23,"route"],[255,28,345,28],[255,29,345,29,"key"],[255,32,345,23],[255,37,345,37,"previousKey"],[255,48,345,12],[256,0,345,12],[256,15,344,24],[256,16,344,10],[258,0,348,10],[258,18,348,14,"index"],[258,24,348,19],[258,29,348,24],[258,30,348,25],[258,31,348,10],[258,33,348,28],[259,0,349,12],[259,23,349,19],[259,27,349,12],[260,0,350,11],[262,0,352,10],[262,53,353,15,"state"],[262,58,352,10],[263,0,354,12,"history"],[263,16,354,12,"history"],[263,23,354,19],[263,25,354,21,"state"],[263,30,354,26],[263,31,354,27,"history"],[263,38,354,21],[263,39,354,35,"slice"],[263,44,354,21],[263,45,354,41],[263,46,354,21],[263,48,354,44],[263,49,354,45],[263,50,354,21],[263,51,352,10],[264,0,355,12,"index"],[264,16,355,12,"index"],[264,21,355,17],[264,23,355,12,"index"],[265,0,352,10],[266,0,357,9],[268,0,359,8],[269,0,360,10],[269,19,360,17,"BaseRouter"],[269,39,360,28,"getStateForAction"],[269,56,360,17],[269,57,360,46,"state"],[269,62,360,17],[269,64,360,53,"action"],[269,70,360,17],[269,71,360,10],[270,0,275,6],[271,0,362,5],[271,7,135,3],[272,0,364,4,"shouldActionChangeFocus"],[272,6,364,4,"shouldActionChangeFocus"],[272,29,135,3],[272,64,364,28,"action"],[272,70,135,3],[272,72,364,36],[273,0,365,6],[273,15,365,13,"action"],[273,21,365,19],[273,22,365,20,"type"],[273,26,365,13],[273,31,365,29],[273,41,365,6],[274,0,366,5],[274,7,135,3],[275,0,368,4,"actionCreators"],[275,6,368,4,"actionCreators"],[275,20,368,18],[275,22,368,20,"TabActions"],[276,0,135,3],[276,6,132,2],[278,0,371,2],[278,11,371,9,"router"],[278,17,371,2],[279,0,372,1]],"functionMap":{"names":["<global>","TabActions.jumpTo","getRouteHistory","routes.findIndex$argument_0","changeIndex","state.history.filter$argument_0","TabRouter","router.getInitialState","routeNames.map$argument_0","router.getRehydratedState","routes.find$argument_0","<anonymous>","router.getStateForRouteNamesChange","state.routes.find$argument_0","router.getStateForRouteFocus","state.routes.findIndex$argument_0","router.getStateForAction","state.routes.map$argument_0","router.shouldActionChangeFocus"],"mappings":"AAA;ECwD;GDE;wBEG;QCiB,0CD;CFiB;oBIE;cCY,6DD;CJgB;eME;ICY;oCCM;QDI;KDkB;IGE;oCDO;uBEG,sBF;OCmB;8BEQ,oBD,uBC,CF;KHiB;IME;QJE;4BKC,sBL;WII;QPU,2CK,uBL,CO;KNmB;IQE;2CCC,oBD;KRO;IUE;cDQ,2CC;cDI,6CC;qCCa;qBD8B;YDgB,oCC;KViB;IYE;KZE;CNM"}},"type":"js/module"}]}