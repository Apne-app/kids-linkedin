{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"nanoid/non-secure","data":{"isAsync":false}},{"name":"./BaseRouter","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = TabRouter;\n  exports.TabActions = void 0;\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/defineProperty\"));\n\n  var _nonSecure = _$$_REQUIRE(_dependencyMap[2], \"nanoid/non-secure\");\n\n  var _BaseRouter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"./BaseRouter\"));\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  var TYPE_ROUTE = 'route';\n  var TabActions = {\n    jumpTo: function jumpTo(name, params) {\n      return {\n        type: 'JUMP_TO',\n        payload: {\n          name: name,\n          params: params\n        }\n      };\n    }\n  };\n  exports.TabActions = TabActions;\n\n  var getRouteHistory = function getRouteHistory(routes, index, backBehavior, initialRouteName) {\n    var history = [{\n      type: TYPE_ROUTE,\n      key: routes[index].key\n    }];\n    var initialRouteIndex;\n\n    switch (backBehavior) {\n      case 'order':\n        for (var i = index; i > 0; i--) {\n          history.unshift({\n            type: TYPE_ROUTE,\n            key: routes[i - 1].key\n          });\n        }\n\n        break;\n\n      case 'initialRoute':\n        initialRouteIndex = routes.findIndex(function (route) {\n          return route.name === initialRouteName;\n        });\n        initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n        if (initialRouteIndex !== index) {\n          history.unshift({\n            type: TYPE_ROUTE,\n            key: routes[initialRouteIndex].key\n          });\n        }\n\n        break;\n\n      case 'history':\n        break;\n    }\n\n    return history;\n  };\n\n  var changeIndex = function changeIndex(state, index, backBehavior, initialRouteName) {\n    var history;\n\n    if (backBehavior === 'history') {\n      var currentKey = state.routes[index].key;\n      history = state.history.filter(function (it) {\n        return it.type === 'route' ? it.key !== currentKey : false;\n      }).concat({\n        type: TYPE_ROUTE,\n        key: currentKey\n      });\n    } else {\n      history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n    }\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      index: index,\n      history: history\n    });\n  };\n\n  function TabRouter(_ref) {\n    var initialRouteName = _ref.initialRouteName,\n        _ref$backBehavior = _ref.backBehavior,\n        backBehavior = _ref$backBehavior === void 0 ? 'history' : _ref$backBehavior;\n\n    var router = _objectSpread(_objectSpread({}, _BaseRouter.default), {}, {\n      type: 'tab',\n      getInitialState: function getInitialState(_ref2) {\n        var routeNames = _ref2.routeNames,\n            routeParamList = _ref2.routeParamList;\n        var index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n        var routes = routeNames.map(function (name) {\n          return {\n            name: name,\n            key: name + \"-\" + (0, _nonSecure.nanoid)(),\n            params: routeParamList[name]\n          };\n        });\n        var history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n        return {\n          stale: false,\n          type: 'tab',\n          key: \"tab-\" + (0, _nonSecure.nanoid)(),\n          index: index,\n          routeNames: routeNames,\n          history: history,\n          routes: routes\n        };\n      },\n      getRehydratedState: function getRehydratedState(partialState, _ref3) {\n        var _state$routes, _state$index, _state$history$filter, _state$history;\n\n        var routeNames = _ref3.routeNames,\n            routeParamList = _ref3.routeParamList;\n        var state = partialState;\n\n        if (state.stale === false) {\n          return state;\n        }\n\n        var routes = routeNames.map(function (name) {\n          var route = state.routes.find(function (r) {\n            return r.name === name;\n          });\n          return _objectSpread(_objectSpread({}, route), {}, {\n            name: name,\n            key: route && route.name === name && route.key ? route.key : name + \"-\" + (0, _nonSecure.nanoid)(),\n            params: routeParamList[name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[name]), route ? route.params : undefined) : route ? route.params : undefined\n          });\n        });\n        var index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(_state$index = state == null ? void 0 : state.index) != null ? _state$index : 0]) == null ? void 0 : _state$routes.name), 0), routes.length - 1);\n        var history = (_state$history$filter = (_state$history = state.history) == null ? void 0 : _state$history.filter(function (it) {\n          return routes.find(function (r) {\n            return r.key === it.key;\n          });\n        })) != null ? _state$history$filter : [];\n        return changeIndex({\n          stale: false,\n          type: 'tab',\n          key: \"tab-\" + (0, _nonSecure.nanoid)(),\n          index: index,\n          routeNames: routeNames,\n          history: history,\n          routes: routes\n        }, index, backBehavior, initialRouteName);\n      },\n      getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref4) {\n        var routeNames = _ref4.routeNames,\n            routeParamList = _ref4.routeParamList;\n        var routes = routeNames.map(function (name) {\n          return state.routes.find(function (r) {\n            return r.name === name;\n          }) || {\n            name: name,\n            key: name + \"-\" + (0, _nonSecure.nanoid)(),\n            params: routeParamList[name]\n          };\n        });\n        var index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n        var history = state.history.filter(function (it) {\n          return it.type !== 'route' || routes.find(function (r) {\n            return r.key === it.key;\n          });\n        });\n\n        if (!history.length) {\n          history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          history: history,\n          routeNames: routeNames,\n          routes: routes,\n          index: index\n        });\n      },\n      getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n        var index = state.routes.findIndex(function (r) {\n          return r.key === key;\n        });\n\n        if (index === -1 || index === state.index) {\n          return state;\n        }\n\n        return changeIndex(state, index, backBehavior, initialRouteName);\n      },\n      getStateForAction: function getStateForAction(state, action) {\n        switch (action.type) {\n          case 'JUMP_TO':\n          case 'NAVIGATE':\n            {\n              var index = -1;\n\n              if (action.type === 'NAVIGATE' && action.payload.key) {\n                index = state.routes.findIndex(function (route) {\n                  return route.key === action.payload.key;\n                });\n              } else {\n                index = state.routes.findIndex(function (route) {\n                  return route.name === action.payload.name;\n                });\n              }\n\n              if (index === -1) {\n                return null;\n              }\n\n              return changeIndex(_objectSpread(_objectSpread({}, state), {}, {\n                routes: action.payload.params !== undefined ? state.routes.map(function (route, i) {\n                  return i === index ? _objectSpread(_objectSpread({}, route), {}, {\n                    params: _objectSpread(_objectSpread({}, route.params), action.payload.params)\n                  }) : route;\n                }) : state.routes\n              }), index, backBehavior, initialRouteName);\n            }\n\n          case 'GO_BACK':\n            {\n              if (state.history.length === 1) {\n                return null;\n              }\n\n              var previousKey = state.history[state.history.length - 2].key;\n\n              var _index = state.routes.findIndex(function (route) {\n                return route.key === previousKey;\n              });\n\n              if (_index === -1) {\n                return null;\n              }\n\n              return _objectSpread(_objectSpread({}, state), {}, {\n                history: state.history.slice(0, -1),\n                index: _index\n              });\n            }\n\n          default:\n            return _BaseRouter.default.getStateForAction(state, action);\n        }\n      },\n      shouldActionChangeFocus: function shouldActionChangeFocus(action) {\n        return action.type === 'NAVIGATE';\n      },\n      actionCreators: TabActions\n    });\n\n    return router;\n  }\n});","lineCount":266,"map":[[12,0,1,0],[14,0,2,0],[20,0,51,0],[20,6,51,6,"TYPE_ROUTE"],[20,16,51,16],[20,19,51,19],[20,26,51,0],[21,0,53,7],[21,6,53,13,"TabActions"],[21,16,53,23],[21,19,53,26],[22,0,54,2,"jumpTo"],[22,4,54,2,"jumpTo"],[22,10,53,26],[22,28,54,9,"name"],[22,32,53,26],[22,34,54,23,"params"],[22,40,53,26],[22,42,54,55],[23,0,55,4],[23,13,55,11],[24,0,55,13,"type"],[24,8,55,13,"type"],[24,12,55,17],[24,14,55,19],[24,23,55,11],[25,0,55,30,"payload"],[25,8,55,30,"payload"],[25,15,55,37],[25,17,55,39],[26,0,55,41,"name"],[26,10,55,41,"name"],[26,14,55,45],[26,16,55,41,"name"],[26,20,55,39],[27,0,55,47,"params"],[27,10,55,47,"params"],[27,16,55,53],[27,18,55,47,"params"],[28,0,55,39],[29,0,55,11],[29,7,55,4],[30,0,56,3],[31,0,53,26],[31,3,53,7],[34,0,59,0],[34,6,59,6,"getRouteHistory"],[34,21,59,21],[34,24,59,24],[34,33,59,6,"getRouteHistory"],[34,48,59,24],[34,49,60,2,"routes"],[34,55,59,24],[34,57,61,2,"index"],[34,62,59,24],[34,64,62,2,"backBehavior"],[34,76,59,24],[34,78,63,2,"initialRouteName"],[34,94,59,24],[34,96,64,5],[35,0,65,2],[35,8,65,8,"history"],[35,15,65,15],[35,18,65,18],[35,19,65,19],[36,0,65,21,"type"],[36,6,65,21,"type"],[36,10,65,25],[36,12,65,27,"TYPE_ROUTE"],[36,22,65,19],[37,0,65,39,"key"],[37,6,65,39,"key"],[37,9,65,42],[37,11,65,44,"routes"],[37,17,65,50],[37,18,65,51,"index"],[37,23,65,50],[37,24,65,44],[37,25,65,58,"key"],[38,0,65,19],[38,5,65,18],[38,6,65,2],[39,0,66,2],[39,8,66,6,"initialRouteIndex"],[39,25,66,2],[41,0,68,2],[41,12,68,10,"backBehavior"],[41,24,68,2],[42,0,69,4],[42,11,69,9],[42,18,69,4],[43,0,70,6],[43,13,70,11],[43,17,70,15,"i"],[43,18,70,16],[43,21,70,19,"index"],[43,26,70,6],[43,28,70,26,"i"],[43,29,70,27],[43,32,70,30],[43,33,70,6],[43,35,70,33,"i"],[43,36,70,34],[43,38,70,6],[43,40,70,38],[44,0,71,8,"history"],[44,10,71,8,"history"],[44,17,71,15],[44,18,71,16,"unshift"],[44,25,71,8],[44,26,71,24],[45,0,71,26,"type"],[45,12,71,26,"type"],[45,16,71,30],[45,18,71,32,"TYPE_ROUTE"],[45,28,71,24],[46,0,71,44,"key"],[46,12,71,44,"key"],[46,15,71,47],[46,17,71,49,"routes"],[46,23,71,55],[46,24,71,56,"i"],[46,25,71,57],[46,28,71,60],[46,29,71,55],[46,30,71,49],[46,31,71,63,"key"],[47,0,71,24],[47,11,71,8],[48,0,72,7],[50,0,73,6],[52,0,74,4],[52,11,74,9],[52,25,74,4],[53,0,75,6,"initialRouteIndex"],[53,8,75,6,"initialRouteIndex"],[53,25,75,23],[53,28,75,26,"routes"],[53,34,75,32],[53,35,75,33,"findIndex"],[53,44,75,26],[53,45,76,8],[53,55,76,9,"route"],[53,60,76,8],[54,0,76,8],[54,17,76,19,"route"],[54,22,76,24],[54,23,76,25,"name"],[54,27,76,19],[54,32,76,34,"initialRouteName"],[54,48,76,8],[55,0,76,8],[55,9,75,26],[55,10,75,6],[56,0,78,6,"initialRouteIndex"],[56,8,78,6,"initialRouteIndex"],[56,25,78,23],[56,28,78,26,"initialRouteIndex"],[56,45,78,43],[56,50,78,48],[56,51,78,49],[56,52,78,26],[56,55,78,53],[56,56,78,26],[56,59,78,57,"initialRouteIndex"],[56,76,78,6],[58,0,80,6],[58,12,80,10,"initialRouteIndex"],[58,29,80,27],[58,34,80,32,"index"],[58,39,80,6],[58,41,80,39],[59,0,81,8,"history"],[59,10,81,8,"history"],[59,17,81,15],[59,18,81,16,"unshift"],[59,25,81,8],[59,26,81,24],[60,0,82,10,"type"],[60,12,82,10,"type"],[60,16,82,14],[60,18,82,16,"TYPE_ROUTE"],[60,28,81,24],[61,0,83,10,"key"],[61,12,83,10,"key"],[61,15,83,13],[61,17,83,15,"routes"],[61,23,83,21],[61,24,83,22,"initialRouteIndex"],[61,41,83,21],[61,42,83,15],[61,43,83,41,"key"],[62,0,81,24],[62,11,81,8],[63,0,85,7],[65,0,86,6],[67,0,87,4],[67,11,87,9],[67,20,87,4],[68,0,89,6],[69,0,68,2],[71,0,92,2],[71,11,92,9,"history"],[71,18,92,2],[72,0,93,1],[72,3,59,0],[74,0,95,0],[74,6,95,6,"changeIndex"],[74,17,95,17],[74,20,95,20],[74,29,95,6,"changeIndex"],[74,40,95,20],[74,41,96,2,"state"],[74,46,95,20],[74,48,97,2,"index"],[74,53,95,20],[74,55,98,2,"backBehavior"],[74,67,95,20],[74,69,99,2,"initialRouteName"],[74,85,95,20],[74,87,100,5],[75,0,101,2],[75,8,101,6,"history"],[75,15,101,2],[77,0,103,2],[77,8,103,6,"backBehavior"],[77,20,103,18],[77,25,103,23],[77,34,103,2],[77,36,103,34],[78,0,104,4],[78,10,104,10,"currentKey"],[78,20,104,20],[78,23,104,23,"state"],[78,28,104,28],[78,29,104,29,"routes"],[78,35,104,23],[78,36,104,36,"index"],[78,41,104,23],[78,43,104,43,"key"],[78,46,104,4],[79,0,106,4,"history"],[79,6,106,4,"history"],[79,13,106,11],[79,16,106,14,"state"],[79,21,106,19],[79,22,106,20,"history"],[79,29,106,14],[79,30,107,7,"filter"],[79,36,106,14],[79,37,107,14],[79,47,107,15,"it"],[79,49,107,14],[80,0,107,14],[80,15,107,23,"it"],[80,17,107,25],[80,18,107,26,"type"],[80,22,107,23],[80,27,107,35],[80,34,107,23],[80,37,107,45,"it"],[80,39,107,47],[80,40,107,48,"key"],[80,43,107,45],[80,48,107,56,"currentKey"],[80,58,107,23],[80,61,107,69],[80,66,107,14],[81,0,107,14],[81,7,106,14],[81,9,108,7,"concat"],[81,15,106,14],[81,16,108,14],[82,0,108,16,"type"],[82,8,108,16,"type"],[82,12,108,20],[82,14,108,22,"TYPE_ROUTE"],[82,24,108,14],[83,0,108,34,"key"],[83,8,108,34,"key"],[83,11,108,37],[83,13,108,39,"currentKey"],[84,0,108,14],[84,7,106,14],[84,8,106,4],[85,0,109,3],[85,5,103,2],[85,11,109,9],[86,0,110,4,"history"],[86,6,110,4,"history"],[86,13,110,11],[86,16,110,14,"getRouteHistory"],[86,31,110,29],[86,32,111,6,"state"],[86,37,111,11],[86,38,111,12,"routes"],[86,44,110,29],[86,46,112,6,"index"],[86,51,110,29],[86,53,113,6,"backBehavior"],[86,65,110,29],[86,67,114,6,"initialRouteName"],[86,83,110,29],[86,84,110,4],[87,0,116,3],[89,0,118,2],[89,43,119,7,"state"],[89,48,118,2],[90,0,120,4,"index"],[90,6,120,4,"index"],[90,11,120,9],[90,13,120,4,"index"],[90,18,118,2],[91,0,121,4,"history"],[91,6,121,4,"history"],[91,13,121,11],[91,15,121,4,"history"],[92,0,118,2],[93,0,123,1],[93,3,95,0],[95,0,125,15],[95,11,125,24,"TabRouter"],[95,20,125,15],[95,27,128,21],[96,0,128,21],[96,8,126,2,"initialRouteName"],[96,24,128,21],[96,32,126,2,"initialRouteName"],[96,48,128,21],[97,0,128,21],[97,33,127,2,"backBehavior"],[97,45,128,21],[98,0,128,21],[98,8,127,2,"backBehavior"],[98,20,128,21],[98,54,127,17],[98,63,128,21],[100,0,129,2],[100,8,129,8,"router"],[100,14,132,3],[100,49,133,7,"BaseRouter"],[100,68,132,3],[101,0,135,4,"type"],[101,6,135,4,"type"],[101,10,135,8],[101,12,135,10],[101,17,132,3],[102,0,137,4,"getInitialState"],[102,6,137,4,"getInitialState"],[102,21,132,3],[102,55,137,52],[103,0,137,52],[103,12,137,22,"routeNames"],[103,22,137,52],[103,31,137,22,"routeNames"],[103,41,137,52],[104,0,137,52],[104,12,137,34,"routeParamList"],[104,26,137,52],[104,35,137,34,"routeParamList"],[104,49,137,52],[105,0,138,6],[105,12,138,12,"index"],[105,17,138,17],[105,20,139,8,"initialRouteName"],[105,36,139,24],[105,41,139,29,"undefined"],[105,50,139,8],[105,54,139,42,"routeNames"],[105,64,139,52],[105,65,139,53,"includes"],[105,73,139,42],[105,74,139,62,"initialRouteName"],[105,90,139,42],[105,91,139,8],[105,94,140,12,"routeNames"],[105,104,140,22],[105,105,140,23,"indexOf"],[105,112,140,12],[105,113,140,31,"initialRouteName"],[105,129,140,12],[105,130,139,8],[105,133,141,12],[105,134,138,6],[106,0,143,6],[106,12,143,12,"routes"],[106,18,143,18],[106,21,143,21,"routeNames"],[106,31,143,31],[106,32,143,32,"map"],[106,35,143,21],[106,36,143,36],[106,46,143,37,"name"],[106,50,143,36],[107,0,143,36],[107,17,143,47],[108,0,144,8,"name"],[108,12,144,8,"name"],[108,16,144,12],[108,18,144,8,"name"],[108,22,143,47],[109,0,145,8,"key"],[109,12,145,8,"key"],[109,15,145,11],[109,17,145,16,"name"],[109,21,145,11],[109,30,145,24],[109,54,143,47],[110,0,146,8,"params"],[110,12,146,8,"params"],[110,18,146,14],[110,20,146,16,"routeParamList"],[110,34,146,30],[110,35,146,31,"name"],[110,39,146,30],[111,0,143,47],[111,11,143,36],[112,0,143,36],[112,9,143,21],[112,10,143,6],[113,0,149,6],[113,12,149,12,"history"],[113,19,149,19],[113,22,149,22,"getRouteHistory"],[113,37,149,37],[113,38,150,8,"routes"],[113,44,149,37],[113,46,151,8,"index"],[113,51,149,37],[113,53,152,8,"backBehavior"],[113,65,149,37],[113,67,153,8,"initialRouteName"],[113,83,149,37],[113,84,149,6],[114,0,156,6],[114,15,156,13],[115,0,157,8,"stale"],[115,10,157,8,"stale"],[115,15,157,13],[115,17,157,15],[115,22,156,13],[116,0,158,8,"type"],[116,10,158,8,"type"],[116,14,158,12],[116,16,158,14],[116,21,156,13],[117,0,159,8,"key"],[117,10,159,8,"key"],[117,13,159,11],[117,24,159,20],[117,48,156,13],[118,0,160,8,"index"],[118,10,160,8,"index"],[118,15,160,13],[118,17,160,8,"index"],[118,22,156,13],[119,0,161,8,"routeNames"],[119,10,161,8,"routeNames"],[119,20,161,18],[119,22,161,8,"routeNames"],[119,32,156,13],[120,0,162,8,"history"],[120,10,162,8,"history"],[120,17,162,15],[120,19,162,8,"history"],[120,26,156,13],[121,0,163,8,"routes"],[121,10,163,8,"routes"],[121,16,163,14],[121,18,163,8,"routes"],[122,0,156,13],[122,9,156,6],[123,0,165,5],[123,7,132,3],[124,0,167,4,"getRehydratedState"],[124,6,167,4,"getRehydratedState"],[124,24,132,3],[124,54,167,23,"partialState"],[124,66,132,3],[124,75,167,69],[125,0,167,69],[127,0,167,69],[127,12,167,39,"routeNames"],[127,22,167,69],[127,31,167,39,"routeNames"],[127,41,167,69],[128,0,167,69],[128,12,167,51,"routeParamList"],[128,26,167,69],[128,35,167,51,"routeParamList"],[128,49,167,69],[129,0,168,6],[129,12,168,10,"state"],[129,17,168,15],[129,20,168,18,"partialState"],[129,32,168,6],[131,0,170,6],[131,12,170,10,"state"],[131,17,170,15],[131,18,170,16,"stale"],[131,23,170,10],[131,28,170,26],[131,33,170,6],[131,35,170,33],[132,0,171,8],[132,17,171,15,"state"],[132,22,171,8],[133,0,172,7],[135,0,174,6],[135,12,174,12,"routes"],[135,18,174,18],[135,21,174,21,"routeNames"],[135,31,174,31],[135,32,174,32,"map"],[135,35,174,21],[135,36,174,36],[135,46,174,37,"name"],[135,50,174,36],[135,52,174,46],[136,0,175,8],[136,14,175,14,"route"],[136,19,175,19],[136,22,175,23,"state"],[136,27,175,22],[136,28,175,66,"routes"],[136,34,175,22],[136,35,175,73,"find"],[136,39,175,22],[136,40,176,10],[136,50,176,11,"r"],[136,51,176,10],[137,0,176,10],[137,19,176,17,"r"],[137,20,176,18],[137,21,176,19,"name"],[137,25,176,17],[137,30,176,28,"name"],[137,34,176,10],[138,0,176,10],[138,11,175,22],[138,12,175,8],[139,0,179,8],[139,49,180,13,"route"],[139,54,179,8],[140,0,181,10,"name"],[140,12,181,10,"name"],[140,16,181,14],[140,18,181,10,"name"],[140,22,179,8],[141,0,182,10,"key"],[141,12,182,10,"key"],[141,15,182,13],[141,17,183,12,"route"],[141,22,183,17],[141,26,183,21,"route"],[141,31,183,26],[141,32,183,27,"name"],[141,36,183,21],[141,41,183,36,"name"],[141,45,183,12],[141,49,183,44,"route"],[141,54,183,49],[141,55,183,50,"key"],[141,58,183,12],[141,61,184,16,"route"],[141,66,184,21],[141,67,184,22,"key"],[141,70,183,12],[141,73,185,19,"name"],[141,77,183,12],[141,86,185,27],[141,110,179,8],[142,0,186,10,"params"],[142,12,186,10,"params"],[142,18,186,16],[142,20,187,12,"routeParamList"],[142,34,187,26],[142,35,187,27,"name"],[142,39,187,26],[142,40,187,12],[142,45,187,37,"undefined"],[142,54,187,12],[142,89,189,21,"routeParamList"],[142,103,189,35],[142,104,189,36,"name"],[142,108,189,35],[142,109,187,12],[142,112,190,22,"route"],[142,117,190,27],[142,120,190,30,"route"],[142,125,190,35],[142,126,190,36,"params"],[142,132,190,27],[142,135,190,45,"undefined"],[142,144,187,12],[142,148,192,16,"route"],[142,153,192,21],[142,156,193,16,"route"],[142,161,193,21],[142,162,193,22,"params"],[142,168,192,21],[142,171,194,16,"undefined"],[143,0,179,8],[144,0,196,7],[144,9,174,21],[144,10,174,6],[145,0,198,6],[145,12,198,12,"index"],[145,17,198,17],[145,20,198,20,"Math"],[145,24,198,24],[145,25,198,25,"min"],[145,28,198,20],[145,29,199,8,"Math"],[145,33,199,12],[145,34,199,13,"max"],[145,37,199,8],[145,38,199,17,"routeNames"],[145,48,199,27],[145,49,199,28,"indexOf"],[145,56,199,17],[145,74,199,36,"state"],[145,79,199,41],[145,80,199,42,"routes"],[145,86,199,36],[145,103,199,49,"state"],[145,108,199,36],[145,128,199,49,"state"],[145,133,199,54],[145,134,199,56,"index"],[145,139,199,36],[145,166,199,65],[145,167,199,36],[145,168,199,17],[145,189,199,36],[145,203,199,69,"name"],[145,207,199,17],[145,208,199,8],[145,210,199,76],[145,211,199,8],[145,212,198,20],[145,214,200,8,"routes"],[145,220,200,14],[145,221,200,15,"length"],[145,227,200,8],[145,230,200,24],[145,231,198,20],[145,232,198,6],[146,0,203,6],[146,12,203,12,"history"],[146,19,203,19],[146,65,204,8,"state"],[146,70,204,13],[146,71,204,14,"history"],[146,78,203,19],[146,99,204,8],[146,114,204,23,"filter"],[146,120,204,8],[146,121,204,30],[146,131,204,31,"it"],[146,133,204,30],[147,0,204,30],[147,17,204,38,"routes"],[147,23,204,44],[147,24,204,45,"find"],[147,28,204,38],[147,29,204,50],[147,39,204,51,"r"],[147,40,204,50],[148,0,204,50],[148,19,204,57,"r"],[148,20,204,58],[148,21,204,59,"key"],[148,24,204,57],[148,29,204,67,"it"],[148,31,204,69],[148,32,204,70,"key"],[148,35,204,50],[149,0,204,50],[149,11,204,38],[149,12,204,30],[150,0,204,30],[150,9,204,8],[150,10,203,19],[150,46,205,8],[150,48,203,6],[151,0,207,6],[151,15,207,13,"changeIndex"],[151,26,207,24],[151,27,208,8],[152,0,209,10,"stale"],[152,10,209,10,"stale"],[152,15,209,15],[152,17,209,17],[152,22,208,8],[153,0,210,10,"type"],[153,10,210,10,"type"],[153,14,210,14],[153,16,210,16],[153,21,208,8],[154,0,211,10,"key"],[154,10,211,10,"key"],[154,13,211,13],[154,24,211,22],[154,48,208,8],[155,0,212,10,"index"],[155,10,212,10,"index"],[155,15,212,15],[155,17,212,10,"index"],[155,22,208,8],[156,0,213,10,"routeNames"],[156,10,213,10,"routeNames"],[156,20,213,20],[156,22,213,10,"routeNames"],[156,32,208,8],[157,0,214,10,"history"],[157,10,214,10,"history"],[157,17,214,17],[157,19,214,10,"history"],[157,26,208,8],[158,0,215,10,"routes"],[158,10,215,10,"routes"],[158,16,215,16],[158,18,215,10,"routes"],[159,0,208,8],[159,9,207,24],[159,11,217,8,"index"],[159,16,207,24],[159,18,218,8,"backBehavior"],[159,30,207,24],[159,32,219,8,"initialRouteName"],[159,48,207,24],[159,49,207,6],[160,0,221,5],[160,7,132,3],[161,0,223,4,"getStateForRouteNamesChange"],[161,6,223,4,"getStateForRouteNamesChange"],[161,33,132,3],[161,72,223,32,"state"],[161,77,132,3],[161,86,223,71],[162,0,223,71],[162,12,223,41,"routeNames"],[162,22,223,71],[162,31,223,41,"routeNames"],[162,41,223,71],[163,0,223,71],[163,12,223,53,"routeParamList"],[163,26,223,71],[163,35,223,53,"routeParamList"],[163,49,223,71],[164,0,224,6],[164,12,224,12,"routes"],[164,18,224,18],[164,21,224,21,"routeNames"],[164,31,224,31],[164,32,224,32,"map"],[164,35,224,21],[164,36,225,8],[164,46,225,9,"name"],[164,50,225,8],[165,0,225,8],[165,17,226,10,"state"],[165,22,226,15],[165,23,226,16,"routes"],[165,29,226,10],[165,30,226,23,"find"],[165,34,226,10],[165,35,226,28],[165,45,226,29,"r"],[165,46,226,28],[166,0,226,28],[166,19,226,35,"r"],[166,20,226,36],[166,21,226,37,"name"],[166,25,226,35],[166,30,226,46,"name"],[166,34,226,28],[167,0,226,28],[167,11,226,10],[167,16,226,55],[168,0,227,12,"name"],[168,12,227,12,"name"],[168,16,227,16],[168,18,227,12,"name"],[168,22,226,55],[169,0,228,12,"key"],[169,12,228,12,"key"],[169,15,228,15],[169,17,228,20,"name"],[169,21,228,15],[169,30,228,28],[169,54,226,55],[170,0,229,12,"params"],[170,12,229,12,"params"],[170,18,229,18],[170,20,229,20,"routeParamList"],[170,34,229,34],[170,35,229,35,"name"],[170,39,229,34],[171,0,226,55],[171,11,225,8],[172,0,225,8],[172,9,224,21],[172,10,224,6],[173,0,233,6],[173,12,233,12,"index"],[173,17,233,17],[173,20,233,20,"Math"],[173,24,233,24],[173,25,233,25,"max"],[173,28,233,20],[173,29,234,8],[173,30,233,20],[173,32,235,8,"routeNames"],[173,42,235,18],[173,43,235,19,"indexOf"],[173,50,235,8],[173,51,235,27,"state"],[173,56,235,32],[173,57,235,33,"routes"],[173,63,235,27],[173,64,235,40,"state"],[173,69,235,45],[173,70,235,46,"index"],[173,75,235,27],[173,77,235,53,"name"],[173,81,235,8],[173,82,233,20],[173,83,233,6],[174,0,238,6],[174,12,238,10,"history"],[174,19,238,17],[174,22,238,20,"state"],[174,27,238,25],[174,28,238,26,"history"],[174,35,238,20],[174,36,238,34,"filter"],[174,42,238,20],[174,43,240,8],[174,53,240,9,"it"],[174,55,240,8],[175,0,240,8],[175,17,240,16,"it"],[175,19,240,18],[175,20,240,19,"type"],[175,24,240,16],[175,29,240,28],[175,36,240,16],[175,40,240,39,"routes"],[175,46,240,45],[175,47,240,46,"find"],[175,51,240,39],[175,52,240,51],[175,62,240,52,"r"],[175,63,240,51],[176,0,240,51],[176,19,240,58,"r"],[176,20,240,59],[176,21,240,60,"key"],[176,24,240,58],[176,29,240,68,"it"],[176,31,240,70],[176,32,240,71,"key"],[176,35,240,51],[177,0,240,51],[177,11,240,39],[177,12,240,8],[178,0,240,8],[178,9,238,20],[178,10,238,6],[180,0,243,6],[180,12,243,10],[180,13,243,11,"history"],[180,20,243,18],[180,21,243,19,"length"],[180,27,243,6],[180,29,243,27],[181,0,244,8,"history"],[181,10,244,8,"history"],[181,17,244,15],[181,20,244,18,"getRouteHistory"],[181,35,244,33],[181,36,245,10,"routes"],[181,42,244,33],[181,44,246,10,"index"],[181,49,244,33],[181,51,247,10,"backBehavior"],[181,63,244,33],[181,65,248,10,"initialRouteName"],[181,81,244,33],[181,82,244,8],[182,0,250,7],[184,0,252,6],[184,47,253,11,"state"],[184,52,252,6],[185,0,254,8,"history"],[185,10,254,8,"history"],[185,17,254,15],[185,19,254,8,"history"],[185,26,252,6],[186,0,255,8,"routeNames"],[186,10,255,8,"routeNames"],[186,20,255,18],[186,22,255,8,"routeNames"],[186,32,252,6],[187,0,256,8,"routes"],[187,10,256,8,"routes"],[187,16,256,14],[187,18,256,8,"routes"],[187,24,252,6],[188,0,257,8,"index"],[188,10,257,8,"index"],[188,15,257,13],[188,17,257,8,"index"],[189,0,252,6],[190,0,259,5],[190,7,132,3],[191,0,261,4,"getStateForRouteFocus"],[191,6,261,4,"getStateForRouteFocus"],[191,27,132,3],[191,60,261,26,"state"],[191,65,132,3],[191,67,261,33,"key"],[191,70,132,3],[191,72,261,38],[192,0,262,6],[192,12,262,12,"index"],[192,17,262,17],[192,20,262,20,"state"],[192,25,262,25],[192,26,262,26,"routes"],[192,32,262,20],[192,33,262,33,"findIndex"],[192,42,262,20],[192,43,262,43],[192,53,262,44,"r"],[192,54,262,43],[193,0,262,43],[193,17,262,50,"r"],[193,18,262,51],[193,19,262,52,"key"],[193,22,262,50],[193,27,262,60,"key"],[193,30,262,43],[194,0,262,43],[194,9,262,20],[194,10,262,6],[196,0,264,6],[196,12,264,10,"index"],[196,17,264,15],[196,22,264,20],[196,23,264,21],[196,24,264,10],[196,28,264,26,"index"],[196,33,264,31],[196,38,264,36,"state"],[196,43,264,41],[196,44,264,42,"index"],[196,49,264,6],[196,51,264,49],[197,0,265,8],[197,17,265,15,"state"],[197,22,265,8],[198,0,266,7],[200,0,268,6],[200,15,268,13,"changeIndex"],[200,26,268,24],[200,27,268,25,"state"],[200,32,268,24],[200,34,268,32,"index"],[200,39,268,24],[200,41,268,39,"backBehavior"],[200,53,268,24],[200,55,268,53,"initialRouteName"],[200,71,268,24],[200,72,268,6],[201,0,269,5],[201,7,132,3],[202,0,271,4,"getStateForAction"],[202,6,271,4,"getStateForAction"],[202,23,132,3],[202,52,271,22,"state"],[202,57,132,3],[202,59,271,29,"action"],[202,65,132,3],[202,67,271,37],[203,0,272,6],[203,16,272,14,"action"],[203,22,272,20],[203,23,272,21,"type"],[203,27,272,6],[204,0,273,8],[204,15,273,13],[204,24,273,8],[205,0,274,8],[205,15,274,13],[205,25,274,8],[206,0,274,25],[207,0,275,10],[207,18,275,14,"index"],[207,23,275,19],[207,26,275,22],[207,27,275,23],[207,28,275,10],[209,0,277,10],[209,18,277,14,"action"],[209,24,277,20],[209,25,277,21,"type"],[209,29,277,14],[209,34,277,30],[209,44,277,14],[209,48,277,44,"action"],[209,54,277,50],[209,55,277,51,"payload"],[209,62,277,44],[209,63,277,59,"key"],[209,66,277,10],[209,68,277,64],[210,0,278,12,"index"],[210,16,278,12,"index"],[210,21,278,17],[210,24,278,20,"state"],[210,29,278,25],[210,30,278,26,"routes"],[210,36,278,20],[210,37,278,33,"findIndex"],[210,46,278,20],[210,47,279,14],[210,57,279,15,"route"],[210,62,279,14],[211,0,279,14],[211,25,279,25,"route"],[211,30,279,30],[211,31,279,31,"key"],[211,34,279,25],[211,39,279,39,"action"],[211,45,279,45],[211,46,279,46,"payload"],[211,53,279,39],[211,54,279,54,"key"],[211,57,279,14],[212,0,279,14],[212,17,278,20],[212,18,278,12],[213,0,281,11],[213,15,277,10],[213,21,281,17],[214,0,282,12,"index"],[214,16,282,12,"index"],[214,21,282,17],[214,24,282,20,"state"],[214,29,282,25],[214,30,282,26,"routes"],[214,36,282,20],[214,37,282,33,"findIndex"],[214,46,282,20],[214,47,283,14],[214,57,283,15,"route"],[214,62,283,14],[215,0,283,14],[215,25,283,25,"route"],[215,30,283,30],[215,31,283,31,"name"],[215,35,283,25],[215,40,283,40,"action"],[215,46,283,46],[215,47,283,47,"payload"],[215,54,283,40],[215,55,283,55,"name"],[215,59,283,14],[216,0,283,14],[216,17,282,20],[216,18,282,12],[217,0,285,11],[219,0,287,10],[219,18,287,14,"index"],[219,23,287,19],[219,28,287,24],[219,29,287,25],[219,30,287,10],[219,32,287,28],[220,0,288,12],[220,23,288,19],[220,27,288,12],[221,0,289,11],[223,0,291,10],[223,21,291,17,"changeIndex"],[223,32,291,28],[223,65,293,17,"state"],[223,70,291,28],[224,0,294,14,"routes"],[224,16,294,14,"routes"],[224,22,294,20],[224,24,295,16,"action"],[224,30,295,22],[224,31,295,23,"payload"],[224,38,295,16],[224,39,295,31,"params"],[224,45,295,16],[224,50,295,42,"undefined"],[224,59,295,16],[224,62,296,20,"state"],[224,67,296,25],[224,68,296,26,"routes"],[224,74,296,20],[224,75,296,33,"map"],[224,78,296,20],[224,79,296,37],[224,89,296,38,"route"],[224,94,296,37],[224,96,296,45,"i"],[224,97,296,37],[225,0,296,37],[225,25,297,22,"i"],[225,26,297,23],[225,31,297,28,"index"],[225,36,297,22],[225,71,299,31,"route"],[225,76,297,22],[226,0,300,28,"params"],[226,20,300,28,"params"],[226,26,300,34],[226,60,301,33,"route"],[226,65,301,38],[226,66,301,39,"params"],[226,72,300,34],[226,75,302,33,"action"],[226,81,302,39],[226,82,302,40,"payload"],[226,89,302,33],[226,90,302,48,"params"],[226,96,300,34],[227,0,297,22],[227,23,305,26,"route"],[227,28,296,37],[228,0,296,37],[228,17,296,20],[228,18,295,16],[228,21,307,20,"state"],[228,26,307,25],[228,27,307,26,"routes"],[229,0,291,28],[229,18,309,12,"index"],[229,23,291,28],[229,25,310,12,"backBehavior"],[229,37,291,28],[229,39,311,12,"initialRouteName"],[229,55,291,28],[229,56,291,10],[230,0,313,9],[232,0,315,8],[232,15,315,13],[232,24,315,8],[233,0,315,24],[234,0,316,10],[234,18,316,14,"state"],[234,23,316,19],[234,24,316,20,"history"],[234,31,316,14],[234,32,316,28,"length"],[234,38,316,14],[234,43,316,39],[234,44,316,10],[234,46,316,42],[235,0,317,12],[235,23,317,19],[235,27,317,12],[236,0,318,11],[238,0,320,10],[238,18,320,16,"previousKey"],[238,29,320,27],[238,32,320,30,"state"],[238,37,320,35],[238,38,320,36,"history"],[238,45,320,30],[238,46,320,44,"state"],[238,51,320,49],[238,52,320,50,"history"],[238,59,320,44],[238,60,320,58,"length"],[238,66,320,44],[238,69,320,67],[238,70,320,30],[238,72,320,70,"key"],[238,75,320,10],[240,0,321,10],[240,18,321,16,"index"],[240,24,321,21],[240,27,321,24,"state"],[240,32,321,29],[240,33,321,30,"routes"],[240,39,321,24],[240,40,321,37,"findIndex"],[240,49,321,24],[240,50,322,12],[240,60,322,13,"route"],[240,65,322,12],[241,0,322,12],[241,23,322,23,"route"],[241,28,322,28],[241,29,322,29,"key"],[241,32,322,23],[241,37,322,37,"previousKey"],[241,48,322,12],[242,0,322,12],[242,15,321,24],[242,16,321,10],[244,0,325,10],[244,18,325,14,"index"],[244,24,325,19],[244,29,325,24],[244,30,325,25],[244,31,325,10],[244,33,325,28],[245,0,326,12],[245,23,326,19],[245,27,326,12],[246,0,327,11],[248,0,329,10],[248,53,330,15,"state"],[248,58,329,10],[249,0,331,12,"history"],[249,16,331,12,"history"],[249,23,331,19],[249,25,331,21,"state"],[249,30,331,26],[249,31,331,27,"history"],[249,38,331,21],[249,39,331,35,"slice"],[249,44,331,21],[249,45,331,41],[249,46,331,21],[249,48,331,44],[249,49,331,45],[249,50,331,21],[249,51,329,10],[250,0,332,12,"index"],[250,16,332,12,"index"],[250,21,332,17],[250,23,332,12,"index"],[251,0,329,10],[252,0,334,9],[254,0,336,8],[255,0,337,10],[255,19,337,17,"BaseRouter"],[255,39,337,28,"getStateForAction"],[255,56,337,17],[255,57,337,46,"state"],[255,62,337,17],[255,64,337,53,"action"],[255,70,337,17],[255,71,337,10],[256,0,272,6],[257,0,339,5],[257,7,132,3],[258,0,341,4,"shouldActionChangeFocus"],[258,6,341,4,"shouldActionChangeFocus"],[258,29,132,3],[258,64,341,28,"action"],[258,70,132,3],[258,72,341,36],[259,0,342,6],[259,15,342,13,"action"],[259,21,342,19],[259,22,342,20,"type"],[259,26,342,13],[259,31,342,29],[259,41,342,6],[260,0,343,5],[260,7,132,3],[261,0,345,4,"actionCreators"],[261,6,345,4,"actionCreators"],[261,20,345,18],[261,22,345,20,"TabActions"],[262,0,132,3],[262,6,129,2],[264,0,348,2],[264,11,348,9,"router"],[264,17,348,2],[265,0,349,1]],"functionMap":{"names":["<global>","TabActions.jumpTo","getRouteHistory","routes.findIndex$argument_0","changeIndex","state.history.filter$argument_0","TabRouter","router.getInitialState","routeNames.map$argument_0","router.getRehydratedState","routes.find$argument_0","<anonymous>","router.getStateForRouteNamesChange","state.routes.find$argument_0","router.getStateForRouteFocus","state.routes.findIndex$argument_0","router.getStateForAction","state.routes.map$argument_0","router.shouldActionChangeFocus"],"mappings":"AAA;ECqD;GDE;wBEG;QCiB,0CD;CFiB;oBIE;cCY,6DD;CJgB;eME;ICY;oCCM;QDI;KDkB;IGE;oCDO;UEE,sBF;OCoB;8BEQ,oBD,uBC,CF;KHiB;IME;QJE;4BKC,sBL;WII;QPU,2CK,uBL,CO;KNmB;IQE;2CCC,oBD;KRO;IUE;cDQ,2CC;cDI,6CC;qCCa;+BDS;YDiB,oCC;KViB;IYE;KZE;CNM"}},"type":"js/module"}]}