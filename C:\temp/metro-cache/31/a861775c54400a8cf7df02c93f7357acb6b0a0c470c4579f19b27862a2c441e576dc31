{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/get","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/inherits","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"isAsync":false}},{"name":"engine.io-client","data":{"isAsync":false}},{"name":"./socket","data":{"isAsync":false}},{"name":"component-emitter","data":{"isAsync":false}},{"name":"socket.io-parser","data":{"isAsync":false}},{"name":"./on","data":{"isAsync":false}},{"name":"component-bind","data":{"isAsync":false}},{"name":"backo2","data":{"isAsync":false}},{"name":"debug","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n\n  var _createClass = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n\n  var _get = _$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/get\");\n\n  var _inherits = _$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/inherits\");\n\n  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/possibleConstructorReturn\");\n\n  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/getPrototypeOf\");\n\n  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\n  function _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Manager = void 0;\n\n  var eio = _$$_REQUIRE(_dependencyMap[6], \"engine.io-client\");\n\n  var socket_1 = _$$_REQUIRE(_dependencyMap[7], \"./socket\");\n\n  var Emitter = _$$_REQUIRE(_dependencyMap[8], \"component-emitter\");\n\n  var parser = _$$_REQUIRE(_dependencyMap[9], \"socket.io-parser\");\n\n  var on_1 = _$$_REQUIRE(_dependencyMap[10], \"./on\");\n\n  var bind = _$$_REQUIRE(_dependencyMap[11], \"component-bind\");\n\n  var Backoff = _$$_REQUIRE(_dependencyMap[12], \"backo2\");\n\n  var debug = _$$_REQUIRE(_dependencyMap[13], \"debug\")(\"socket.io-client:manager\");\n\n  var Manager = function (_Emitter) {\n    _inherits(Manager, _Emitter);\n\n    var _super = _createSuper(Manager);\n\n    function Manager(uri, opts) {\n      var _this;\n\n      _classCallCheck(this, Manager);\n\n      _this = _super.call(this);\n      _this.nsps = {};\n      _this.subs = [];\n      _this.connecting = [];\n\n      if (uri && \"object\" === typeof uri) {\n        opts = uri;\n        uri = undefined;\n      }\n\n      opts = opts || {};\n      opts.path = opts.path || \"/socket.io\";\n      _this.opts = opts;\n\n      _this.reconnection(opts.reconnection !== false);\n\n      _this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n\n      _this.reconnectionDelay(opts.reconnectionDelay || 1000);\n\n      _this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n\n      _this.randomizationFactor(opts.randomizationFactor || 0.5);\n\n      _this.backoff = new Backoff({\n        min: _this.reconnectionDelay(),\n        max: _this.reconnectionDelayMax(),\n        jitter: _this.randomizationFactor()\n      });\n\n      _this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n\n      _this._readyState = \"closed\";\n      _this.uri = uri;\n\n      var _parser = opts.parser || parser;\n\n      _this.encoder = new _parser.Encoder();\n      _this.decoder = new _parser.Decoder();\n      _this._autoConnect = opts.autoConnect !== false;\n      if (_this._autoConnect) _this.open();\n      return _this;\n    }\n\n    _createClass(Manager, [{\n      key: \"reconnection\",\n      value: function reconnection(v) {\n        if (!arguments.length) return this._reconnection;\n        this._reconnection = !!v;\n        return this;\n      }\n    }, {\n      key: \"reconnectionAttempts\",\n      value: function reconnectionAttempts(v) {\n        if (v === undefined) return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n      }\n    }, {\n      key: \"reconnectionDelay\",\n      value: function reconnectionDelay(v) {\n        if (v === undefined) return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        this.backoff && this.backoff.setMin(v);\n        return this;\n      }\n    }, {\n      key: \"randomizationFactor\",\n      value: function randomizationFactor(v) {\n        if (v === undefined) return this._randomizationFactor;\n        this._randomizationFactor = v;\n        this.backoff && this.backoff.setJitter(v);\n        return this;\n      }\n    }, {\n      key: \"reconnectionDelayMax\",\n      value: function reconnectionDelayMax(v) {\n        if (v === undefined) return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        this.backoff && this.backoff.setMax(v);\n        return this;\n      }\n    }, {\n      key: \"timeout\",\n      value: function timeout(v) {\n        if (!arguments.length) return this._timeout;\n        this._timeout = v;\n        return this;\n      }\n    }, {\n      key: \"maybeReconnectOnOpen\",\n      value: function maybeReconnectOnOpen() {\n        if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n          this.reconnect();\n        }\n      }\n    }, {\n      key: \"open\",\n      value: function open(fn) {\n        var _this2 = this;\n\n        debug(\"readyState %s\", this._readyState);\n        if (~this._readyState.indexOf(\"open\")) return this;\n        debug(\"opening %s\", this.uri);\n        this.engine = eio(this.uri, this.opts);\n        var socket = this.engine;\n        var self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        var openSub = on_1.on(socket, \"open\", function () {\n          self.onopen();\n          fn && fn();\n        });\n        var errorSub = on_1.on(socket, \"error\", function (err) {\n          debug(\"error\");\n          self.cleanup();\n          self._readyState = \"closed\";\n\n          _get(_getPrototypeOf(Manager.prototype), \"emit\", _this2).call(_this2, \"error\", err);\n\n          if (fn) {\n            fn(err);\n          } else {\n            self.maybeReconnectOnOpen();\n          }\n        });\n\n        if (false !== this._timeout) {\n          var timeout = this._timeout;\n          debug(\"connect attempt will timeout after %d\", timeout);\n\n          if (timeout === 0) {\n            openSub.destroy();\n          }\n\n          var timer = setTimeout(function () {\n            debug(\"connect attempt timed out after %d\", timeout);\n            openSub.destroy();\n            socket.close();\n            socket.emit(\"error\", new Error(\"timeout\"));\n          }, timeout);\n          this.subs.push({\n            destroy: function destroy() {\n              clearTimeout(timer);\n            }\n          });\n        }\n\n        this.subs.push(openSub);\n        this.subs.push(errorSub);\n        return this;\n      }\n    }, {\n      key: \"connect\",\n      value: function connect(fn) {\n        return this.open(fn);\n      }\n    }, {\n      key: \"onopen\",\n      value: function onopen() {\n        debug(\"open\");\n        this.cleanup();\n        this._readyState = \"open\";\n\n        _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"open\");\n\n        var socket = this.engine;\n        this.subs.push(on_1.on(socket, \"data\", bind(this, \"ondata\")));\n        this.subs.push(on_1.on(socket, \"ping\", bind(this, \"onping\")));\n        this.subs.push(on_1.on(socket, \"error\", bind(this, \"onerror\")));\n        this.subs.push(on_1.on(socket, \"close\", bind(this, \"onclose\")));\n        this.subs.push(on_1.on(this.decoder, \"decoded\", bind(this, \"ondecoded\")));\n      }\n    }, {\n      key: \"onping\",\n      value: function onping() {\n        _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"ping\");\n      }\n    }, {\n      key: \"ondata\",\n      value: function ondata(data) {\n        this.decoder.add(data);\n      }\n    }, {\n      key: \"ondecoded\",\n      value: function ondecoded(packet) {\n        _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"packet\", packet);\n      }\n    }, {\n      key: \"onerror\",\n      value: function onerror(err) {\n        debug(\"error\", err);\n\n        _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"error\", err);\n      }\n    }, {\n      key: \"socket\",\n      value: function socket(nsp, opts) {\n        var socket = this.nsps[nsp];\n\n        if (!socket) {\n          socket = new socket_1.Socket(this, nsp, opts);\n          this.nsps[nsp] = socket;\n          var self = this;\n          socket.on(\"connecting\", onConnecting);\n\n          if (this._autoConnect) {\n            onConnecting();\n          }\n        }\n\n        function onConnecting() {\n          if (!~self.connecting.indexOf(socket)) {\n            self.connecting.push(socket);\n          }\n        }\n\n        return socket;\n      }\n    }, {\n      key: \"_destroy\",\n      value: function _destroy(socket) {\n        var index = this.connecting.indexOf(socket);\n        if (~index) this.connecting.splice(index, 1);\n        if (this.connecting.length) return;\n\n        this._close();\n      }\n    }, {\n      key: \"_packet\",\n      value: function _packet(packet) {\n        debug(\"writing packet %j\", packet);\n        if (packet.query && packet.type === 0) packet.nsp += \"?\" + packet.query;\n        var encodedPackets = this.encoder.encode(packet);\n\n        for (var i = 0; i < encodedPackets.length; i++) {\n          this.engine.write(encodedPackets[i], packet.options);\n        }\n      }\n    }, {\n      key: \"cleanup\",\n      value: function cleanup() {\n        debug(\"cleanup\");\n        var subsLength = this.subs.length;\n\n        for (var i = 0; i < subsLength; i++) {\n          var sub = this.subs.shift();\n          sub.destroy();\n        }\n\n        this.decoder.destroy();\n      }\n    }, {\n      key: \"_close\",\n      value: function _close() {\n        debug(\"disconnect\");\n        this.skipReconnect = true;\n        this._reconnecting = false;\n\n        if (\"opening\" === this._readyState) {\n          this.cleanup();\n        }\n\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        if (this.engine) this.engine.close();\n      }\n    }, {\n      key: \"disconnect\",\n      value: function disconnect() {\n        return this._close();\n      }\n    }, {\n      key: \"onclose\",\n      value: function onclose(reason) {\n        debug(\"onclose\");\n        this.cleanup();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n\n        _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"close\", reason);\n\n        if (this._reconnection && !this.skipReconnect) {\n          this.reconnect();\n        }\n      }\n    }, {\n      key: \"reconnect\",\n      value: function reconnect() {\n        var _this3 = this;\n\n        if (this._reconnecting || this.skipReconnect) return this;\n        var self = this;\n\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n          debug(\"reconnect failed\");\n          this.backoff.reset();\n\n          _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"reconnect_failed\");\n\n          this._reconnecting = false;\n        } else {\n          var delay = this.backoff.duration();\n          debug(\"will wait %dms before reconnect attempt\", delay);\n          this._reconnecting = true;\n          var timer = setTimeout(function () {\n            if (self.skipReconnect) return;\n            debug(\"attempting reconnect\");\n\n            _get(_getPrototypeOf(Manager.prototype), \"emit\", _this3).call(_this3, \"reconnect_attempt\", self.backoff.attempts);\n\n            if (self.skipReconnect) return;\n            self.open(function (err) {\n              if (err) {\n                debug(\"reconnect attempt error\");\n                self._reconnecting = false;\n                self.reconnect();\n\n                _get(_getPrototypeOf(Manager.prototype), \"emit\", _this3).call(_this3, \"reconnect_error\", err);\n              } else {\n                debug(\"reconnect success\");\n                self.onreconnect();\n              }\n            });\n          }, delay);\n          this.subs.push({\n            destroy: function destroy() {\n              clearTimeout(timer);\n            }\n          });\n        }\n      }\n    }, {\n      key: \"onreconnect\",\n      value: function onreconnect() {\n        var attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n\n        _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"reconnect\", attempt);\n      }\n    }]);\n\n    return Manager;\n  }(Emitter);\n\n  exports.Manager = Manager;\n});","lineCount":398,"map":[[2,0,1,0],[20,0,2,0,"Object"],[20,2,2,0,"Object"],[20,8,2,6],[20,9,2,7,"defineProperty"],[20,23,2,0],[20,24,2,22,"exports"],[20,31,2,0],[20,33,2,31],[20,45,2,0],[20,47,2,45],[21,0,2,47,"value"],[21,4,2,47,"value"],[21,9,2,52],[21,11,2,54],[22,0,2,45],[22,3,2,0],[23,0,3,0,"exports"],[23,2,3,0,"exports"],[23,9,3,7],[23,10,3,8,"Manager"],[23,17,3,0],[23,20,3,18],[23,25,3,23],[23,26,3,0],[25,0,4,0],[25,6,4,6,"eio"],[25,9,4,9],[25,12,4,12,"require"],[25,23,4,19],[25,62,4,0],[27,0,5,0],[27,6,5,6,"socket_1"],[27,14,5,14],[27,17,5,17,"require"],[27,28,5,24],[27,59,5,0],[29,0,6,0],[29,6,6,6,"Emitter"],[29,13,6,13],[29,16,6,16,"require"],[29,27,6,23],[29,67,6,0],[31,0,7,0],[31,6,7,6,"parser"],[31,12,7,12],[31,15,7,15,"require"],[31,26,7,22],[31,65,7,0],[33,0,8,0],[33,6,8,6,"on_1"],[33,10,8,10],[33,13,8,13,"require"],[33,24,8,20],[33,52,8,0],[35,0,9,0],[35,6,9,6,"bind"],[35,10,9,10],[35,13,9,13,"require"],[35,24,9,20],[35,62,9,0],[37,0,10,0],[37,6,10,6,"Backoff"],[37,13,10,13],[37,16,10,16,"require"],[37,27,10,23],[37,57,10,0],[39,0,11,0],[39,6,11,6,"debug"],[39,11,11,11],[39,14,11,14,"require"],[39,25,11,21],[39,54,11,14],[39,55,11,31],[39,81,11,14],[39,82,11,0],[41,6,12,6,"Manager"],[41,13],[46,0,13,4],[46,21,13,16,"uri"],[46,24,13,4],[46,26,13,21,"opts"],[46,30,13,4],[46,32,13,27],[47,0,13,27],[49,0,13,27],[51,0,14,8],[52,0,15,8],[52,12,15,13,"nsps"],[52,16,15,8],[52,19,15,20],[52,21,15,8],[53,0,16,8],[53,12,16,13,"subs"],[53,16,16,8],[53,19,16,20],[53,21,16,8],[54,0,17,8],[54,12,17,13,"connecting"],[54,22,17,8],[54,25,17,26],[54,27,17,8],[56,0,18,8],[56,10,18,12,"uri"],[56,13,18,15],[56,17,18,19],[56,30,18,32],[56,37,18,39,"uri"],[56,40,18,8],[56,42,18,44],[57,0,19,12,"opts"],[57,8,19,12,"opts"],[57,12,19,16],[57,15,19,19,"uri"],[57,18,19,12],[58,0,20,12,"uri"],[58,8,20,12,"uri"],[58,11,20,15],[58,14,20,18,"undefined"],[58,23,20,12],[59,0,21,9],[61,0,22,8,"opts"],[61,6,22,8,"opts"],[61,10,22,12],[61,13,22,15,"opts"],[61,17,22,19],[61,21,22,23],[61,23,22,8],[62,0,23,8,"opts"],[62,6,23,8,"opts"],[62,10,23,12],[62,11,23,13,"path"],[62,15,23,8],[62,18,23,20,"opts"],[62,22,23,24],[62,23,23,25,"path"],[62,27,23,20],[62,31,23,33],[62,43,23,8],[63,0,24,8],[63,12,24,13,"opts"],[63,16,24,8],[63,19,24,20,"opts"],[63,23,24,8],[65,0,25,8],[65,12,25,13,"reconnection"],[65,24,25,8],[65,25,25,26,"opts"],[65,29,25,30],[65,30,25,31,"reconnection"],[65,42,25,26],[65,47,25,48],[65,52,25,8],[67,0,26,8],[67,12,26,13,"reconnectionAttempts"],[67,32,26,8],[67,33,26,34,"opts"],[67,37,26,38],[67,38,26,39,"reconnectionAttempts"],[67,58,26,34],[67,62,26,63,"Infinity"],[67,70,26,8],[69,0,27,8],[69,12,27,13,"reconnectionDelay"],[69,29,27,8],[69,30,27,31,"opts"],[69,34,27,35],[69,35,27,36,"reconnectionDelay"],[69,52,27,31],[69,56,27,57],[69,60,27,8],[71,0,28,8],[71,12,28,13,"reconnectionDelayMax"],[71,32,28,8],[71,33,28,34,"opts"],[71,37,28,38],[71,38,28,39,"reconnectionDelayMax"],[71,58,28,34],[71,62,28,63],[71,66,28,8],[73,0,29,8],[73,12,29,13,"randomizationFactor"],[73,31,29,8],[73,32,29,33,"opts"],[73,36,29,37],[73,37,29,38,"randomizationFactor"],[73,56,29,33],[73,60,29,61],[73,63,29,8],[75,0,30,8],[75,12,30,13,"backoff"],[75,19,30,8],[75,22,30,23],[75,26,30,27,"Backoff"],[75,33,30,23],[75,34,30,35],[76,0,31,12,"min"],[76,8,31,12,"min"],[76,11,31,15],[76,13,31,17],[76,19,31,22,"reconnectionDelay"],[76,36,31,17],[76,38,30,35],[77,0,32,12,"max"],[77,8,32,12,"max"],[77,11,32,15],[77,13,32,17],[77,19,32,22,"reconnectionDelayMax"],[77,39,32,17],[77,41,30,35],[78,0,33,12,"jitter"],[78,8,33,12,"jitter"],[78,14,33,18],[78,16,33,20],[78,22,33,25,"randomizationFactor"],[78,41,33,20],[79,0,30,35],[79,7,30,23],[79,8,30,8],[81,0,35,8],[81,12,35,13,"timeout"],[81,19,35,8],[81,20,35,21],[81,28,35,29,"opts"],[81,32,35,33],[81,33,35,34,"timeout"],[81,40,35,21],[81,43,35,44],[81,48,35,21],[81,51,35,52,"opts"],[81,55,35,56],[81,56,35,57,"timeout"],[81,63,35,8],[83,0,36,8],[83,12,36,13,"_readyState"],[83,23,36,8],[83,26,36,27],[83,34,36,8],[84,0,37,8],[84,12,37,13,"uri"],[84,15,37,8],[84,18,37,19,"uri"],[84,21,37,8],[86,0,38,8],[86,10,38,14,"_parser"],[86,17,38,21],[86,20,38,24,"opts"],[86,24,38,28],[86,25,38,29,"parser"],[86,31,38,24],[86,35,38,39,"parser"],[86,41,38,8],[88,0,39,8],[88,12,39,13,"encoder"],[88,19,39,8],[88,22,39,23],[88,26,39,27,"_parser"],[88,33,39,34],[88,34,39,35,"Encoder"],[88,41,39,23],[88,43,39,8],[89,0,40,8],[89,12,40,13,"decoder"],[89,19,40,8],[89,22,40,23],[89,26,40,27,"_parser"],[89,33,40,34],[89,34,40,35,"Decoder"],[89,41,40,23],[89,43,40,8],[90,0,41,8],[90,12,41,13,"_autoConnect"],[90,24,41,8],[90,27,41,28,"opts"],[90,31,41,32],[90,32,41,33,"autoConnect"],[90,43,41,28],[90,48,41,49],[90,53,41,8],[91,0,42,8],[91,10,42,12],[91,16,42,17,"_autoConnect"],[91,28,42,8],[91,30,43,12],[91,36,43,17,"open"],[91,40,43,12],[92,0,13,27],[93,0,44,5],[97,35,45,17,"v"],[97,36],[97,38,45,20],[98,0,46,8],[98,12,46,12],[98,13,46,13,"arguments"],[98,22,46,22],[98,23,46,23,"length"],[98,29,46,8],[98,31,47,12],[98,38,47,19],[98,43,47,24,"_reconnection"],[98,56,47,12],[99,0,48,8],[99,13,48,13,"_reconnection"],[99,26,48,8],[99,29,48,29],[99,30,48,30],[99,31,48,31,"v"],[99,32,48,8],[100,0,49,8],[100,15,49,15],[100,19,49,8],[101,0,50,5],[104,43,51,25,"v"],[104,44],[104,46,51,28],[105,0,52,8],[105,12,52,12,"v"],[105,13,52,13],[105,18,52,18,"undefined"],[105,27,52,8],[105,29,53,12],[105,36,53,19],[105,41,53,24,"_reconnectionAttempts"],[105,62,53,12],[106,0,54,8],[106,13,54,13,"_reconnectionAttempts"],[106,34,54,8],[106,37,54,37,"v"],[106,38,54,8],[107,0,55,8],[107,15,55,15],[107,19,55,8],[108,0,56,5],[111,40,57,22,"v"],[111,41],[111,43,57,25],[112,0,58,8],[112,12,58,12,"v"],[112,13,58,13],[112,18,58,18,"undefined"],[112,27,58,8],[112,29,59,12],[112,36,59,19],[112,41,59,24,"_reconnectionDelay"],[112,59,59,12],[113,0,60,8],[113,13,60,13,"_reconnectionDelay"],[113,31,60,8],[113,34,60,34,"v"],[113,35,60,8],[114,0,61,8],[114,13,61,13,"backoff"],[114,20,61,8],[114,24,61,24],[114,29,61,29,"backoff"],[114,36,61,24],[114,37,61,37,"setMin"],[114,43,61,24],[114,44,61,44,"v"],[114,45,61,24],[114,46,61,8],[115,0,62,8],[115,15,62,15],[115,19,62,8],[116,0,63,5],[119,42,64,24,"v"],[119,43],[119,45,64,27],[120,0,65,8],[120,12,65,12,"v"],[120,13,65,13],[120,18,65,18,"undefined"],[120,27,65,8],[120,29,66,12],[120,36,66,19],[120,41,66,24,"_randomizationFactor"],[120,61,66,12],[121,0,67,8],[121,13,67,13,"_randomizationFactor"],[121,33,67,8],[121,36,67,36,"v"],[121,37,67,8],[122,0,68,8],[122,13,68,13,"backoff"],[122,20,68,8],[122,24,68,24],[122,29,68,29,"backoff"],[122,36,68,24],[122,37,68,37,"setJitter"],[122,46,68,24],[122,47,68,47,"v"],[122,48,68,24],[122,49,68,8],[123,0,69,8],[123,15,69,15],[123,19,69,8],[124,0,70,5],[127,43,71,25,"v"],[127,44],[127,46,71,28],[128,0,72,8],[128,12,72,12,"v"],[128,13,72,13],[128,18,72,18,"undefined"],[128,27,72,8],[128,29,73,12],[128,36,73,19],[128,41,73,24,"_reconnectionDelayMax"],[128,62,73,12],[129,0,74,8],[129,13,74,13,"_reconnectionDelayMax"],[129,34,74,8],[129,37,74,37,"v"],[129,38,74,8],[130,0,75,8],[130,13,75,13,"backoff"],[130,20,75,8],[130,24,75,24],[130,29,75,29,"backoff"],[130,36,75,24],[130,37,75,37,"setMax"],[130,43,75,24],[130,44,75,44,"v"],[130,45,75,24],[130,46,75,8],[131,0,76,8],[131,15,76,15],[131,19,76,8],[132,0,77,5],[135,30,78,12,"v"],[135,31],[135,33,78,15],[136,0,79,8],[136,12,79,12],[136,13,79,13,"arguments"],[136,22,79,22],[136,23,79,23,"length"],[136,29,79,8],[136,31,80,12],[136,38,80,19],[136,43,80,24,"_timeout"],[136,51,80,12],[137,0,81,8],[137,13,81,13,"_timeout"],[137,21,81,8],[137,24,81,24,"v"],[137,25,81,8],[138,0,82,8],[138,15,82,15],[138,19,82,8],[139,0,83,5],[142,45,90,27],[143,0,92,8],[143,12,92,12],[143,13,92,13],[143,18,92,18,"_reconnecting"],[143,31,92,12],[143,35,93,12],[143,40,93,17,"_reconnection"],[143,53,92,12],[143,57,94,12],[143,62,94,17,"backoff"],[143,69,94,12],[143,70,94,25,"attempts"],[143,78,94,12],[143,83,94,38],[143,84,92,8],[143,86,94,41],[144,0,96,12],[144,15,96,17,"reconnect"],[144,24,96,12],[145,0,97,9],[146,0,98,5],[149,27,106,9,"fn"],[149,29],[149,31,106,13],[150,0,106,13],[152,0,107,8,"debug"],[152,8,107,8,"debug"],[152,13,107,13],[152,14,107,14],[152,29,107,13],[152,31,107,31],[152,36,107,36,"_readyState"],[152,47,107,13],[152,48,107,8],[153,0,108,8],[153,12,108,12],[153,13,108,13],[153,18,108,18,"_readyState"],[153,29,108,13],[153,30,108,30,"indexOf"],[153,37,108,13],[153,38,108,38],[153,44,108,13],[153,45,108,8],[153,47,109,12],[153,54,109,19],[153,58,109,12],[154,0,110,8,"debug"],[154,8,110,8,"debug"],[154,13,110,13],[154,14,110,14],[154,26,110,13],[154,28,110,28],[154,33,110,33,"uri"],[154,36,110,13],[154,37,110,8],[155,0,111,8],[155,13,111,13,"engine"],[155,19,111,8],[155,22,111,22,"eio"],[155,25,111,25],[155,26,111,26],[155,31,111,31,"uri"],[155,34,111,25],[155,36,111,36],[155,41,111,41,"opts"],[155,45,111,25],[155,46,111,8],[156,0,112,8],[156,12,112,14,"socket"],[156,18,112,20],[156,21,112,23],[156,26,112,28,"engine"],[156,32,112,8],[157,0,113,8],[157,12,113,14,"self"],[157,16,113,18],[157,19,113,21],[157,23,113,8],[158,0,114,8],[158,13,114,13,"_readyState"],[158,24,114,8],[158,27,114,27],[158,36,114,8],[159,0,115,8],[159,13,115,13,"skipReconnect"],[159,26,115,8],[159,29,115,29],[159,34,115,8],[160,0,117,8],[160,12,117,14,"openSub"],[160,19,117,21],[160,22,117,24,"on_1"],[160,26,117,28],[160,27,117,29,"on"],[160,29,117,24],[160,30,117,32,"socket"],[160,36,117,24],[160,38,117,40],[160,44,117,24],[160,46,117,48],[160,58,117,60],[161,0,118,12,"self"],[161,10,118,12,"self"],[161,14,118,16],[161,15,118,17,"onopen"],[161,21,118,12],[162,0,119,12,"fn"],[162,10,119,12,"fn"],[162,12,119,14],[162,16,119,18,"fn"],[162,18,119,20],[162,20,119,12],[163,0,120,9],[163,9,117,24],[163,10,117,8],[164,0,122,8],[164,12,122,14,"errorSub"],[164,20,122,22],[164,23,122,25,"on_1"],[164,27,122,29],[164,28,122,30,"on"],[164,30,122,25],[164,31,122,33,"socket"],[164,37,122,25],[164,39,122,41],[164,46,122,25],[164,48,122,50],[164,58,122,51,"err"],[164,61,122,50],[164,63,122,59],[165,0,123,12,"debug"],[165,10,123,12,"debug"],[165,15,123,17],[165,16,123,18],[165,23,123,17],[165,24,123,12],[166,0,124,12,"self"],[166,10,124,12,"self"],[166,14,124,16],[166,15,124,17,"cleanup"],[166,22,124,12],[167,0,125,12,"self"],[167,10,125,12,"self"],[167,14,125,16],[167,15,125,17,"_readyState"],[167,26,125,12],[167,29,125,31],[167,37,125,12],[169,0,126,12],[169,80,126,23],[169,87,126,12],[169,89,126,32,"err"],[169,92,126,12],[171,0,127,12],[171,14,127,16,"fn"],[171,16,127,12],[171,18,127,20],[172,0,128,16,"fn"],[172,12,128,16,"fn"],[172,14,128,18],[172,15,128,19,"err"],[172,18,128,18],[172,19,128,16],[173,0,129,13],[173,11,127,12],[173,17,130,17],[174,0,132,16,"self"],[174,12,132,16,"self"],[174,16,132,20],[174,17,132,21,"maybeReconnectOnOpen"],[174,37,132,16],[175,0,133,13],[176,0,134,9],[176,9,122,25],[176,10,122,8],[178,0,135,8],[178,12,135,12],[178,22,135,22],[178,27,135,27,"_timeout"],[178,35,135,8],[178,37,135,37],[179,0,136,12],[179,14,136,18,"timeout"],[179,21,136,25],[179,24,136,28],[179,29,136,33,"_timeout"],[179,37,136,12],[180,0,137,12,"debug"],[180,10,137,12,"debug"],[180,15,137,17],[180,16,137,18],[180,55,137,17],[180,57,137,59,"timeout"],[180,64,137,17],[180,65,137,12],[182,0,138,12],[182,14,138,16,"timeout"],[182,21,138,23],[182,26,138,28],[182,27,138,12],[182,29,138,31],[183,0,139,16,"openSub"],[183,12,139,16,"openSub"],[183,19,139,23],[183,20,139,24,"destroy"],[183,27,139,16],[184,0,140,13],[186,0,142,12],[186,14,142,18,"timer"],[186,19,142,23],[186,22,142,26,"setTimeout"],[186,32,142,36],[186,33,142,37],[186,45,142,43],[187,0,143,16,"debug"],[187,12,143,16,"debug"],[187,17,143,21],[187,18,143,22],[187,54,143,21],[187,56,143,60,"timeout"],[187,63,143,21],[187,64,143,16],[188,0,144,16,"openSub"],[188,12,144,16,"openSub"],[188,19,144,23],[188,20,144,24,"destroy"],[188,27,144,16],[189,0,145,16,"socket"],[189,12,145,16,"socket"],[189,18,145,22],[189,19,145,23,"close"],[189,24,145,16],[190,0,146,16,"socket"],[190,12,146,16,"socket"],[190,18,146,22],[190,19,146,23,"emit"],[190,23,146,16],[190,24,146,28],[190,31,146,16],[190,33,146,37],[190,37,146,41,"Error"],[190,42,146,37],[190,43,146,47],[190,52,146,37],[190,53,146,16],[191,0,147,13],[191,11,142,36],[191,13,147,15,"timeout"],[191,20,142,36],[191,21,142,12],[192,0,148,12],[192,15,148,17,"subs"],[192,19,148,12],[192,20,148,22,"push"],[192,24,148,12],[192,25,148,27],[193,0,149,16,"destroy"],[193,12,149,16,"destroy"],[193,19,149,23],[193,21,149,25],[193,40,149,37],[194,0,150,20,"clearTimeout"],[194,14,150,20,"clearTimeout"],[194,26,150,32],[194,27,150,33,"timer"],[194,32,150,32],[194,33,150,20],[195,0,151,17],[196,0,148,27],[196,11,148,12],[197,0,153,9],[199,0,154,8],[199,13,154,13,"subs"],[199,17,154,8],[199,18,154,18,"push"],[199,22,154,8],[199,23,154,23,"openSub"],[199,30,154,8],[200,0,155,8],[200,13,155,13,"subs"],[200,17,155,8],[200,18,155,18,"push"],[200,22,155,8],[200,23,155,23,"errorSub"],[200,31,155,8],[201,0,156,8],[201,15,156,15],[201,19,156,8],[202,0,157,5],[205,30,164,12,"fn"],[205,32],[205,34,164,16],[206,0,165,8],[206,15,165,15],[206,20,165,20,"open"],[206,24,165,15],[206,25,165,25,"fn"],[206,27,165,15],[206,28,165,8],[207,0,166,5],[210,31,172,13],[211,0,173,8,"debug"],[211,8,173,8,"debug"],[211,13,173,13],[211,14,173,14],[211,20,173,13],[211,21,173,8],[212,0,175,8],[212,13,175,13,"cleanup"],[212,20,175,8],[213,0,177,8],[213,13,177,13,"_readyState"],[213,24,177,8],[213,27,177,27],[213,33,177,8],[215,0,178,8],[215,74,178,19],[215,80,178,8],[217,0,180,8],[217,12,180,14,"socket"],[217,18,180,20],[217,21,180,23],[217,26,180,28,"engine"],[217,32,180,8],[218,0,181,8],[218,13,181,13,"subs"],[218,17,181,8],[218,18,181,18,"push"],[218,22,181,8],[218,23,181,23,"on_1"],[218,27,181,27],[218,28,181,28,"on"],[218,30,181,23],[218,31,181,31,"socket"],[218,37,181,23],[218,39,181,39],[218,45,181,23],[218,47,181,47,"bind"],[218,51,181,51],[218,52,181,52],[218,56,181,51],[218,58,181,58],[218,66,181,51],[218,67,181,23],[218,68,181,8],[219,0,182,8],[219,13,182,13,"subs"],[219,17,182,8],[219,18,182,18,"push"],[219,22,182,8],[219,23,182,23,"on_1"],[219,27,182,27],[219,28,182,28,"on"],[219,30,182,23],[219,31,182,31,"socket"],[219,37,182,23],[219,39,182,39],[219,45,182,23],[219,47,182,47,"bind"],[219,51,182,51],[219,52,182,52],[219,56,182,51],[219,58,182,58],[219,66,182,51],[219,67,182,23],[219,68,182,8],[220,0,183,8],[220,13,183,13,"subs"],[220,17,183,8],[220,18,183,18,"push"],[220,22,183,8],[220,23,183,23,"on_1"],[220,27,183,27],[220,28,183,28,"on"],[220,30,183,23],[220,31,183,31,"socket"],[220,37,183,23],[220,39,183,39],[220,46,183,23],[220,48,183,48,"bind"],[220,52,183,52],[220,53,183,53],[220,57,183,52],[220,59,183,59],[220,68,183,52],[220,69,183,23],[220,70,183,8],[221,0,184,8],[221,13,184,13,"subs"],[221,17,184,8],[221,18,184,18,"push"],[221,22,184,8],[221,23,184,23,"on_1"],[221,27,184,27],[221,28,184,28,"on"],[221,30,184,23],[221,31,184,31,"socket"],[221,37,184,23],[221,39,184,39],[221,46,184,23],[221,48,184,48,"bind"],[221,52,184,52],[221,53,184,53],[221,57,184,52],[221,59,184,59],[221,68,184,52],[221,69,184,23],[221,70,184,8],[222,0,185,8],[222,13,185,13,"subs"],[222,17,185,8],[222,18,185,18,"push"],[222,22,185,8],[222,23,185,23,"on_1"],[222,27,185,27],[222,28,185,28,"on"],[222,30,185,23],[222,31,185,31],[222,36,185,36,"decoder"],[222,43,185,23],[222,45,185,45],[222,54,185,23],[222,56,185,56,"bind"],[222,60,185,60],[222,61,185,61],[222,65,185,60],[222,67,185,67],[222,78,185,60],[222,79,185,23],[222,80,185,8],[223,0,186,5],[226,31,192,13],[227,0,193,8],[227,74,193,19],[227,80,193,8],[228,0,194,5],[231,29,200,11,"data"],[231,33],[231,35,200,17],[232,0,201,8],[232,13,201,13,"decoder"],[232,20,201,8],[232,21,201,21,"add"],[232,24,201,8],[232,25,201,25,"data"],[232,29,201,8],[233,0,202,5],[236,32,208,14,"packet"],[236,38],[236,40,208,22],[237,0,209,8],[237,74,209,19],[237,82,209,8],[237,84,209,29,"packet"],[237,90,209,8],[238,0,210,5],[241,30,216,12,"err"],[241,33],[241,35,216,17],[242,0,217,8,"debug"],[242,8,217,8,"debug"],[242,13,217,13],[242,14,217,14],[242,21,217,13],[242,23,217,23,"err"],[242,26,217,13],[242,27,217,8],[244,0,218,8],[244,74,218,19],[244,81,218,8],[244,83,218,28,"err"],[244,86,218,8],[245,0,219,5],[248,29,226,11,"nsp"],[248,32],[248,34,226,16,"opts"],[248,38],[248,40,226,22],[249,0,227,8],[249,12,227,12,"socket"],[249,18,227,18],[249,21,227,21],[249,26,227,26,"nsps"],[249,30,227,21],[249,31,227,31,"nsp"],[249,34,227,21],[249,35,227,8],[251,0,228,8],[251,12,228,12],[251,13,228,13,"socket"],[251,19,228,8],[251,21,228,21],[252,0,229,12,"socket"],[252,10,229,12,"socket"],[252,16,229,18],[252,19,229,21],[252,23,229,25,"socket_1"],[252,31,229,33],[252,32,229,34,"Socket"],[252,38,229,21],[252,39,229,41],[252,43,229,21],[252,45,229,47,"nsp"],[252,48,229,21],[252,50,229,52,"opts"],[252,54,229,21],[252,55,229,12],[253,0,230,12],[253,15,230,17,"nsps"],[253,19,230,12],[253,20,230,22,"nsp"],[253,23,230,12],[253,27,230,29,"socket"],[253,33,230,12],[254,0,231,12],[254,14,231,16,"self"],[254,18,231,20],[254,21,231,23],[254,25,231,12],[255,0,232,12,"socket"],[255,10,232,12,"socket"],[255,16,232,18],[255,17,232,19,"on"],[255,19,232,12],[255,20,232,22],[255,32,232,12],[255,34,232,36,"onConnecting"],[255,46,232,12],[257,0,233,12],[257,14,233,16],[257,19,233,21,"_autoConnect"],[257,31,233,12],[257,33,233,35],[258,0,235,16,"onConnecting"],[258,12,235,16,"onConnecting"],[258,24,235,28],[259,0,236,13],[260,0,237,9],[262,0,238,8],[262,17,238,17,"onConnecting"],[262,29,238,8],[262,32,238,32],[263,0,239,12],[263,14,239,16],[263,15,239,17],[263,16,239,18,"self"],[263,20,239,22],[263,21,239,23,"connecting"],[263,31,239,18],[263,32,239,34,"indexOf"],[263,39,239,18],[263,40,239,42,"socket"],[263,46,239,18],[263,47,239,12],[263,49,239,51],[264,0,240,16,"self"],[264,12,240,16,"self"],[264,16,240,20],[264,17,240,21,"connecting"],[264,27,240,16],[264,28,240,32,"push"],[264,32,240,16],[264,33,240,37,"socket"],[264,39,240,16],[265,0,241,13],[266,0,242,9],[268,0,243,8],[268,15,243,15,"socket"],[268,21,243,8],[269,0,244,5],[272,31,251,13,"socket"],[272,37],[272,39,251,21],[273,0,252,8],[273,12,252,14,"index"],[273,17,252,19],[273,20,252,22],[273,25,252,27,"connecting"],[273,35,252,22],[273,36,252,38,"indexOf"],[273,43,252,22],[273,44,252,46,"socket"],[273,50,252,22],[273,51,252,8],[274,0,253,8],[274,12,253,12],[274,13,253,13,"index"],[274,18,253,8],[274,20,254,12],[274,25,254,17,"connecting"],[274,35,254,12],[274,36,254,28,"splice"],[274,42,254,12],[274,43,254,35,"index"],[274,48,254,12],[274,50,254,42],[274,51,254,12],[275,0,255,8],[275,12,255,12],[275,17,255,17,"connecting"],[275,27,255,12],[275,28,255,28,"length"],[275,34,255,8],[275,36,256,12],[277,0,257,8],[277,13,257,13,"_close"],[277,19,257,8],[278,0,258,5],[281,30,265,12,"packet"],[281,36],[281,38,265,20],[282,0,266,8,"debug"],[282,8,266,8,"debug"],[282,13,266,13],[282,14,266,14],[282,33,266,13],[282,35,266,35,"packet"],[282,41,266,13],[282,42,266,8],[283,0,267,8],[283,12,267,12,"packet"],[283,18,267,18],[283,19,267,19,"query"],[283,24,267,12],[283,28,267,28,"packet"],[283,34,267,34],[283,35,267,35,"type"],[283,39,267,28],[283,44,267,44],[283,45,267,8],[283,47,268,12,"packet"],[283,53,268,18],[283,54,268,19,"nsp"],[283,57,268,12],[283,61,268,26],[283,67,268,32,"packet"],[283,73,268,38],[283,74,268,39,"query"],[283,79,268,12],[284,0,269,8],[284,12,269,14,"encodedPackets"],[284,26,269,28],[284,29,269,31],[284,34,269,36,"encoder"],[284,41,269,31],[284,42,269,44,"encode"],[284,48,269,31],[284,49,269,51,"packet"],[284,55,269,31],[284,56,269,8],[286,0,270,8],[286,13,270,13],[286,17,270,17,"i"],[286,18,270,18],[286,21,270,21],[286,22,270,8],[286,24,270,24,"i"],[286,25,270,25],[286,28,270,28,"encodedPackets"],[286,42,270,42],[286,43,270,43,"length"],[286,49,270,8],[286,51,270,51,"i"],[286,52,270,52],[286,54,270,8],[286,56,270,56],[287,0,271,12],[287,15,271,17,"engine"],[287,21,271,12],[287,22,271,24,"write"],[287,27,271,12],[287,28,271,30,"encodedPackets"],[287,42,271,44],[287,43,271,45,"i"],[287,44,271,44],[287,45,271,12],[287,47,271,49,"packet"],[287,53,271,55],[287,54,271,56,"options"],[287,61,271,12],[288,0,272,9],[289,0,273,5],[292,32,279,14],[293,0,280,8,"debug"],[293,8,280,8,"debug"],[293,13,280,13],[293,14,280,14],[293,23,280,13],[293,24,280,8],[294,0,281,8],[294,12,281,14,"subsLength"],[294,22,281,24],[294,25,281,27],[294,30,281,32,"subs"],[294,34,281,27],[294,35,281,37,"length"],[294,41,281,8],[296,0,282,8],[296,13,282,13],[296,17,282,17,"i"],[296,18,282,18],[296,21,282,21],[296,22,282,8],[296,24,282,24,"i"],[296,25,282,25],[296,28,282,28,"subsLength"],[296,38,282,8],[296,40,282,40,"i"],[296,41,282,41],[296,43,282,8],[296,45,282,45],[297,0,283,12],[297,14,283,18,"sub"],[297,17,283,21],[297,20,283,24],[297,25,283,29,"subs"],[297,29,283,24],[297,30,283,34,"shift"],[297,35,283,24],[297,37,283,12],[298,0,284,12,"sub"],[298,10,284,12,"sub"],[298,13,284,15],[298,14,284,16,"destroy"],[298,21,284,12],[299,0,285,9],[301,0,286,8],[301,13,286,13,"decoder"],[301,20,286,8],[301,21,286,21,"destroy"],[301,28,286,8],[302,0,287,5],[305,31,293,13],[306,0,294,8,"debug"],[306,8,294,8,"debug"],[306,13,294,13],[306,14,294,14],[306,26,294,13],[306,27,294,8],[307,0,295,8],[307,13,295,13,"skipReconnect"],[307,26,295,8],[307,29,295,29],[307,33,295,8],[308,0,296,8],[308,13,296,13,"_reconnecting"],[308,26,296,8],[308,29,296,29],[308,34,296,8],[310,0,297,8],[310,12,297,12],[310,26,297,26],[310,31,297,31,"_readyState"],[310,42,297,8],[310,44,297,44],[311,0,300,12],[311,15,300,17,"cleanup"],[311,22,300,12],[312,0,301,9],[314,0,302,8],[314,13,302,13,"backoff"],[314,20,302,8],[314,21,302,21,"reset"],[314,26,302,8],[315,0,303,8],[315,13,303,13,"_readyState"],[315,24,303,8],[315,27,303,27],[315,35,303,8],[316,0,304,8],[316,12,304,12],[316,17,304,17,"engine"],[316,23,304,8],[316,25,305,12],[316,30,305,17,"engine"],[316,36,305,12],[316,37,305,24,"close"],[316,42,305,12],[317,0,306,5],[320,35,312,17],[321,0,313,8],[321,15,313,15],[321,20,313,20,"_close"],[321,26,313,15],[321,28,313,8],[322,0,314,5],[325,30,320,12,"reason"],[325,36],[325,38,320,20],[326,0,321,8,"debug"],[326,8,321,8,"debug"],[326,13,321,13],[326,14,321,14],[326,23,321,13],[326,24,321,8],[327,0,322,8],[327,13,322,13,"cleanup"],[327,20,322,8],[328,0,323,8],[328,13,323,13,"backoff"],[328,20,323,8],[328,21,323,21,"reset"],[328,26,323,8],[329,0,324,8],[329,13,324,13,"_readyState"],[329,24,324,8],[329,27,324,27],[329,35,324,8],[331,0,325,8],[331,74,325,19],[331,81,325,8],[331,83,325,28,"reason"],[331,89,325,8],[333,0,326,8],[333,12,326,12],[333,17,326,17,"_reconnection"],[333,30,326,12],[333,34,326,34],[333,35,326,35],[333,40,326,40,"skipReconnect"],[333,53,326,8],[333,55,326,55],[334,0,327,12],[334,15,327,17,"reconnect"],[334,24,327,12],[335,0,328,9],[336,0,329,5],[339,34,335,16],[340,0,335,16],[342,0,336,8],[342,12,336,12],[342,17,336,17,"_reconnecting"],[342,30,336,12],[342,34,336,34],[342,39,336,39,"skipReconnect"],[342,52,336,8],[342,54,337,12],[342,61,337,19],[342,65,337,12],[343,0,338,8],[343,12,338,14,"self"],[343,16,338,18],[343,19,338,21],[343,23,338,8],[345,0,339,8],[345,12,339,12],[345,17,339,17,"backoff"],[345,24,339,12],[345,25,339,25,"attempts"],[345,33,339,12],[345,37,339,37],[345,42,339,42,"_reconnectionAttempts"],[345,63,339,8],[345,65,339,65],[346,0,340,12,"debug"],[346,10,340,12,"debug"],[346,15,340,17],[346,16,340,18],[346,34,340,17],[346,35,340,12],[347,0,341,12],[347,15,341,17,"backoff"],[347,22,341,12],[347,23,341,25,"reset"],[347,28,341,12],[349,0,342,12],[349,76,342,23],[349,94,342,12],[351,0,343,12],[351,15,343,17,"_reconnecting"],[351,28,343,12],[351,31,343,33],[351,36,343,12],[352,0,344,9],[352,9,339,8],[352,15,345,13],[353,0,346,12],[353,14,346,18,"delay"],[353,19,346,23],[353,22,346,26],[353,27,346,31,"backoff"],[353,34,346,26],[353,35,346,39,"duration"],[353,43,346,26],[353,45,346,12],[354,0,347,12,"debug"],[354,10,347,12,"debug"],[354,15,347,17],[354,16,347,18],[354,57,347,17],[354,59,347,61,"delay"],[354,64,347,17],[354,65,347,12],[355,0,348,12],[355,15,348,17,"_reconnecting"],[355,28,348,12],[355,31,348,33],[355,35,348,12],[356,0,349,12],[356,14,349,18,"timer"],[356,19,349,23],[356,22,349,26,"setTimeout"],[356,32,349,36],[356,33,349,37],[356,45,349,43],[357,0,350,16],[357,16,350,20,"self"],[357,20,350,24],[357,21,350,25,"skipReconnect"],[357,34,350,16],[357,36,351,20],[358,0,352,16,"debug"],[358,12,352,16,"debug"],[358,17,352,21],[358,18,352,22],[358,40,352,21],[358,41,352,16],[360,0,353,16],[360,82,353,27],[360,101,353,16],[360,103,353,48,"self"],[360,107,353,52],[360,108,353,53,"backoff"],[360,115,353,48],[360,116,353,61,"attempts"],[360,124,353,16],[362,0,355,16],[362,16,355,20,"self"],[362,20,355,24],[362,21,355,25,"skipReconnect"],[362,34,355,16],[362,36,356,20],[363,0,357,16,"self"],[363,12,357,16,"self"],[363,16,357,20],[363,17,357,21,"open"],[363,21,357,16],[363,22,357,26],[363,32,357,27,"err"],[363,35,357,26],[363,37,357,35],[364,0,358,20],[364,18,358,24,"err"],[364,21,358,20],[364,23,358,29],[365,0,359,24,"debug"],[365,16,359,24,"debug"],[365,21,359,29],[365,22,359,30],[365,47,359,29],[365,48,359,24],[366,0,360,24,"self"],[366,16,360,24,"self"],[366,20,360,28],[366,21,360,29,"_reconnecting"],[366,34,360,24],[366,37,360,45],[366,42,360,24],[367,0,361,24,"self"],[367,16,361,24,"self"],[367,20,361,28],[367,21,361,29,"reconnect"],[367,30,361,24],[369,0,362,24],[369,86,362,35],[369,103,362,24],[369,105,362,54,"err"],[369,108,362,24],[370,0,363,21],[370,15,358,20],[370,21,364,25],[371,0,365,24,"debug"],[371,16,365,24,"debug"],[371,21,365,29],[371,22,365,30],[371,41,365,29],[371,42,365,24],[372,0,366,24,"self"],[372,16,366,24,"self"],[372,20,366,28],[372,21,366,29,"onreconnect"],[372,32,366,24],[373,0,367,21],[374,0,368,17],[374,13,357,16],[375,0,369,13],[375,11,349,36],[375,13,369,15,"delay"],[375,18,349,36],[375,19,349,12],[376,0,370,12],[376,15,370,17,"subs"],[376,19,370,12],[376,20,370,22,"push"],[376,24,370,12],[376,25,370,27],[377,0,371,16,"destroy"],[377,12,371,16,"destroy"],[377,19,371,23],[377,21,371,25],[377,40,371,37],[378,0,372,20,"clearTimeout"],[378,14,372,20,"clearTimeout"],[378,26,372,32],[378,27,372,33,"timer"],[378,32,372,32],[378,33,372,20],[379,0,373,17],[380,0,370,27],[380,11,370,12],[381,0,375,9],[382,0,376,5],[385,36,382,18],[386,0,383,8],[386,12,383,14,"attempt"],[386,19,383,21],[386,22,383,24],[386,27,383,29,"backoff"],[386,34,383,24],[386,35,383,37,"attempts"],[386,43,383,8],[387,0,384,8],[387,13,384,13,"_reconnecting"],[387,26,384,8],[387,29,384,29],[387,34,384,8],[388,0,385,8],[388,13,385,13,"backoff"],[388,20,385,8],[388,21,385,21,"reset"],[388,26,385,8],[390,0,386,8],[390,74,386,19],[390,85,386,8],[390,87,386,32,"attempt"],[390,94,386,8],[391,0,387,5],[395,4,12,22,"Emitter"],[395,11],[397,0,389,0,"exports"],[397,2,389,0,"exports"],[397,9,389,7],[397,10,389,8,"Manager"],[397,17,389,0],[397,20,389,18,"Manager"],[397,27,389,0]],"functionMap":{"names":["<global>","Manager","Manager#constructor","Manager#reconnection","Manager#reconnectionAttempts","Manager#reconnectionDelay","Manager#randomizationFactor","Manager#reconnectionDelayMax","Manager#timeout","Manager#maybeReconnectOnOpen","Manager#open","on_1.on$argument_2","setTimeout$argument_0","subs.push$argument_0.destroy","Manager#connect","Manager#onopen","Manager#onping","Manager#ondata","Manager#ondecoded","Manager#onerror","Manager#socket","onConnecting","Manager#_destroy","Manager#_packet","Manager#cleanup","Manager#_close","Manager#disconnect","Manager#onclose","Manager#reconnect","self.open$argument_0","Manager#onreconnect"],"mappings":"AAA;ACW;ICC;KD+B;IEC;KFK;IGC;KHK;IIC;KJM;IKC;KLM;IMC;KNM;IOC;KPK;IQO;KRQ;ISQ;gDCW;SDG;kDCE;SDY;qCEQ;aFK;yBGE;iBHE;KTM;IaO;KbE;IcM;Kdc;IeM;KfE;IgBM;KhBE;IiBM;KjBE;IkBM;KlBG;ImBO;QCY;SDI;KnBE;IqBO;KrBO;IsBO;KtBQ;IuBM;KvBQ;IwBM;KxBa;IyBM;KzBE;I0BM;K1BS;I2BM;qChBc;0BiBQ;iBjBW;agBC;yBfE;iBeE;K3BG;I6BM;K7BK;CDC"}},"type":"js/module"}]}