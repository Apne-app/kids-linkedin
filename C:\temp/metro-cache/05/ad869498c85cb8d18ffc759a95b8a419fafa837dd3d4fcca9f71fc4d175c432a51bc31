{"dependencies":[{"name":"./core","data":{"isAsync":false,"locs":[{"start":{"line":4,"column":37},"end":{"line":4,"column":54}}]}},{"name":"./cipher-core","data":{"isAsync":false,"locs":[{"start":{"line":4,"column":56},"end":{"line":4,"column":80}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  ;\n\n  (function (root, factory, undef) {\n    if (typeof exports === \"object\") {\n      module.exports = exports = factory(_$$_REQUIRE(_dependencyMap[0], \"./core\"), _$$_REQUIRE(_dependencyMap[1], \"./cipher-core\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      define([\"./core\", \"./cipher-core\"], factory);\n    } else {\n      factory(root.CryptoJS);\n    }\n  })(this, function (CryptoJS) {\n    CryptoJS.mode.CFB = function () {\n      var CFB = CryptoJS.lib.BlockCipherMode.extend();\n      CFB.Encryptor = CFB.extend({\n        processBlock: function processBlock(words, offset) {\n          var cipher = this._cipher;\n          var blockSize = cipher.blockSize;\n          generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n          this._prevBlock = words.slice(offset, offset + blockSize);\n        }\n      });\n      CFB.Decryptor = CFB.extend({\n        processBlock: function processBlock(words, offset) {\n          var cipher = this._cipher;\n          var blockSize = cipher.blockSize;\n          var thisBlock = words.slice(offset, offset + blockSize);\n          generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n          this._prevBlock = thisBlock;\n        }\n      });\n\n      function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {\n        var iv = this._iv;\n\n        if (iv) {\n          var keystream = iv.slice(0);\n          this._iv = undefined;\n        } else {\n          var keystream = this._prevBlock;\n        }\n\n        cipher.encryptBlock(keystream, 0);\n\n        for (var i = 0; i < blockSize; i++) {\n          words[offset + i] ^= keystream[i];\n        }\n      }\n\n      return CFB;\n    }();\n\n    return CryptoJS.mode.CFB;\n  });\n});","lineCount":55,"map":[[2,0,1,0],[4,0,1,2],[4,13,1,12,"root"],[4,17,1,2],[4,19,1,18,"factory"],[4,26,1,2],[4,28,1,27,"undef"],[4,33,1,2],[4,35,1,34],[5,0,2,1],[5,8,2,5],[5,15,2,12,"exports"],[5,22,2,5],[5,27,2,24],[5,35,2,1],[5,37,2,34],[6,0,4,2,"module"],[6,6,4,2,"module"],[6,12,4,8],[6,13,4,9,"exports"],[6,20,4,2],[6,23,4,19,"exports"],[6,30,4,26],[6,33,4,29,"factory"],[6,40,4,36],[6,41,4,37,"require"],[6,52,4,44],[6,81,4,36],[6,83,4,56,"require"],[6,94,4,63],[6,130,4,36],[6,131,4,2],[7,0,5,2],[7,5,2,1],[7,11,6,6],[7,15,6,10],[7,22,6,17,"define"],[7,28,6,10],[7,33,6,28],[7,43,6,10],[7,47,6,42,"define"],[7,53,6,48],[7,54,6,49,"amd"],[7,57,6,6],[7,59,6,54],[8,0,8,2,"define"],[8,6,8,2,"define"],[8,12,8,8],[8,13,8,9],[8,14,8,10],[8,22,8,9],[8,24,8,20],[8,39,8,9],[8,40,8,8],[8,42,8,38,"factory"],[8,49,8,8],[8,50,8,2],[9,0,9,2],[9,5,6,6],[9,11,10,6],[10,0,12,2,"factory"],[10,6,12,2,"factory"],[10,13,12,9],[10,14,12,10,"root"],[10,18,12,14],[10,19,12,15,"CryptoJS"],[10,27,12,9],[10,28,12,2],[11,0,13,2],[12,0,14,1],[12,3,1,2],[12,5,14,2],[12,9,1,2],[12,11,14,8],[12,21,14,18,"CryptoJS"],[12,29,14,8],[12,31,14,28],[13,0,19,1,"CryptoJS"],[13,4,19,1,"CryptoJS"],[13,12,19,9],[13,13,19,10,"mode"],[13,17,19,1],[13,18,19,15,"CFB"],[13,21,19,1],[13,24,19,22],[13,36,19,34],[14,0,20,5],[14,10,20,9,"CFB"],[14,13,20,12],[14,16,20,15,"CryptoJS"],[14,24,20,23],[14,25,20,24,"lib"],[14,28,20,15],[14,29,20,28,"BlockCipherMode"],[14,44,20,15],[14,45,20,44,"extend"],[14,51,20,15],[14,53,20,5],[15,0,22,5,"CFB"],[15,6,22,5,"CFB"],[15,9,22,8],[15,10,22,9,"Encryptor"],[15,19,22,5],[15,22,22,21,"CFB"],[15,25,22,24],[15,26,22,25,"extend"],[15,32,22,21],[15,33,22,32],[16,0,23,9,"processBlock"],[16,8,23,9,"processBlock"],[16,20,23,21],[16,22,23,23],[16,44,23,33,"words"],[16,49,23,23],[16,51,23,40,"offset"],[16,57,23,23],[16,59,23,48],[17,0,25,13],[17,14,25,17,"cipher"],[17,20,25,23],[17,23,25,26],[17,28,25,31,"_cipher"],[17,35,25,13],[18,0,26,13],[18,14,26,17,"blockSize"],[18,23,26,26],[18,26,26,29,"cipher"],[18,32,26,35],[18,33,26,36,"blockSize"],[18,42,26,13],[19,0,28,13,"generateKeystreamAndEncrypt"],[19,10,28,13,"generateKeystreamAndEncrypt"],[19,37,28,40],[19,38,28,41,"call"],[19,42,28,13],[19,43,28,46],[19,47,28,13],[19,49,28,52,"words"],[19,54,28,13],[19,56,28,59,"offset"],[19,62,28,13],[19,64,28,67,"blockSize"],[19,73,28,13],[19,75,28,78,"cipher"],[19,81,28,13],[20,0,31,13],[20,15,31,18,"_prevBlock"],[20,25,31,13],[20,28,31,31,"words"],[20,33,31,36],[20,34,31,37,"slice"],[20,39,31,31],[20,40,31,43,"offset"],[20,46,31,31],[20,48,31,51,"offset"],[20,54,31,57],[20,57,31,60,"blockSize"],[20,66,31,31],[20,67,31,13],[21,0,32,10],[22,0,22,32],[22,7,22,21],[22,8,22,5],[23,0,35,5,"CFB"],[23,6,35,5,"CFB"],[23,9,35,8],[23,10,35,9,"Decryptor"],[23,19,35,5],[23,22,35,21,"CFB"],[23,25,35,24],[23,26,35,25,"extend"],[23,32,35,21],[23,33,35,32],[24,0,36,9,"processBlock"],[24,8,36,9,"processBlock"],[24,20,36,21],[24,22,36,23],[24,44,36,33,"words"],[24,49,36,23],[24,51,36,40,"offset"],[24,57,36,23],[24,59,36,48],[25,0,38,13],[25,14,38,17,"cipher"],[25,20,38,23],[25,23,38,26],[25,28,38,31,"_cipher"],[25,35,38,13],[26,0,39,13],[26,14,39,17,"blockSize"],[26,23,39,26],[26,26,39,29,"cipher"],[26,32,39,35],[26,33,39,36,"blockSize"],[26,42,39,13],[27,0,42,13],[27,14,42,17,"thisBlock"],[27,23,42,26],[27,26,42,29,"words"],[27,31,42,34],[27,32,42,35,"slice"],[27,37,42,29],[27,38,42,41,"offset"],[27,44,42,29],[27,46,42,49,"offset"],[27,52,42,55],[27,55,42,58,"blockSize"],[27,64,42,29],[27,65,42,13],[28,0,44,13,"generateKeystreamAndEncrypt"],[28,10,44,13,"generateKeystreamAndEncrypt"],[28,37,44,40],[28,38,44,41,"call"],[28,42,44,13],[28,43,44,46],[28,47,44,13],[28,49,44,52,"words"],[28,54,44,13],[28,56,44,59,"offset"],[28,62,44,13],[28,64,44,67,"blockSize"],[28,73,44,13],[28,75,44,78,"cipher"],[28,81,44,13],[29,0,47,13],[29,15,47,18,"_prevBlock"],[29,25,47,13],[29,28,47,31,"thisBlock"],[29,37,47,13],[30,0,48,10],[31,0,35,32],[31,7,35,21],[31,8,35,5],[33,0,51,5],[33,15,51,14,"generateKeystreamAndEncrypt"],[33,42,51,5],[33,43,51,42,"words"],[33,48,51,5],[33,50,51,49,"offset"],[33,56,51,5],[33,58,51,57,"blockSize"],[33,67,51,5],[33,69,51,68,"cipher"],[33,75,51,5],[33,77,51,76],[34,0,53,9],[34,12,53,13,"iv"],[34,14,53,15],[34,17,53,18],[34,22,53,23,"_iv"],[34,25,53,9],[36,0,56,9],[36,12,56,13,"iv"],[36,14,56,9],[36,16,56,17],[37,0,57,13],[37,14,57,17,"keystream"],[37,23,57,26],[37,26,57,29,"iv"],[37,28,57,31],[37,29,57,32,"slice"],[37,34,57,29],[37,35,57,38],[37,36,57,29],[37,37,57,13],[38,0,60,13],[38,15,60,18,"_iv"],[38,18,60,13],[38,21,60,24,"undefined"],[38,30,60,13],[39,0,61,10],[39,9,56,9],[39,15,61,16],[40,0,62,13],[40,14,62,17,"keystream"],[40,23,62,26],[40,26,62,29],[40,31,62,34,"_prevBlock"],[40,41,62,13],[41,0,63,10],[43,0,64,9,"cipher"],[43,8,64,9,"cipher"],[43,14,64,15],[43,15,64,16,"encryptBlock"],[43,27,64,9],[43,28,64,29,"keystream"],[43,37,64,9],[43,39,64,40],[43,40,64,9],[45,0,67,9],[45,13,67,14],[45,17,67,18,"i"],[45,18,67,19],[45,21,67,22],[45,22,67,9],[45,24,67,25,"i"],[45,25,67,26],[45,28,67,29,"blockSize"],[45,37,67,9],[45,39,67,40,"i"],[45,40,67,41],[45,42,67,9],[45,44,67,45],[46,0,68,13,"words"],[46,10,68,13,"words"],[46,15,68,18],[46,16,68,19,"offset"],[46,22,68,25],[46,25,68,28,"i"],[46,26,68,18],[46,27,68,13],[46,31,68,34,"keystream"],[46,40,68,43],[46,41,68,44,"i"],[46,42,68,43],[46,43,68,13],[47,0,69,10],[48,0,70,6],[50,0,72,5],[50,13,72,12,"CFB"],[50,16,72,5],[51,0,73,2],[51,5,19,22],[51,7,19,1],[53,0,76,1],[53,11,76,8,"CryptoJS"],[53,19,76,16],[53,20,76,17,"mode"],[53,24,76,8],[53,25,76,22,"CFB"],[53,28,76,1],[54,0,78,1],[54,3,1,2],[54,4,1,1]],"functionMap":{"names":["<global>","<anonymous>","CFB.extend$argument_0.processBlock","generateKeystreamAndEncrypt"],"mappings":"AAA,EC;CDa,OC;uBCS;UDS;uBCI;UDY;KEG;MFmB;CDQ"}},"type":"js/module"}]}