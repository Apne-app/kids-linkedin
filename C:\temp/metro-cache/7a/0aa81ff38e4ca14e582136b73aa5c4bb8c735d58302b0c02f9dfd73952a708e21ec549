{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/inherits","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"isAsync":false}},{"name":"../transport","data":{"isAsync":false}},{"name":"parseqs","data":{"isAsync":false}},{"name":"engine.io-parser","data":{"isAsync":false}},{"name":"yeast","data":{"isAsync":false}},{"name":"debug","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n\n  var _createClass = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n\n  var _inherits = _$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/inherits\");\n\n  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/possibleConstructorReturn\");\n\n  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/getPrototypeOf\");\n\n  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\n  function _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n  var Transport = _$$_REQUIRE(_dependencyMap[5], \"../transport\");\n\n  var parseqs = _$$_REQUIRE(_dependencyMap[6], \"parseqs\");\n\n  var parser = _$$_REQUIRE(_dependencyMap[7], \"engine.io-parser\");\n\n  var yeast = _$$_REQUIRE(_dependencyMap[8], \"yeast\");\n\n  var debug = _$$_REQUIRE(_dependencyMap[9], \"debug\")(\"engine.io-client:polling\");\n\n  var Polling = function (_Transport) {\n    \"use strict\";\n\n    _inherits(Polling, _Transport);\n\n    var _super = _createSuper(Polling);\n\n    function Polling() {\n      _classCallCheck(this, Polling);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(Polling, [{\n      key: \"doOpen\",\n      value: function doOpen() {\n        this.poll();\n      }\n    }, {\n      key: \"pause\",\n      value: function pause(onPause) {\n        var self = this;\n        this.readyState = \"pausing\";\n\n        function pause() {\n          debug(\"paused\");\n          self.readyState = \"paused\";\n          onPause();\n        }\n\n        if (this.polling || !this.writable) {\n          var total = 0;\n\n          if (this.polling) {\n            debug(\"we are currently polling - waiting to pause\");\n            total++;\n            this.once(\"pollComplete\", function () {\n              debug(\"pre-pause polling complete\");\n              --total || pause();\n            });\n          }\n\n          if (!this.writable) {\n            debug(\"we are currently writing - waiting to pause\");\n            total++;\n            this.once(\"drain\", function () {\n              debug(\"pre-pause writing complete\");\n              --total || pause();\n            });\n          }\n        } else {\n          pause();\n        }\n      }\n    }, {\n      key: \"poll\",\n      value: function poll() {\n        debug(\"polling\");\n        this.polling = true;\n        this.doPoll();\n        this.emit(\"poll\");\n      }\n    }, {\n      key: \"onData\",\n      value: function onData(data) {\n        var self = this;\n        debug(\"polling got data %s\", data);\n\n        var callback = function callback(packet, index, total) {\n          if (\"opening\" === self.readyState && packet.type === \"open\") {\n            self.onOpen();\n          }\n\n          if (\"close\" === packet.type) {\n            self.onClose();\n            return false;\n          }\n\n          self.onPacket(packet);\n        };\n\n        parser.decodePayload(data, this.socket.binaryType).forEach(callback);\n\n        if (\"closed\" !== this.readyState) {\n          this.polling = false;\n          this.emit(\"pollComplete\");\n\n          if (\"open\" === this.readyState) {\n            this.poll();\n          } else {\n            debug('ignoring poll - transport state \"%s\"', this.readyState);\n          }\n        }\n      }\n    }, {\n      key: \"doClose\",\n      value: function doClose() {\n        var self = this;\n\n        function close() {\n          debug(\"writing close packet\");\n          self.write([{\n            type: \"close\"\n          }]);\n        }\n\n        if (\"open\" === this.readyState) {\n          debug(\"transport open - closing\");\n          close();\n        } else {\n          debug(\"transport not open - deferring close\");\n          this.once(\"open\", close);\n        }\n      }\n    }, {\n      key: \"write\",\n      value: function write(packets) {\n        var _this = this;\n\n        this.writable = false;\n        parser.encodePayload(packets, function (data) {\n          _this.doWrite(data, function () {\n            _this.writable = true;\n\n            _this.emit(\"drain\");\n          });\n        });\n      }\n    }, {\n      key: \"uri\",\n      value: function uri() {\n        var query = this.query || {};\n        var schema = this.opts.secure ? \"https\" : \"http\";\n        var port = \"\";\n\n        if (false !== this.opts.timestampRequests) {\n          query[this.opts.timestampParam] = yeast();\n        }\n\n        if (!this.supportsBinary && !query.sid) {\n          query.b64 = 1;\n        }\n\n        query = parseqs.encode(query);\n\n        if (this.opts.port && (\"https\" === schema && Number(this.opts.port) !== 443 || \"http\" === schema && Number(this.opts.port) !== 80)) {\n          port = \":\" + this.opts.port;\n        }\n\n        if (query.length) {\n          query = \"?\" + query;\n        }\n\n        var ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n        return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + query;\n      }\n    }, {\n      key: \"name\",\n      get: function get() {\n        return \"polling\";\n      }\n    }]);\n\n    return Polling;\n  }(Transport);\n\n  module.exports = Polling;\n});","lineCount":193,"map":[[16,0,1,0],[16,6,1,6,"Transport"],[16,15,1,15],[16,18,1,18,"require"],[16,29,1,25],[16,64,1,0],[18,0,2,0],[18,6,2,6,"parseqs"],[18,13,2,13],[18,16,2,16,"require"],[18,27,2,23],[18,57,2,0],[20,0,3,0],[20,6,3,6,"parser"],[20,12,3,12],[20,15,3,15,"require"],[20,26,3,22],[20,65,3,0],[22,0,4,0],[22,6,4,6,"yeast"],[22,11,4,11],[22,14,4,14,"require"],[22,25,4,21],[22,53,4,0],[24,0,6,0],[24,6,6,6,"debug"],[24,11,6,11],[24,14,6,14,"require"],[24,25,6,21],[24,53,6,14],[24,54,6,31],[24,80,6,14],[24,81,6,0],[26,6,8,6,"Polling"],[26,13],[41,31,22,11],[42,0,23,4],[42,13,23,9,"poll"],[42,17,23,4],[43,0,24,3],[46,28,32,8,"onPause"],[46,35],[46,37,32,17],[47,0,33,4],[47,12,33,10,"self"],[47,16,33,14],[47,19,33,17],[47,23,33,4],[48,0,35,4],[48,13,35,9,"readyState"],[48,23,35,4],[48,26,35,22],[48,35,35,4],[50,0,37,4],[50,17,37,13,"pause"],[50,22,37,4],[50,25,37,21],[51,0,38,6,"debug"],[51,10,38,6,"debug"],[51,15,38,11],[51,16,38,12],[51,24,38,11],[51,25,38,6],[52,0,39,6,"self"],[52,10,39,6,"self"],[52,14,39,10],[52,15,39,11,"readyState"],[52,25,39,6],[52,28,39,24],[52,36,39,6],[53,0,40,6,"onPause"],[53,10,40,6,"onPause"],[53,17,40,13],[54,0,41,5],[56,0,43,4],[56,12,43,8],[56,17,43,13,"polling"],[56,24,43,8],[56,28,43,24],[56,29,43,25],[56,34,43,30,"writable"],[56,42,43,4],[56,44,43,40],[57,0,44,6],[57,14,44,10,"total"],[57,19,44,15],[57,22,44,18],[57,23,44,6],[59,0,46,6],[59,14,46,10],[59,19,46,15,"polling"],[59,26,46,6],[59,28,46,24],[60,0,47,8,"debug"],[60,12,47,8,"debug"],[60,17,47,13],[60,18,47,14],[60,63,47,13],[60,64,47,8],[61,0,48,8,"total"],[61,12,48,8,"total"],[61,17,48,13],[62,0,49,8],[62,17,49,13,"once"],[62,21,49,8],[62,22,49,18],[62,36,49,8],[62,38,49,34],[62,50,49,45],[63,0,50,10,"debug"],[63,14,50,10,"debug"],[63,19,50,15],[63,20,50,16],[63,48,50,15],[63,49,50,10],[64,0,51,10],[64,16,51,12,"total"],[64,21,51,10],[64,25,51,21,"pause"],[64,30,51,26],[64,32,51,10],[65,0,52,9],[65,13,49,8],[66,0,53,7],[68,0,55,6],[68,14,55,10],[68,15,55,11],[68,20,55,16,"writable"],[68,28,55,6],[68,30,55,26],[69,0,56,8,"debug"],[69,12,56,8,"debug"],[69,17,56,13],[69,18,56,14],[69,63,56,13],[69,64,56,8],[70,0,57,8,"total"],[70,12,57,8,"total"],[70,17,57,13],[71,0,58,8],[71,17,58,13,"once"],[71,21,58,8],[71,22,58,18],[71,29,58,8],[71,31,58,27],[71,43,58,38],[72,0,59,10,"debug"],[72,14,59,10,"debug"],[72,19,59,15],[72,20,59,16],[72,48,59,15],[72,49,59,10],[73,0,60,10],[73,16,60,12,"total"],[73,21,60,10],[73,25,60,21,"pause"],[73,30,60,26],[73,32,60,10],[74,0,61,9],[74,13,58,8],[75,0,62,7],[76,0,63,5],[76,9,43,4],[76,15,63,11],[77,0,64,6,"pause"],[77,10,64,6,"pause"],[77,15,64,11],[78,0,65,5],[79,0,66,3],[82,29,73,9],[83,0,74,4,"debug"],[83,8,74,4,"debug"],[83,13,74,9],[83,14,74,10],[83,23,74,9],[83,24,74,4],[84,0,75,4],[84,13,75,9,"polling"],[84,20,75,4],[84,23,75,19],[84,27,75,4],[85,0,76,4],[85,13,76,9,"doPoll"],[85,19,76,4],[86,0,77,4],[86,13,77,9,"emit"],[86,17,77,4],[86,18,77,14],[86,24,77,4],[87,0,78,3],[90,29,85,9,"data"],[90,33],[90,35,85,15],[91,0,86,4],[91,12,86,10,"self"],[91,16,86,14],[91,19,86,17],[91,23,86,4],[92,0,87,4,"debug"],[92,8,87,4,"debug"],[92,13,87,9],[92,14,87,10],[92,35,87,9],[92,37,87,33,"data"],[92,41,87,9],[92,42,87,4],[94,0,88,4],[94,12,88,10,"callback"],[94,20,88,18],[94,23,88,21],[94,32,88,10,"callback"],[94,40,88,21],[94,41,88,30,"packet"],[94,47,88,21],[94,49,88,38,"index"],[94,54,88,21],[94,56,88,45,"total"],[94,61,88,21],[94,63,88,52],[95,0,90,6],[95,14,90,10],[95,28,90,24,"self"],[95,32,90,28],[95,33,90,29,"readyState"],[95,43,90,10],[95,47,90,43,"packet"],[95,53,90,49],[95,54,90,50,"type"],[95,58,90,43],[95,63,90,59],[95,69,90,6],[95,71,90,67],[96,0,91,8,"self"],[96,12,91,8,"self"],[96,16,91,12],[96,17,91,13,"onOpen"],[96,23,91,8],[97,0,92,7],[99,0,95,6],[99,14,95,10],[99,26,95,22,"packet"],[99,32,95,28],[99,33,95,29,"type"],[99,37,95,6],[99,39,95,35],[100,0,96,8,"self"],[100,12,96,8,"self"],[100,16,96,12],[100,17,96,13,"onClose"],[100,24,96,8],[101,0,97,8],[101,19,97,15],[101,24,97,8],[102,0,98,7],[104,0,101,6,"self"],[104,10,101,6,"self"],[104,14,101,10],[104,15,101,11,"onPacket"],[104,23,101,6],[104,24,101,20,"packet"],[104,30,101,6],[105,0,102,5],[105,9,88,4],[107,0,105,4,"parser"],[107,8,105,4,"parser"],[107,14,105,10],[107,15,105,11,"decodePayload"],[107,28,105,4],[107,29,105,25,"data"],[107,33,105,4],[107,35,105,31],[107,40,105,36,"socket"],[107,46,105,31],[107,47,105,43,"binaryType"],[107,57,105,4],[107,59,105,55,"forEach"],[107,66,105,4],[107,67,105,63,"callback"],[107,75,105,4],[109,0,108,4],[109,12,108,8],[109,25,108,21],[109,30,108,26,"readyState"],[109,40,108,4],[109,42,108,38],[110,0,110,6],[110,15,110,11,"polling"],[110,22,110,6],[110,25,110,21],[110,30,110,6],[111,0,111,6],[111,15,111,11,"emit"],[111,19,111,6],[111,20,111,16],[111,34,111,6],[113,0,113,6],[113,14,113,10],[113,25,113,21],[113,30,113,26,"readyState"],[113,40,113,6],[113,42,113,38],[114,0,114,8],[114,17,114,13,"poll"],[114,21,114,8],[115,0,115,7],[115,11,113,6],[115,17,115,13],[116,0,116,8,"debug"],[116,12,116,8,"debug"],[116,17,116,13],[116,18,116,14],[116,56,116,13],[116,58,116,54],[116,63,116,59,"readyState"],[116,73,116,13],[116,74,116,8],[117,0,117,7],[118,0,118,5],[119,0,119,3],[122,32,126,12],[123,0,127,4],[123,12,127,10,"self"],[123,16,127,14],[123,19,127,17],[123,23,127,4],[125,0,129,4],[125,17,129,13,"close"],[125,22,129,4],[125,25,129,21],[126,0,130,6,"debug"],[126,10,130,6,"debug"],[126,15,130,11],[126,16,130,12],[126,38,130,11],[126,39,130,6],[127,0,131,6,"self"],[127,10,131,6,"self"],[127,14,131,10],[127,15,131,11,"write"],[127,20,131,6],[127,21,131,17],[127,22,131,18],[128,0,131,20,"type"],[128,12,131,20,"type"],[128,16,131,24],[128,18,131,26],[129,0,131,18],[129,11,131,17],[129,12,131,6],[130,0,132,5],[132,0,134,4],[132,12,134,8],[132,23,134,19],[132,28,134,24,"readyState"],[132,38,134,4],[132,40,134,36],[133,0,135,6,"debug"],[133,10,135,6,"debug"],[133,15,135,11],[133,16,135,12],[133,42,135,11],[133,43,135,6],[134,0,136,6,"close"],[134,10,136,6,"close"],[134,15,136,11],[135,0,137,5],[135,9,134,4],[135,15,137,11],[136,0,140,6,"debug"],[136,10,140,6,"debug"],[136,15,140,11],[136,16,140,12],[136,54,140,11],[136,55,140,6],[137,0,141,6],[137,15,141,11,"once"],[137,19,141,6],[137,20,141,16],[137,26,141,6],[137,28,141,24,"close"],[137,33,141,6],[138,0,142,5],[139,0,143,3],[142,28,152,8,"packets"],[142,35],[142,37,152,17],[143,0,152,17],[145,0,153,4],[145,13,153,9,"writable"],[145,21,153,4],[145,24,153,20],[145,29,153,4],[146,0,155,4,"parser"],[146,8,155,4,"parser"],[146,14,155,10],[146,15,155,11,"encodePayload"],[146,28,155,4],[146,29,155,25,"packets"],[146,36,155,4],[146,38,155,34],[146,48,155,34,"data"],[146,52,155,38],[146,54,155,42],[147,0,156,6],[147,10,156,6],[147,15,156,10],[147,16,156,11,"doWrite"],[147,23,156,6],[147,24,156,19,"data"],[147,28,156,6],[147,30,156,25],[147,42,156,31],[148,0,157,8],[148,12,157,8],[148,17,157,12],[148,18,157,13,"writable"],[148,26,157,8],[148,29,157,24],[148,33,157,8],[150,0,158,8],[150,12,158,8],[150,17,158,12],[150,18,158,13,"emit"],[150,22,158,8],[150,23,158,18],[150,30,158,8],[151,0,159,7],[151,11,156,6],[152,0,160,5],[152,9,155,4],[153,0,161,3],[156,28,168,8],[157,0,169,4],[157,12,169,8,"query"],[157,17,169,13],[157,20,169,16],[157,25,169,21,"query"],[157,30,169,16],[157,34,169,30],[157,36,169,4],[158,0,170,4],[158,12,170,10,"schema"],[158,18,170,16],[158,21,170,19],[158,26,170,24,"opts"],[158,30,170,19],[158,31,170,29,"secure"],[158,37,170,19],[158,40,170,38],[158,47,170,19],[158,50,170,48],[158,56,170,4],[159,0,171,4],[159,12,171,8,"port"],[159,16,171,12],[159,19,171,15],[159,21,171,4],[161,0,174,4],[161,12,174,8],[161,22,174,18],[161,27,174,23,"opts"],[161,31,174,18],[161,32,174,28,"timestampRequests"],[161,49,174,4],[161,51,174,47],[162,0,175,6,"query"],[162,10,175,6,"query"],[162,15,175,11],[162,16,175,12],[162,21,175,17,"opts"],[162,25,175,12],[162,26,175,22,"timestampParam"],[162,40,175,11],[162,41,175,6],[162,44,175,40,"yeast"],[162,49,175,45],[162,51,175,6],[163,0,176,5],[165,0,178,4],[165,12,178,8],[165,13,178,9],[165,18,178,14,"supportsBinary"],[165,32,178,8],[165,36,178,32],[165,37,178,33,"query"],[165,42,178,38],[165,43,178,39,"sid"],[165,46,178,4],[165,48,178,44],[166,0,179,6,"query"],[166,10,179,6,"query"],[166,15,179,11],[166,16,179,12,"b64"],[166,19,179,6],[166,22,179,18],[166,23,179,6],[167,0,180,5],[169,0,182,4,"query"],[169,8,182,4,"query"],[169,13,182,9],[169,16,182,12,"parseqs"],[169,23,182,19],[169,24,182,20,"encode"],[169,30,182,12],[169,31,182,27,"query"],[169,36,182,12],[169,37,182,4],[171,0,185,4],[171,12,186,6],[171,17,186,11,"opts"],[171,21,186,6],[171,22,186,16,"port"],[171,26,186,6],[171,31,187,8],[171,43,187,20,"schema"],[171,49,187,8],[171,53,187,30,"Number"],[171,59,187,36],[171,60,187,37],[171,65,187,42,"opts"],[171,69,187,37],[171,70,187,47,"port"],[171,74,187,36],[171,75,187,30],[171,80,187,57],[171,83,187,7],[171,87,188,9],[171,98,188,20,"schema"],[171,104,188,9],[171,108,188,30,"Number"],[171,114,188,36],[171,115,188,37],[171,120,188,42,"opts"],[171,124,188,37],[171,125,188,47,"port"],[171,129,188,36],[171,130,188,30],[171,135,188,57],[171,137,186,6],[171,138,185,4],[171,140,189,6],[172,0,190,6,"port"],[172,10,190,6,"port"],[172,14,190,10],[172,17,190,13],[172,23,190,19],[172,28,190,24,"opts"],[172,32,190,19],[172,33,190,29,"port"],[172,37,190,6],[173,0,191,5],[175,0,194,4],[175,12,194,8,"query"],[175,17,194,13],[175,18,194,14,"length"],[175,24,194,4],[175,26,194,22],[176,0,195,6,"query"],[176,10,195,6,"query"],[176,15,195,11],[176,18,195,14],[176,24,195,20,"query"],[176,29,195,6],[177,0,196,5],[179,0,198,4],[179,12,198,10,"ipv6"],[179,16,198,14],[179,19,198,17],[179,24,198,22,"opts"],[179,28,198,17],[179,29,198,27,"hostname"],[179,37,198,17],[179,38,198,36,"indexOf"],[179,45,198,17],[179,46,198,44],[179,49,198,17],[179,55,198,53],[179,56,198,54],[179,57,198,4],[180,0,199,4],[180,15,200,6,"schema"],[180,21,200,12],[180,24,201,6],[180,29,200,6],[180,33,202,7,"ipv6"],[180,37,202,11],[180,40,202,14],[180,46,202,20],[180,51,202,25,"opts"],[180,55,202,20],[180,56,202,30,"hostname"],[180,64,202,14],[180,67,202,41],[180,70,202,11],[180,73,202,47],[180,78,202,52,"opts"],[180,82,202,47],[180,83,202,57,"hostname"],[180,91,200,6],[180,95,203,6,"port"],[180,99,200,6],[180,102,204,6],[180,107,204,11,"opts"],[180,111,204,6],[180,112,204,16,"path"],[180,116,200,6],[180,119,205,6,"query"],[180,124,199,4],[181,0,207,3],[184,26,12,13],[185,0,13,4],[185,15,13,11],[185,24,13,4],[186,0,14,3],[190,4,8,22,"Transport"],[190,13],[192,0,210,0,"module"],[192,2,210,0,"module"],[192,8,210,6],[192,9,210,7,"exports"],[192,16,210,0],[192,19,210,17,"Polling"],[192,26,210,0]],"functionMap":{"names":["<global>","Polling","Polling#get__name","Polling#doOpen","Polling#pause","pause","once$argument_1","Polling#poll","Polling#onData","callback","Polling#doClose","close","Polling#write","parser.encodePayload$argument_1","doWrite$argument_1","Polling#uri"],"mappings":"AAA;ACO;ECI;GDE;EEQ;GFE;EGQ;ICK;KDI;kCEQ;SFG;2BEM;SFG;GHK;EMO;GNK;EOO;qBCG;KDc;GPiB;ESO;ICG;KDG;GTW;EWS;kCCG;yBCC;ODG;KDC;GXC;EcO;GduC;CDC"}},"type":"js/module"}]}