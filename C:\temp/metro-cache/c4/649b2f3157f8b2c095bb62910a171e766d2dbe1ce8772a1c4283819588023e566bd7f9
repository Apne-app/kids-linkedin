{"dependencies":[{"name":"@babel/runtime/helpers/get","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/inherits","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/createClass","data":{"isAsync":false}},{"name":"component-emitter","data":{"isAsync":false}},{"name":"./binary","data":{"isAsync":false}},{"name":"./is-binary","data":{"isAsync":false}},{"name":"debug","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _get = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/get\");\n\n  var _inherits = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/inherits\");\n\n  var _possibleConstructorReturn = _$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/possibleConstructorReturn\");\n\n  var _getPrototypeOf = _$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/getPrototypeOf\");\n\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/classCallCheck\");\n\n  var _createClass = _$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/createClass\");\n\n  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\n  function _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Decoder = exports.Encoder = exports.PacketType = exports.protocol = void 0;\n\n  var Emitter = _$$_REQUIRE(_dependencyMap[6], \"component-emitter\");\n\n  var binary_1 = _$$_REQUIRE(_dependencyMap[7], \"./binary\");\n\n  var is_binary_1 = _$$_REQUIRE(_dependencyMap[8], \"./is-binary\");\n\n  var debug = _$$_REQUIRE(_dependencyMap[9], \"debug\")(\"socket.io-parser\");\n\n  exports.protocol = 5;\n  var PacketType;\n\n  (function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n  })(PacketType = exports.PacketType || (exports.PacketType = {}));\n\n  var Encoder = function () {\n    function Encoder() {\n      _classCallCheck(this, Encoder);\n    }\n\n    _createClass(Encoder, [{\n      key: \"encode\",\n      value: function encode(obj) {\n        debug(\"encoding packet %j\", obj);\n\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n          if (is_binary_1.hasBinary(obj)) {\n            obj.type = obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK;\n            return this.encodeAsBinary(obj);\n          }\n        }\n\n        return [this.encodeAsString(obj)];\n      }\n    }, {\n      key: \"encodeAsString\",\n      value: function encodeAsString(obj) {\n        var str = \"\" + obj.type;\n\n        if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {\n          str += obj.attachments + \"-\";\n        }\n\n        if (obj.nsp && \"/\" !== obj.nsp) {\n          str += obj.nsp + \",\";\n        }\n\n        if (null != obj.id) {\n          str += obj.id;\n        }\n\n        if (null != obj.data) {\n          str += JSON.stringify(obj.data);\n        }\n\n        debug(\"encoded %j as %s\", obj, str);\n        return str;\n      }\n    }, {\n      key: \"encodeAsBinary\",\n      value: function encodeAsBinary(obj) {\n        var deconstruction = binary_1.deconstructPacket(obj);\n        var pack = this.encodeAsString(deconstruction.packet);\n        var buffers = deconstruction.buffers;\n        buffers.unshift(pack);\n        return buffers;\n      }\n    }]);\n\n    return Encoder;\n  }();\n\n  exports.Encoder = Encoder;\n\n  var Decoder = function (_Emitter) {\n    _inherits(Decoder, _Emitter);\n\n    var _super = _createSuper(Decoder);\n\n    function Decoder() {\n      _classCallCheck(this, Decoder);\n\n      return _super.call(this);\n    }\n\n    _createClass(Decoder, [{\n      key: \"add\",\n      value: function add(obj) {\n        var packet;\n\n        if (typeof obj === \"string\") {\n          packet = this.decodeString(obj);\n\n          if (packet.type === PacketType.BINARY_EVENT || packet.type === PacketType.BINARY_ACK) {\n            this.reconstructor = new BinaryReconstructor(packet);\n\n            if (packet.attachments === 0) {\n              _get(_getPrototypeOf(Decoder.prototype), \"emit\", this).call(this, \"decoded\", packet);\n            }\n          } else {\n            _get(_getPrototypeOf(Decoder.prototype), \"emit\", this).call(this, \"decoded\", packet);\n          }\n        } else if (is_binary_1.isBinary(obj) || obj.base64) {\n          if (!this.reconstructor) {\n            throw new Error(\"got binary data when not reconstructing a packet\");\n          } else {\n            packet = this.reconstructor.takeBinaryData(obj);\n\n            if (packet) {\n              this.reconstructor = null;\n\n              _get(_getPrototypeOf(Decoder.prototype), \"emit\", this).call(this, \"decoded\", packet);\n            }\n          }\n        } else {\n          throw new Error(\"Unknown type: \" + obj);\n        }\n      }\n    }, {\n      key: \"decodeString\",\n      value: function decodeString(str) {\n        var i = 0;\n        var p = {\n          type: Number(str.charAt(0))\n        };\n\n        if (PacketType[p.type] === undefined) {\n          throw new Error(\"unknown packet type \" + p.type);\n        }\n\n        if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {\n          var start = i + 1;\n\n          while (str.charAt(++i) !== \"-\" && i != str.length) {}\n\n          var buf = str.substring(start, i);\n\n          if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n            throw new Error(\"Illegal attachments\");\n          }\n\n          p.attachments = Number(buf);\n        }\n\n        if (\"/\" === str.charAt(i + 1)) {\n          var _start = i + 1;\n\n          while (++i) {\n            var c = str.charAt(i);\n            if (\",\" === c) break;\n            if (i === str.length) break;\n          }\n\n          p.nsp = str.substring(_start, i);\n        } else {\n          p.nsp = \"/\";\n        }\n\n        var next = str.charAt(i + 1);\n\n        if (\"\" !== next && Number(next) == next) {\n          var _start2 = i + 1;\n\n          while (++i) {\n            var _c = str.charAt(i);\n\n            if (null == _c || Number(_c) != _c) {\n              --i;\n              break;\n            }\n\n            if (i === str.length) break;\n          }\n\n          p.id = Number(str.substring(_start2, i + 1));\n        }\n\n        if (str.charAt(++i)) {\n          var payload = tryParse(str.substr(i));\n\n          if (Decoder.isPayloadValid(p.type, payload)) {\n            p.data = payload;\n          } else {\n            throw new Error(\"invalid payload\");\n          }\n        }\n\n        debug(\"decoded %s as %j\", str, p);\n        return p;\n      }\n    }, {\n      key: \"destroy\",\n      value: function destroy() {\n        if (this.reconstructor) {\n          this.reconstructor.finishedReconstruction();\n        }\n      }\n    }], [{\n      key: \"isPayloadValid\",\n      value: function isPayloadValid(type, payload) {\n        switch (type) {\n          case PacketType.CONNECT:\n            return typeof payload === \"object\";\n\n          case PacketType.DISCONNECT:\n            return payload === undefined;\n\n          case PacketType.CONNECT_ERROR:\n            return typeof payload === \"string\" || typeof payload === \"object\";\n\n          case PacketType.EVENT:\n          case PacketType.BINARY_EVENT:\n            return Array.isArray(payload) && typeof payload[0] === \"string\";\n\n          case PacketType.ACK:\n          case PacketType.BINARY_ACK:\n            return Array.isArray(payload);\n        }\n      }\n    }]);\n\n    return Decoder;\n  }(Emitter);\n\n  exports.Decoder = Decoder;\n\n  function tryParse(str) {\n    try {\n      return JSON.parse(str);\n    } catch (e) {\n      return false;\n    }\n  }\n\n  var BinaryReconstructor = function () {\n    function BinaryReconstructor(packet) {\n      _classCallCheck(this, BinaryReconstructor);\n\n      this.packet = packet;\n      this.buffers = [];\n      this.reconPack = packet;\n    }\n\n    _createClass(BinaryReconstructor, [{\n      key: \"takeBinaryData\",\n      value: function takeBinaryData(binData) {\n        this.buffers.push(binData);\n\n        if (this.buffers.length === this.reconPack.attachments) {\n          var packet = binary_1.reconstructPacket(this.reconPack, this.buffers);\n          this.finishedReconstruction();\n          return packet;\n        }\n\n        return null;\n      }\n    }, {\n      key: \"finishedReconstruction\",\n      value: function finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n      }\n    }]);\n\n    return BinaryReconstructor;\n  }();\n});","lineCount":297,"map":[[2,0,1,0],[20,0,2,0,"Object"],[20,2,2,0,"Object"],[20,8,2,6],[20,9,2,7,"defineProperty"],[20,23,2,0],[20,24,2,22,"exports"],[20,31,2,0],[20,33,2,31],[20,45,2,0],[20,47,2,45],[21,0,2,47,"value"],[21,4,2,47,"value"],[21,9,2,52],[21,11,2,54],[22,0,2,45],[22,3,2,0],[23,0,3,0,"exports"],[23,2,3,0,"exports"],[23,9,3,7],[23,10,3,8,"Decoder"],[23,17,3,0],[23,20,3,18,"exports"],[23,27,3,25],[23,28,3,26,"Encoder"],[23,35,3,18],[23,38,3,36,"exports"],[23,45,3,43],[23,46,3,44,"PacketType"],[23,56,3,36],[23,59,3,57,"exports"],[23,66,3,64],[23,67,3,65,"protocol"],[23,75,3,57],[23,78,3,76],[23,83,3,81],[23,84,3,0],[25,0,4,0],[25,6,4,6,"Emitter"],[25,13,4,13],[25,16,4,16,"require"],[25,27,4,23],[25,67,4,0],[27,0,5,0],[27,6,5,6,"binary_1"],[27,14,5,14],[27,17,5,17,"require"],[27,28,5,24],[27,59,5,0],[29,0,6,0],[29,6,6,6,"is_binary_1"],[29,17,6,17],[29,20,6,20,"require"],[29,31,6,27],[29,65,6,0],[31,0,7,0],[31,6,7,6,"debug"],[31,11,7,11],[31,14,7,14,"require"],[31,25,7,21],[31,53,7,14],[31,54,7,31],[31,72,7,14],[31,73,7,0],[33,0,13,0,"exports"],[33,2,13,0,"exports"],[33,9,13,7],[33,10,13,8,"protocol"],[33,18,13,0],[33,21,13,19],[33,22,13,0],[34,0,14,0],[34,6,14,4,"PacketType"],[34,16,14,0],[36,0,15,0],[36,3,15,1],[36,13,15,11,"PacketType"],[36,23,15,1],[36,25,15,23],[37,0,16,4,"PacketType"],[37,4,16,4,"PacketType"],[37,14,16,14],[37,15,16,15,"PacketType"],[37,25,16,25],[37,26,16,26],[37,35,16,25],[37,36,16,15],[37,39,16,39],[37,40,16,14],[37,41,16,4],[37,44,16,44],[37,53,16,4],[38,0,17,4,"PacketType"],[38,4,17,4,"PacketType"],[38,14,17,14],[38,15,17,15,"PacketType"],[38,25,17,25],[38,26,17,26],[38,38,17,25],[38,39,17,15],[38,42,17,42],[38,43,17,14],[38,44,17,4],[38,47,17,47],[38,59,17,4],[39,0,18,4,"PacketType"],[39,4,18,4,"PacketType"],[39,14,18,14],[39,15,18,15,"PacketType"],[39,25,18,25],[39,26,18,26],[39,33,18,25],[39,34,18,15],[39,37,18,37],[39,38,18,14],[39,39,18,4],[39,42,18,42],[39,49,18,4],[40,0,19,4,"PacketType"],[40,4,19,4,"PacketType"],[40,14,19,14],[40,15,19,15,"PacketType"],[40,25,19,25],[40,26,19,26],[40,31,19,25],[40,32,19,15],[40,35,19,35],[40,36,19,14],[40,37,19,4],[40,40,19,40],[40,45,19,4],[41,0,20,4,"PacketType"],[41,4,20,4,"PacketType"],[41,14,20,14],[41,15,20,15,"PacketType"],[41,25,20,25],[41,26,20,26],[41,41,20,25],[41,42,20,15],[41,45,20,45],[41,46,20,14],[41,47,20,4],[41,50,20,50],[41,65,20,4],[42,0,21,4,"PacketType"],[42,4,21,4,"PacketType"],[42,14,21,14],[42,15,21,15,"PacketType"],[42,25,21,25],[42,26,21,26],[42,40,21,25],[42,41,21,15],[42,44,21,44],[42,45,21,14],[42,46,21,4],[42,49,21,49],[42,63,21,4],[43,0,22,4,"PacketType"],[43,4,22,4,"PacketType"],[43,14,22,14],[43,15,22,15,"PacketType"],[43,25,22,25],[43,26,22,26],[43,38,22,25],[43,39,22,15],[43,42,22,42],[43,43,22,14],[43,44,22,4],[43,47,22,47],[43,59,22,4],[44,0,23,1],[44,3,15,0],[44,5,23,3,"PacketType"],[44,15,23,13],[44,18,23,16,"exports"],[44,25,23,23],[44,26,23,24,"PacketType"],[44,36,23,16],[44,41,23,39,"exports"],[44,48,23,46],[44,49,23,47,"PacketType"],[44,59,23,39],[44,62,23,60],[44,64,23,16],[44,65,15,0],[46,6,27,6,"Encoder"],[46,13],[53,29,34,11,"obj"],[53,32],[53,34,34,16],[54,0,35,8,"debug"],[54,8,35,8,"debug"],[54,13,35,13],[54,14,35,14],[54,34,35,13],[54,36,35,36,"obj"],[54,39,35,13],[54,40,35,8],[56,0,36,8],[56,12,36,12,"obj"],[56,15,36,15],[56,16,36,16,"type"],[56,20,36,12],[56,25,36,25,"PacketType"],[56,35,36,35],[56,36,36,36,"EVENT"],[56,41,36,12],[56,45,36,45,"obj"],[56,48,36,48],[56,49,36,49,"type"],[56,53,36,45],[56,58,36,58,"PacketType"],[56,68,36,68],[56,69,36,69,"ACK"],[56,72,36,8],[56,74,36,74],[57,0,37,12],[57,14,37,16,"is_binary_1"],[57,25,37,27],[57,26,37,28,"hasBinary"],[57,35,37,16],[57,36,37,38,"obj"],[57,39,37,16],[57,40,37,12],[57,42,37,44],[58,0,38,16,"obj"],[58,12,38,16,"obj"],[58,15,38,19],[58,16,38,20,"type"],[58,20,38,16],[58,23,39,20,"obj"],[58,26,39,23],[58,27,39,24,"type"],[58,31,39,20],[58,36,39,33,"PacketType"],[58,46,39,43],[58,47,39,44,"EVENT"],[58,52,39,20],[58,55,40,26,"PacketType"],[58,65,40,36],[58,66,40,37,"BINARY_EVENT"],[58,78,39,20],[58,81,41,26,"PacketType"],[58,91,41,36],[58,92,41,37,"BINARY_ACK"],[58,102,38,16],[59,0,42,16],[59,19,42,23],[59,24,42,28,"encodeAsBinary"],[59,38,42,23],[59,39,42,43,"obj"],[59,42,42,23],[59,43,42,16],[60,0,43,13],[61,0,44,9],[63,0,45,8],[63,15,45,15],[63,16,45,16],[63,21,45,21,"encodeAsString"],[63,35,45,16],[63,36,45,36,"obj"],[63,39,45,16],[63,40,45,15],[63,41,45,8],[64,0,46,5],[67,37,50,19,"obj"],[67,40],[67,42,50,24],[68,0,52,8],[68,12,52,12,"str"],[68,15,52,15],[68,18,52,18],[68,23,52,23,"obj"],[68,26,52,26],[68,27,52,27,"type"],[68,31,52,8],[70,0,54,8],[70,12,54,12,"obj"],[70,15,54,15],[70,16,54,16,"type"],[70,20,54,12],[70,25,54,25,"PacketType"],[70,35,54,35],[70,36,54,36,"BINARY_EVENT"],[70,48,54,12],[70,52,55,12,"obj"],[70,55,55,15],[70,56,55,16,"type"],[70,60,55,12],[70,65,55,25,"PacketType"],[70,75,55,35],[70,76,55,36,"BINARY_ACK"],[70,86,54,8],[70,88,55,48],[71,0,56,12,"str"],[71,10,56,12,"str"],[71,13,56,15],[71,17,56,19,"obj"],[71,20,56,22],[71,21,56,23,"attachments"],[71,32,56,19],[71,35,56,37],[71,38,56,12],[72,0,57,9],[74,0,60,8],[74,12,60,12,"obj"],[74,15,60,15],[74,16,60,16,"nsp"],[74,19,60,12],[74,23,60,23],[74,31,60,31,"obj"],[74,34,60,34],[74,35,60,35,"nsp"],[74,38,60,8],[74,40,60,40],[75,0,61,12,"str"],[75,10,61,12,"str"],[75,13,61,15],[75,17,61,19,"obj"],[75,20,61,22],[75,21,61,23,"nsp"],[75,24,61,19],[75,27,61,29],[75,30,61,12],[76,0,62,9],[78,0,64,8],[78,12,64,12],[78,20,64,20,"obj"],[78,23,64,23],[78,24,64,24,"id"],[78,26,64,8],[78,28,64,28],[79,0,65,12,"str"],[79,10,65,12,"str"],[79,13,65,15],[79,17,65,19,"obj"],[79,20,65,22],[79,21,65,23,"id"],[79,23,65,12],[80,0,66,9],[82,0,68,8],[82,12,68,12],[82,20,68,20,"obj"],[82,23,68,23],[82,24,68,24,"data"],[82,28,68,8],[82,30,68,30],[83,0,69,12,"str"],[83,10,69,12,"str"],[83,13,69,15],[83,17,69,19,"JSON"],[83,21,69,23],[83,22,69,24,"stringify"],[83,31,69,19],[83,32,69,34,"obj"],[83,35,69,37],[83,36,69,38,"data"],[83,40,69,19],[83,41,69,12],[84,0,70,9],[86,0,71,8,"debug"],[86,8,71,8,"debug"],[86,13,71,13],[86,14,71,14],[86,32,71,13],[86,34,71,34,"obj"],[86,37,71,13],[86,39,71,39,"str"],[86,42,71,13],[86,43,71,8],[87,0,72,8],[87,15,72,15,"str"],[87,18,72,8],[88,0,73,5],[91,37,79,19,"obj"],[91,40],[91,42,79,24],[92,0,80,8],[92,12,80,14,"deconstruction"],[92,26,80,28],[92,29,80,31,"binary_1"],[92,37,80,39],[92,38,80,40,"deconstructPacket"],[92,55,80,31],[92,56,80,58,"obj"],[92,59,80,31],[92,60,80,8],[93,0,81,8],[93,12,81,14,"pack"],[93,16,81,18],[93,19,81,21],[93,24,81,26,"encodeAsString"],[93,38,81,21],[93,39,81,41,"deconstruction"],[93,53,81,55],[93,54,81,56,"packet"],[93,60,81,21],[93,61,81,8],[94,0,82,8],[94,12,82,14,"buffers"],[94,19,82,21],[94,22,82,24,"deconstruction"],[94,36,82,38],[94,37,82,39,"buffers"],[94,44,82,8],[95,0,83,8,"buffers"],[95,8,83,8,"buffers"],[95,15,83,15],[95,16,83,16,"unshift"],[95,23,83,8],[95,24,83,24,"pack"],[95,28,83,8],[96,0,84,8],[96,15,84,15,"buffers"],[96,22,84,8],[97,0,85,5],[103,0,87,0,"exports"],[103,2,87,0,"exports"],[103,9,87,7],[103,10,87,8,"Encoder"],[103,17,87,0],[103,20,87,18,"Encoder"],[103,27,87,0],[105,6,93,6,"Decoder"],[105,13],[110,0,94,4],[110,23,94,18],[111,0,94,18],[113,0,94,18],[114,0,96,5],[118,26,102,8,"obj"],[118,29],[118,31,102,13],[119,0,103,8],[119,12,103,12,"packet"],[119,18,103,8],[121,0,104,8],[121,12,104,12],[121,19,104,19,"obj"],[121,22,104,12],[121,27,104,27],[121,35,104,8],[121,37,104,37],[122,0,105,12,"packet"],[122,10,105,12,"packet"],[122,16,105,18],[122,19,105,21],[122,24,105,26,"decodeString"],[122,36,105,21],[122,37,105,39,"obj"],[122,40,105,21],[122,41,105,12],[124,0,106,12],[124,14,106,16,"packet"],[124,20,106,22],[124,21,106,23,"type"],[124,25,106,16],[124,30,106,32,"PacketType"],[124,40,106,42],[124,41,106,43,"BINARY_EVENT"],[124,53,106,16],[124,57,107,16,"packet"],[124,63,107,22],[124,64,107,23,"type"],[124,68,107,16],[124,73,107,32,"PacketType"],[124,83,107,42],[124,84,107,43,"BINARY_ACK"],[124,94,106,12],[124,96,107,55],[125,0,109,16],[125,17,109,21,"reconstructor"],[125,30,109,16],[125,33,109,37],[125,37,109,41,"BinaryReconstructor"],[125,56,109,37],[125,57,109,61,"packet"],[125,63,109,37],[125,64,109,16],[127,0,111,16],[127,16,111,20,"packet"],[127,22,111,26],[127,23,111,27,"attachments"],[127,34,111,20],[127,39,111,43],[127,40,111,16],[127,42,111,46],[128,0,112,20],[128,80,112,31],[128,89,112,20],[128,91,112,42,"packet"],[128,97,112,20],[129,0,113,17],[130,0,114,13],[130,11,106,12],[130,17,115,17],[131,0,117,16],[131,78,117,27],[131,87,117,16],[131,89,117,38,"packet"],[131,95,117,16],[132,0,118,13],[133,0,119,9],[133,9,104,8],[133,15,120,13],[133,19,120,17,"is_binary_1"],[133,30,120,28],[133,31,120,29,"isBinary"],[133,39,120,17],[133,40,120,38,"obj"],[133,43,120,17],[133,48,120,46,"obj"],[133,51,120,49],[133,52,120,50,"base64"],[133,58,120,13],[133,60,120,58],[134,0,122,12],[134,14,122,16],[134,15,122,17],[134,20,122,22,"reconstructor"],[134,33,122,12],[134,35,122,37],[135,0,123,16],[135,18,123,22],[135,22,123,26,"Error"],[135,27,123,22],[135,28,123,32],[135,78,123,22],[135,79,123,16],[136,0,124,13],[136,11,122,12],[136,17,125,17],[137,0,126,16,"packet"],[137,12,126,16,"packet"],[137,18,126,22],[137,21,126,25],[137,26,126,30,"reconstructor"],[137,39,126,25],[137,40,126,44,"takeBinaryData"],[137,54,126,25],[137,55,126,59,"obj"],[137,58,126,25],[137,59,126,16],[139,0,127,16],[139,16,127,20,"packet"],[139,22,127,16],[139,24,127,28],[140,0,129,20],[140,19,129,25,"reconstructor"],[140,32,129,20],[140,35,129,41],[140,39,129,20],[142,0,130,20],[142,80,130,31],[142,89,130,20],[142,91,130,42,"packet"],[142,97,130,20],[143,0,131,17],[144,0,132,13],[145,0,133,9],[145,9,120,13],[145,15,134,13],[146,0,135,12],[146,16,135,18],[146,20,135,22,"Error"],[146,25,135,18],[146,26,135,28],[146,45,135,47,"obj"],[146,48,135,18],[146,49,135,12],[147,0,136,9],[148,0,137,5],[151,35,144,17,"str"],[151,38],[151,40,144,22],[152,0,145,8],[152,12,145,12,"i"],[152,13,145,13],[152,16,145,16],[152,17,145,8],[153,0,147,8],[153,12,147,14,"p"],[153,13,147,15],[153,16,147,18],[154,0,148,12,"type"],[154,10,148,12,"type"],[154,14,148,16],[154,16,148,18,"Number"],[154,22,148,24],[154,23,148,25,"str"],[154,26,148,28],[154,27,148,29,"charAt"],[154,33,148,25],[154,34,148,36],[154,35,148,25],[154,36,148,24],[155,0,147,18],[155,9,147,8],[157,0,150,8],[157,12,150,12,"PacketType"],[157,22,150,22],[157,23,150,23,"p"],[157,24,150,24],[157,25,150,25,"type"],[157,29,150,22],[157,30,150,12],[157,35,150,35,"undefined"],[157,44,150,8],[157,46,150,46],[158,0,151,12],[158,16,151,18],[158,20,151,22,"Error"],[158,25,151,18],[158,26,151,28],[158,51,151,53,"p"],[158,52,151,54],[158,53,151,55,"type"],[158,57,151,18],[158,58,151,12],[159,0,152,9],[161,0,154,8],[161,12,154,12,"p"],[161,13,154,13],[161,14,154,14,"type"],[161,18,154,12],[161,23,154,23,"PacketType"],[161,33,154,33],[161,34,154,34,"BINARY_EVENT"],[161,46,154,12],[161,50,155,12,"p"],[161,51,155,13],[161,52,155,14,"type"],[161,56,155,12],[161,61,155,23,"PacketType"],[161,71,155,33],[161,72,155,34,"BINARY_ACK"],[161,82,154,8],[161,84,155,46],[162,0,156,12],[162,14,156,18,"start"],[162,19,156,23],[162,22,156,26,"i"],[162,23,156,27],[162,26,156,30],[162,27,156,12],[164,0,157,12],[164,17,157,19,"str"],[164,20,157,22],[164,21,157,23,"charAt"],[164,27,157,19],[164,28,157,30],[164,30,157,32,"i"],[164,31,157,19],[164,37,157,39],[164,40,157,19],[164,44,157,46,"i"],[164,45,157,47],[164,49,157,51,"str"],[164,52,157,54],[164,53,157,55,"length"],[164,59,157,12],[164,61,157,63],[164,62,157,66],[166,0,158,12],[166,14,158,18,"buf"],[166,17,158,21],[166,20,158,24,"str"],[166,23,158,27],[166,24,158,28,"substring"],[166,33,158,24],[166,34,158,38,"start"],[166,39,158,24],[166,41,158,45,"i"],[166,42,158,24],[166,43,158,12],[168,0,159,12],[168,14,159,16,"buf"],[168,17,159,19],[168,21,159,23,"Number"],[168,27,159,29],[168,28,159,30,"buf"],[168,31,159,29],[168,32,159,16],[168,36,159,38,"str"],[168,39,159,41],[168,40,159,42,"charAt"],[168,46,159,38],[168,47,159,49,"i"],[168,48,159,38],[168,54,159,56],[168,57,159,12],[168,59,159,61],[169,0,160,16],[169,18,160,22],[169,22,160,26,"Error"],[169,27,160,22],[169,28,160,32],[169,49,160,22],[169,50,160,16],[170,0,161,13],[172,0,162,12,"p"],[172,10,162,12,"p"],[172,11,162,13],[172,12,162,14,"attachments"],[172,23,162,12],[172,26,162,28,"Number"],[172,32,162,34],[172,33,162,35,"buf"],[172,36,162,34],[172,37,162,12],[173,0,163,9],[175,0,165,8],[175,12,165,12],[175,20,165,20,"str"],[175,23,165,23],[175,24,165,24,"charAt"],[175,30,165,20],[175,31,165,31,"i"],[175,32,165,32],[175,35,165,35],[175,36,165,20],[175,37,165,8],[175,39,165,39],[176,0,166,12],[176,14,166,18,"start"],[176,20,166,23],[176,23,166,26,"i"],[176,24,166,27],[176,27,166,30],[176,28,166,12],[178,0,167,12],[178,17,167,19],[178,19,167,21,"i"],[178,20,167,12],[178,22,167,24],[179,0,168,16],[179,16,168,22,"c"],[179,17,168,23],[179,20,168,26,"str"],[179,23,168,29],[179,24,168,30,"charAt"],[179,30,168,26],[179,31,168,37,"i"],[179,32,168,26],[179,33,168,16],[180,0,169,16],[180,16,169,20],[180,24,169,28,"c"],[180,25,169,16],[180,27,170,20],[181,0,171,16],[181,16,171,20,"i"],[181,17,171,21],[181,22,171,26,"str"],[181,25,171,29],[181,26,171,30,"length"],[181,32,171,16],[181,34,172,20],[182,0,173,13],[184,0,174,12,"p"],[184,10,174,12,"p"],[184,11,174,13],[184,12,174,14,"nsp"],[184,15,174,12],[184,18,174,20,"str"],[184,21,174,23],[184,22,174,24,"substring"],[184,31,174,20],[184,32,174,34,"start"],[184,38,174,20],[184,40,174,41,"i"],[184,41,174,20],[184,42,174,12],[185,0,175,9],[185,9,165,8],[185,15,176,13],[186,0,177,12,"p"],[186,10,177,12,"p"],[186,11,177,13],[186,12,177,14,"nsp"],[186,15,177,12],[186,18,177,20],[186,21,177,12],[187,0,178,9],[189,0,180,8],[189,12,180,14,"next"],[189,16,180,18],[189,19,180,21,"str"],[189,22,180,24],[189,23,180,25,"charAt"],[189,29,180,21],[189,30,180,32,"i"],[189,31,180,33],[189,34,180,36],[189,35,180,21],[189,36,180,8],[191,0,181,8],[191,12,181,12],[191,19,181,19,"next"],[191,23,181,12],[191,27,181,27,"Number"],[191,33,181,33],[191,34,181,34,"next"],[191,38,181,33],[191,39,181,27],[191,43,181,43,"next"],[191,47,181,8],[191,49,181,49],[192,0,182,12],[192,14,182,18,"start"],[192,21,182,23],[192,24,182,26,"i"],[192,25,182,27],[192,28,182,30],[192,29,182,12],[194,0,183,12],[194,17,183,19],[194,19,183,21,"i"],[194,20,183,12],[194,22,183,24],[195,0,184,16],[195,16,184,22,"c"],[195,18,184,23],[195,21,184,26,"str"],[195,24,184,29],[195,25,184,30,"charAt"],[195,31,184,26],[195,32,184,37,"i"],[195,33,184,26],[195,34,184,16],[197,0,185,16],[197,16,185,20],[197,24,185,28,"c"],[197,26,185,20],[197,30,185,33,"Number"],[197,36,185,39],[197,37,185,40,"c"],[197,39,185,39],[197,40,185,33],[197,44,185,46,"c"],[197,46,185,16],[197,48,185,49],[198,0,186,20],[198,16,186,22,"i"],[198,17,186,20],[199,0,187,20],[200,0,188,17],[202,0,189,16],[202,16,189,20,"i"],[202,17,189,21],[202,22,189,26,"str"],[202,25,189,29],[202,26,189,30,"length"],[202,32,189,16],[202,34,190,20],[203,0,191,13],[205,0,192,12,"p"],[205,10,192,12,"p"],[205,11,192,13],[205,12,192,14,"id"],[205,14,192,12],[205,17,192,19,"Number"],[205,23,192,25],[205,24,192,26,"str"],[205,27,192,29],[205,28,192,30,"substring"],[205,37,192,26],[205,38,192,40,"start"],[205,45,192,26],[205,47,192,47,"i"],[205,48,192,48],[205,51,192,51],[205,52,192,26],[205,53,192,25],[205,54,192,12],[206,0,193,9],[208,0,195,8],[208,12,195,12,"str"],[208,15,195,15],[208,16,195,16,"charAt"],[208,22,195,12],[208,23,195,23],[208,25,195,25,"i"],[208,26,195,12],[208,27,195,8],[208,29,195,29],[209,0,196,12],[209,14,196,18,"payload"],[209,21,196,25],[209,24,196,28,"tryParse"],[209,32,196,36],[209,33,196,37,"str"],[209,36,196,40],[209,37,196,41,"substr"],[209,43,196,37],[209,44,196,48,"i"],[209,45,196,37],[209,46,196,36],[209,47,196,12],[211,0,197,12],[211,14,197,16,"Decoder"],[211,21,197,23],[211,22,197,24,"isPayloadValid"],[211,36,197,16],[211,37,197,39,"p"],[211,38,197,40],[211,39,197,41,"type"],[211,43,197,16],[211,45,197,47,"payload"],[211,52,197,16],[211,53,197,12],[211,55,197,57],[212,0,198,16,"p"],[212,12,198,16,"p"],[212,13,198,17],[212,14,198,18,"data"],[212,18,198,16],[212,21,198,25,"payload"],[212,28,198,16],[213,0,199,13],[213,11,197,12],[213,17,200,17],[214,0,201,16],[214,18,201,22],[214,22,201,26,"Error"],[214,27,201,22],[214,28,201,32],[214,45,201,22],[214,46,201,16],[215,0,202,13],[216,0,203,9],[218,0,204,8,"debug"],[218,8,204,8,"debug"],[218,13,204,13],[218,14,204,14],[218,32,204,13],[218,34,204,34,"str"],[218,37,204,13],[218,39,204,39,"p"],[218,40,204,13],[218,41,204,8],[219,0,205,8],[219,15,205,15,"p"],[219,16,205,8],[220,0,206,5],[223,32,226,14],[224,0,227,8],[224,12,227,12],[224,17,227,17,"reconstructor"],[224,30,227,8],[224,32,227,32],[225,0,228,12],[225,15,228,17,"reconstructor"],[225,28,228,12],[225,29,228,31,"finishedReconstruction"],[225,51,228,12],[226,0,229,9],[227,0,230,5],[230,37,207,26,"type"],[230,41],[230,43,207,32,"payload"],[230,50],[230,52,207,41],[231,0,208,8],[231,16,208,16,"type"],[231,20,208,8],[232,0,209,12],[232,15,209,17,"PacketType"],[232,25,209,27],[232,26,209,28,"CONNECT"],[232,33,209,12],[233,0,210,16],[233,19,210,23],[233,26,210,30,"payload"],[233,33,210,23],[233,38,210,42],[233,46,210,16],[235,0,211,12],[235,15,211,17,"PacketType"],[235,25,211,27],[235,26,211,28,"DISCONNECT"],[235,36,211,12],[236,0,212,16],[236,19,212,23,"payload"],[236,26,212,30],[236,31,212,35,"undefined"],[236,40,212,16],[238,0,213,12],[238,15,213,17,"PacketType"],[238,25,213,27],[238,26,213,28,"CONNECT_ERROR"],[238,39,213,12],[239,0,214,16],[239,19,214,23],[239,26,214,30,"payload"],[239,33,214,23],[239,38,214,42],[239,46,214,23],[239,50,214,54],[239,57,214,61,"payload"],[239,64,214,54],[239,69,214,73],[239,77,214,16],[241,0,215,12],[241,15,215,17,"PacketType"],[241,25,215,27],[241,26,215,28,"EVENT"],[241,31,215,12],[242,0,216,12],[242,15,216,17,"PacketType"],[242,25,216,27],[242,26,216,28,"BINARY_EVENT"],[242,38,216,12],[243,0,217,16],[243,19,217,23,"Array"],[243,24,217,28],[243,25,217,29,"isArray"],[243,32,217,23],[243,33,217,37,"payload"],[243,40,217,23],[243,45,217,49],[243,52,217,56,"payload"],[243,59,217,63],[243,60,217,64],[243,61,217,63],[243,62,217,49],[243,67,217,71],[243,75,217,16],[245,0,218,12],[245,15,218,17,"PacketType"],[245,25,218,27],[245,26,218,28,"ACK"],[245,29,218,12],[246,0,219,12],[246,15,219,17,"PacketType"],[246,25,219,27],[246,26,219,28,"BINARY_ACK"],[246,36,219,12],[247,0,220,16],[247,19,220,23,"Array"],[247,24,220,28],[247,25,220,29,"isArray"],[247,32,220,23],[247,33,220,37,"payload"],[247,40,220,23],[247,41,220,16],[248,0,208,8],[249,0,222,5],[253,4,93,22,"Emitter"],[253,11],[255,0,232,0,"exports"],[255,2,232,0,"exports"],[255,9,232,7],[255,10,232,8,"Decoder"],[255,17,232,0],[255,20,232,18,"Decoder"],[255,27,232,0],[257,0,233,0],[257,11,233,9,"tryParse"],[257,19,233,0],[257,20,233,18,"str"],[257,23,233,0],[257,25,233,23],[258,0,234,4],[258,8,234,8],[259,0,235,8],[259,13,235,15,"JSON"],[259,17,235,19],[259,18,235,20,"parse"],[259,23,235,15],[259,24,235,26,"str"],[259,27,235,15],[259,28,235,8],[260,0,236,5],[260,5,234,4],[260,6,237,4],[260,13,237,11,"e"],[260,14,237,4],[260,16,237,14],[261,0,238,8],[261,13,238,15],[261,18,238,8],[262,0,239,5],[263,0,240,1],[265,6,249,6,"BinaryReconstructor"],[265,25],[266,0,250,4],[266,33,250,16,"packet"],[266,39,250,4],[266,41,250,24],[267,0,250,24],[269,0,251,8],[269,11,251,13,"packet"],[269,17,251,8],[269,20,251,22,"packet"],[269,26,251,8],[270,0,252,8],[270,11,252,13,"buffers"],[270,18,252,8],[270,21,252,23],[270,23,252,8],[271,0,253,8],[271,11,253,13,"reconPack"],[271,20,253,8],[271,23,253,25,"packet"],[271,29,253,8],[272,0,254,5],[276,37,263,19,"binData"],[276,44],[276,46,263,28],[277,0,264,8],[277,13,264,13,"buffers"],[277,20,264,8],[277,21,264,21,"push"],[277,25,264,8],[277,26,264,26,"binData"],[277,33,264,8],[279,0,265,8],[279,12,265,12],[279,17,265,17,"buffers"],[279,24,265,12],[279,25,265,25,"length"],[279,31,265,12],[279,36,265,36],[279,41,265,41,"reconPack"],[279,50,265,36],[279,51,265,51,"attachments"],[279,62,265,8],[279,64,265,64],[280,0,267,12],[280,14,267,18,"packet"],[280,20,267,24],[280,23,267,27,"binary_1"],[280,31,267,35],[280,32,267,36,"reconstructPacket"],[280,49,267,27],[280,50,267,54],[280,55,267,59,"reconPack"],[280,64,267,27],[280,66,267,70],[280,71,267,75,"buffers"],[280,78,267,27],[280,79,267,12],[281,0,268,12],[281,15,268,17,"finishedReconstruction"],[281,37,268,12],[282,0,269,12],[282,17,269,19,"packet"],[282,23,269,12],[283,0,270,9],[285,0,271,8],[285,15,271,15],[285,19,271,8],[286,0,272,5],[289,47,276,29],[290,0,277,8],[290,13,277,13,"reconPack"],[290,22,277,8],[290,25,277,25],[290,29,277,8],[291,0,278,8],[291,13,278,13,"buffers"],[291,20,278,8],[291,23,278,23],[291,25,278,8],[292,0,279,5]],"functionMap":{"names":["<global>","<anonymous>","Encoder","Encoder#encode","Encoder#encodeAsString","Encoder#encodeAsBinary","Decoder","Decoder#constructor","Decoder#add","Decoder#decodeString","Decoder.isPayloadValid","Decoder#destroy","tryParse","BinaryReconstructor","BinaryReconstructor#constructor","BinaryReconstructor#takeBinaryData","BinaryReconstructor#finishedReconstruction"],"mappings":"AAA;CCc;CDQ;AEI;ICO;KDY;IEI;KFuB;IGM;KHM;CFC;AMO;ICC;KDE;IEM;KFmC;IGO;KH8D;IIC;KJe;IKI;KLI;CNC;AYE;CZO;AaS;ICC;KDI;IES;KFS;IGI;KHG;CbC"}},"type":"js/module"}]}