{"dependencies":[{"name":"./match-graph","data":{"isAsync":false}},{"name":"../tokenizer/const","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  var matchGraph = _$$_REQUIRE(_dependencyMap[0], \"./match-graph\");\n\n  var MATCH = matchGraph.MATCH;\n  var MISMATCH = matchGraph.MISMATCH;\n  var DISALLOW_EMPTY = matchGraph.DISALLOW_EMPTY;\n\n  var TYPE = _$$_REQUIRE(_dependencyMap[1], \"../tokenizer/const\").TYPE;\n\n  var STUB = 0;\n  var TOKEN = 1;\n  var OPEN_SYNTAX = 2;\n  var CLOSE_SYNTAX = 3;\n  var EXIT_REASON_MATCH = 'Match';\n  var EXIT_REASON_MISMATCH = 'Mismatch';\n  var EXIT_REASON_ITERATION_LIMIT = 'Maximum iteration number exceeded (please fill an issue on https://github.com/csstree/csstree/issues)';\n  var ITERATION_LIMIT = 15000;\n  var totalIterationCount = 0;\n\n  function reverseList(list) {\n    var prev = null;\n    var next = null;\n    var item = list;\n\n    while (item !== null) {\n      next = item.prev;\n      item.prev = prev;\n      prev = item;\n      item = next;\n    }\n\n    return prev;\n  }\n\n  function areStringsEqualCaseInsensitive(testStr, referenceStr) {\n    if (testStr.length !== referenceStr.length) {\n      return false;\n    }\n\n    for (var i = 0; i < testStr.length; i++) {\n      var testCode = testStr.charCodeAt(i);\n      var referenceCode = referenceStr.charCodeAt(i);\n\n      if (testCode >= 0x0041 && testCode <= 0x005A) {\n        testCode = testCode | 32;\n      }\n\n      if (testCode !== referenceCode) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function isContextEdgeDelim(token) {\n    if (token.type !== TYPE.Delim) {\n      return false;\n    }\n\n    return token.value !== '?';\n  }\n\n  function isCommaContextStart(token) {\n    if (token === null) {\n      return true;\n    }\n\n    return token.type === TYPE.Comma || token.type === TYPE.Function || token.type === TYPE.LeftParenthesis || token.type === TYPE.LeftSquareBracket || token.type === TYPE.LeftCurlyBracket || isContextEdgeDelim(token);\n  }\n\n  function isCommaContextEnd(token) {\n    if (token === null) {\n      return true;\n    }\n\n    return token.type === TYPE.RightParenthesis || token.type === TYPE.RightSquareBracket || token.type === TYPE.RightCurlyBracket || token.type === TYPE.Delim;\n  }\n\n  function internalMatch(tokens, state, syntaxes) {\n    function moveToNextToken() {\n      do {\n        tokenIndex++;\n        token = tokenIndex < tokens.length ? tokens[tokenIndex] : null;\n      } while (token !== null && (token.type === TYPE.WhiteSpace || token.type === TYPE.Comment));\n    }\n\n    function getNextToken(offset) {\n      var nextIndex = tokenIndex + offset;\n      return nextIndex < tokens.length ? tokens[nextIndex] : null;\n    }\n\n    function stateSnapshotFromSyntax(nextState, prev) {\n      return {\n        nextState: nextState,\n        matchStack: matchStack,\n        syntaxStack: syntaxStack,\n        thenStack: thenStack,\n        tokenIndex: tokenIndex,\n        prev: prev\n      };\n    }\n\n    function pushThenStack(nextState) {\n      thenStack = {\n        nextState: nextState,\n        matchStack: matchStack,\n        syntaxStack: syntaxStack,\n        prev: thenStack\n      };\n    }\n\n    function pushElseStack(nextState) {\n      elseStack = stateSnapshotFromSyntax(nextState, elseStack);\n    }\n\n    function addTokenToMatch() {\n      matchStack = {\n        type: TOKEN,\n        syntax: state.syntax,\n        token: token,\n        prev: matchStack\n      };\n      moveToNextToken();\n      syntaxStash = null;\n\n      if (tokenIndex > longestMatch) {\n        longestMatch = tokenIndex;\n      }\n    }\n\n    function openSyntax() {\n      syntaxStack = {\n        syntax: state.syntax,\n        opts: state.syntax.opts || syntaxStack !== null && syntaxStack.opts || null,\n        prev: syntaxStack\n      };\n      matchStack = {\n        type: OPEN_SYNTAX,\n        syntax: state.syntax,\n        token: matchStack.token,\n        prev: matchStack\n      };\n    }\n\n    function closeSyntax() {\n      if (matchStack.type === OPEN_SYNTAX) {\n        matchStack = matchStack.prev;\n      } else {\n        matchStack = {\n          type: CLOSE_SYNTAX,\n          syntax: syntaxStack.syntax,\n          token: matchStack.token,\n          prev: matchStack\n        };\n      }\n\n      syntaxStack = syntaxStack.prev;\n    }\n\n    var syntaxStack = null;\n    var thenStack = null;\n    var elseStack = null;\n    var syntaxStash = null;\n    var iterationCount = 0;\n    var exitReason = null;\n    var token = null;\n    var tokenIndex = -1;\n    var longestMatch = 0;\n    var matchStack = {\n      type: STUB,\n      syntax: null,\n      token: null,\n      prev: null\n    };\n    moveToNextToken();\n\n    while (exitReason === null && ++iterationCount < ITERATION_LIMIT) {\n      switch (state.type) {\n        case 'Match':\n          if (thenStack === null) {\n            if (token !== null) {\n              if (tokenIndex !== tokens.length - 1 || token.value !== '\\\\0' && token.value !== '\\\\9') {\n                state = MISMATCH;\n                break;\n              }\n            }\n\n            exitReason = EXIT_REASON_MATCH;\n            break;\n          }\n\n          state = thenStack.nextState;\n\n          if (state === DISALLOW_EMPTY) {\n            if (thenStack.matchStack === matchStack) {\n              state = MISMATCH;\n              break;\n            } else {\n              state = MATCH;\n            }\n          }\n\n          while (thenStack.syntaxStack !== syntaxStack) {\n            closeSyntax();\n          }\n\n          thenStack = thenStack.prev;\n          break;\n\n        case 'Mismatch':\n          if (syntaxStash !== null && syntaxStash !== false) {\n            if (elseStack === null || tokenIndex > elseStack.tokenIndex) {\n              elseStack = syntaxStash;\n              syntaxStash = false;\n            }\n          } else if (elseStack === null) {\n            exitReason = EXIT_REASON_MISMATCH;\n            break;\n          }\n\n          state = elseStack.nextState;\n          thenStack = elseStack.thenStack;\n          syntaxStack = elseStack.syntaxStack;\n          matchStack = elseStack.matchStack;\n          tokenIndex = elseStack.tokenIndex;\n          token = tokenIndex < tokens.length ? tokens[tokenIndex] : null;\n          elseStack = elseStack.prev;\n          break;\n\n        case 'MatchGraph':\n          state = state.match;\n          break;\n\n        case 'If':\n          if (state.else !== MISMATCH) {\n            pushElseStack(state.else);\n          }\n\n          if (state.then !== MATCH) {\n            pushThenStack(state.then);\n          }\n\n          state = state.match;\n          break;\n\n        case 'MatchOnce':\n          state = {\n            type: 'MatchOnceBuffer',\n            syntax: state,\n            index: 0,\n            mask: 0\n          };\n          break;\n\n        case 'MatchOnceBuffer':\n          var terms = state.syntax.terms;\n\n          if (state.index === terms.length) {\n            if (state.mask === 0 || state.syntax.all) {\n              state = MISMATCH;\n              break;\n            }\n\n            state = MATCH;\n            break;\n          }\n\n          if (state.mask === (1 << terms.length) - 1) {\n            state = MATCH;\n            break;\n          }\n\n          for (; state.index < terms.length; state.index++) {\n            var matchFlag = 1 << state.index;\n\n            if ((state.mask & matchFlag) === 0) {\n              pushElseStack(state);\n              pushThenStack({\n                type: 'AddMatchOnce',\n                syntax: state.syntax,\n                mask: state.mask | matchFlag\n              });\n              state = terms[state.index++];\n              break;\n            }\n          }\n\n          break;\n\n        case 'AddMatchOnce':\n          state = {\n            type: 'MatchOnceBuffer',\n            syntax: state.syntax,\n            index: 0,\n            mask: state.mask\n          };\n          break;\n\n        case 'Enum':\n          if (token !== null) {\n            var name = token.value.toLowerCase();\n\n            if (name.indexOf('\\\\') !== -1) {\n              name = name.replace(/\\\\[09].*$/, '');\n            }\n\n            if (hasOwnProperty.call(state.map, name)) {\n              state = state.map[name];\n              break;\n            }\n          }\n\n          state = MISMATCH;\n          break;\n\n        case 'Generic':\n          var opts = syntaxStack !== null ? syntaxStack.opts : null;\n          var lastTokenIndex = tokenIndex + Math.floor(state.fn(token, getNextToken, opts));\n\n          if (!isNaN(lastTokenIndex) && lastTokenIndex > tokenIndex) {\n            while (tokenIndex < lastTokenIndex) {\n              addTokenToMatch();\n            }\n\n            state = MATCH;\n          } else {\n            state = MISMATCH;\n          }\n\n          break;\n\n        case 'Type':\n        case 'Property':\n          var syntaxDict = state.type === 'Type' ? 'types' : 'properties';\n          var dictSyntax = hasOwnProperty.call(syntaxes, syntaxDict) ? syntaxes[syntaxDict][state.name] : null;\n\n          if (!dictSyntax || !dictSyntax.match) {\n            throw new Error('Bad syntax reference: ' + (state.type === 'Type' ? '<' + state.name + '>' : '<\\'' + state.name + '\\'>'));\n          }\n\n          if (syntaxStash !== false && token !== null && state.type === 'Type') {\n            var lowPriorityMatching = state.name === 'custom-ident' && token.type === TYPE.Ident || state.name === 'length' && token.value === '0';\n\n            if (lowPriorityMatching) {\n              if (syntaxStash === null) {\n                syntaxStash = stateSnapshotFromSyntax(state, elseStack);\n              }\n\n              state = MISMATCH;\n              break;\n            }\n          }\n\n          openSyntax();\n          state = dictSyntax.match;\n          break;\n\n        case 'Keyword':\n          var name = state.name;\n\n          if (token !== null) {\n            var keywordName = token.value;\n\n            if (keywordName.indexOf('\\\\') !== -1) {\n              keywordName = keywordName.replace(/\\\\[09].*$/, '');\n            }\n\n            if (areStringsEqualCaseInsensitive(keywordName, name)) {\n              addTokenToMatch();\n              state = MATCH;\n              break;\n            }\n          }\n\n          state = MISMATCH;\n          break;\n\n        case 'AtKeyword':\n        case 'Function':\n          if (token !== null && areStringsEqualCaseInsensitive(token.value, state.name)) {\n            addTokenToMatch();\n            state = MATCH;\n            break;\n          }\n\n          state = MISMATCH;\n          break;\n\n        case 'Token':\n          if (token !== null && token.value === state.value) {\n            addTokenToMatch();\n            state = MATCH;\n            break;\n          }\n\n          state = MISMATCH;\n          break;\n\n        case 'Comma':\n          if (token !== null && token.type === TYPE.Comma) {\n            if (isCommaContextStart(matchStack.token)) {\n              state = MISMATCH;\n            } else {\n              addTokenToMatch();\n              state = isCommaContextEnd(token) ? MISMATCH : MATCH;\n            }\n          } else {\n            state = isCommaContextStart(matchStack.token) || isCommaContextEnd(token) ? MATCH : MISMATCH;\n          }\n\n          break;\n\n        case 'String':\n          var string = '';\n\n          for (var lastTokenIndex = tokenIndex; lastTokenIndex < tokens.length && string.length < state.value.length; lastTokenIndex++) {\n            string += tokens[lastTokenIndex].value;\n          }\n\n          if (areStringsEqualCaseInsensitive(string, state.value)) {\n            while (tokenIndex < lastTokenIndex) {\n              addTokenToMatch();\n            }\n\n            state = MATCH;\n          } else {\n            state = MISMATCH;\n          }\n\n          break;\n\n        default:\n          throw new Error('Unknown node type: ' + state.type);\n      }\n    }\n\n    totalIterationCount += iterationCount;\n\n    switch (exitReason) {\n      case null:\n        console.warn('[csstree-match] BREAK after ' + ITERATION_LIMIT + ' iterations');\n        exitReason = EXIT_REASON_ITERATION_LIMIT;\n        matchStack = null;\n        break;\n\n      case EXIT_REASON_MATCH:\n        while (syntaxStack !== null) {\n          closeSyntax();\n        }\n\n        break;\n\n      default:\n        matchStack = null;\n    }\n\n    return {\n      tokens: tokens,\n      reason: exitReason,\n      iterations: iterationCount,\n      match: matchStack,\n      longestMatch: longestMatch\n    };\n  }\n\n  function matchAsList(tokens, matchGraph, syntaxes) {\n    var matchResult = internalMatch(tokens, matchGraph, syntaxes || {});\n\n    if (matchResult.match !== null) {\n      var item = reverseList(matchResult.match).prev;\n      matchResult.match = [];\n\n      while (item !== null) {\n        switch (item.type) {\n          case STUB:\n            break;\n\n          case OPEN_SYNTAX:\n          case CLOSE_SYNTAX:\n            matchResult.match.push({\n              type: item.type,\n              syntax: item.syntax\n            });\n            break;\n\n          default:\n            matchResult.match.push({\n              token: item.token.value,\n              node: item.token.node\n            });\n            break;\n        }\n\n        item = item.prev;\n      }\n    }\n\n    return matchResult;\n  }\n\n  function matchAsTree(tokens, matchGraph, syntaxes) {\n    var matchResult = internalMatch(tokens, matchGraph, syntaxes || {});\n\n    if (matchResult.match === null) {\n      return matchResult;\n    }\n\n    var item = matchResult.match;\n    var host = matchResult.match = {\n      syntax: matchGraph.syntax || null,\n      match: []\n    };\n    var hostStack = [host];\n    item = reverseList(item).prev;\n\n    while (item !== null) {\n      switch (item.type) {\n        case OPEN_SYNTAX:\n          host.match.push(host = {\n            syntax: item.syntax,\n            match: []\n          });\n          hostStack.push(host);\n          break;\n\n        case CLOSE_SYNTAX:\n          hostStack.pop();\n          host = hostStack[hostStack.length - 1];\n          break;\n\n        default:\n          host.match.push({\n            syntax: item.syntax || null,\n            token: item.token.value,\n            node: item.token.node\n          });\n      }\n\n      item = item.prev;\n    }\n\n    return matchResult;\n  }\n\n  module.exports = {\n    matchAsList: matchAsList,\n    matchAsTree: matchAsTree,\n    getTotalIterationCount: function getTotalIterationCount() {\n      return totalIterationCount;\n    }\n  };\n});","lineCount":555,"map":[[2,0,1,0],[2,6,1,4,"hasOwnProperty"],[2,20,1,18],[2,23,1,21,"Object"],[2,29,1,27],[2,30,1,28,"prototype"],[2,39,1,21],[2,40,1,38,"hasOwnProperty"],[2,54,1,0],[4,0,2,0],[4,6,2,4,"matchGraph"],[4,16,2,14],[4,19,2,17,"require"],[4,30,2,24],[4,66,2,0],[6,0,3,0],[6,6,3,4,"MATCH"],[6,11,3,9],[6,14,3,12,"matchGraph"],[6,24,3,22],[6,25,3,23,"MATCH"],[6,30,3,0],[7,0,4,0],[7,6,4,4,"MISMATCH"],[7,14,4,12],[7,17,4,15,"matchGraph"],[7,27,4,25],[7,28,4,26,"MISMATCH"],[7,36,4,0],[8,0,5,0],[8,6,5,4,"DISALLOW_EMPTY"],[8,20,5,18],[8,23,5,21,"matchGraph"],[8,33,5,31],[8,34,5,32,"DISALLOW_EMPTY"],[8,48,5,0],[10,0,6,0],[10,6,6,4,"TYPE"],[10,10,6,8],[10,13,6,11,"require"],[10,24,6,18],[10,65,6,11],[10,66,6,41,"TYPE"],[10,70,6,0],[12,0,8,0],[12,6,8,4,"STUB"],[12,10,8,8],[12,13,8,11],[12,14,8,0],[13,0,9,0],[13,6,9,4,"TOKEN"],[13,11,9,9],[13,14,9,12],[13,15,9,0],[14,0,10,0],[14,6,10,4,"OPEN_SYNTAX"],[14,17,10,15],[14,20,10,18],[14,21,10,0],[15,0,11,0],[15,6,11,4,"CLOSE_SYNTAX"],[15,18,11,16],[15,21,11,19],[15,22,11,0],[16,0,13,0],[16,6,13,4,"EXIT_REASON_MATCH"],[16,23,13,21],[16,26,13,24],[16,33,13,0],[17,0,14,0],[17,6,14,4,"EXIT_REASON_MISMATCH"],[17,26,14,24],[17,29,14,27],[17,39,14,0],[18,0,15,0],[18,6,15,4,"EXIT_REASON_ITERATION_LIMIT"],[18,33,15,31],[18,36,15,34],[18,139,15,0],[19,0,17,0],[19,6,17,4,"ITERATION_LIMIT"],[19,21,17,19],[19,24,17,22],[19,29,17,0],[20,0,18,0],[20,6,18,4,"totalIterationCount"],[20,25,18,23],[20,28,18,26],[20,29,18,0],[22,0,20,0],[22,11,20,9,"reverseList"],[22,22,20,0],[22,23,20,21,"list"],[22,27,20,0],[22,29,20,27],[23,0,21,4],[23,8,21,8,"prev"],[23,12,21,12],[23,15,21,15],[23,19,21,4],[24,0,22,4],[24,8,22,8,"next"],[24,12,22,12],[24,15,22,15],[24,19,22,4],[25,0,23,4],[25,8,23,8,"item"],[25,12,23,12],[25,15,23,15,"list"],[25,19,23,4],[27,0,25,4],[27,11,25,11,"item"],[27,15,25,15],[27,20,25,20],[27,24,25,4],[27,26,25,26],[28,0,26,8,"next"],[28,6,26,8,"next"],[28,10,26,12],[28,13,26,15,"item"],[28,17,26,19],[28,18,26,20,"prev"],[28,22,26,8],[29,0,27,8,"item"],[29,6,27,8,"item"],[29,10,27,12],[29,11,27,13,"prev"],[29,15,27,8],[29,18,27,20,"prev"],[29,22,27,8],[30,0,28,8,"prev"],[30,6,28,8,"prev"],[30,10,28,12],[30,13,28,15,"item"],[30,17,28,8],[31,0,29,8,"item"],[31,6,29,8,"item"],[31,10,29,12],[31,13,29,15,"next"],[31,17,29,8],[32,0,30,5],[34,0,32,4],[34,11,32,11,"prev"],[34,15,32,4],[35,0,33,1],[37,0,35,0],[37,11,35,9,"areStringsEqualCaseInsensitive"],[37,41,35,0],[37,42,35,40,"testStr"],[37,49,35,0],[37,51,35,49,"referenceStr"],[37,63,35,0],[37,65,35,63],[38,0,36,4],[38,8,36,8,"testStr"],[38,15,36,15],[38,16,36,16,"length"],[38,22,36,8],[38,27,36,27,"referenceStr"],[38,39,36,39],[38,40,36,40,"length"],[38,46,36,4],[38,48,36,48],[39,0,37,8],[39,13,37,15],[39,18,37,8],[40,0,38,5],[42,0,40,4],[42,9,40,9],[42,13,40,13,"i"],[42,14,40,14],[42,17,40,17],[42,18,40,4],[42,20,40,20,"i"],[42,21,40,21],[42,24,40,24,"testStr"],[42,31,40,31],[42,32,40,32,"length"],[42,38,40,4],[42,40,40,40,"i"],[42,41,40,41],[42,43,40,4],[42,45,40,45],[43,0,41,8],[43,10,41,12,"testCode"],[43,18,41,20],[43,21,41,23,"testStr"],[43,28,41,30],[43,29,41,31,"charCodeAt"],[43,39,41,23],[43,40,41,42,"i"],[43,41,41,23],[43,42,41,8],[44,0,42,8],[44,10,42,12,"referenceCode"],[44,23,42,25],[44,26,42,28,"referenceStr"],[44,38,42,40],[44,39,42,41,"charCodeAt"],[44,49,42,28],[44,50,42,52,"i"],[44,51,42,28],[44,52,42,8],[46,0,45,8],[46,10,45,12,"testCode"],[46,18,45,20],[46,22,45,24],[46,28,45,12],[46,32,45,34,"testCode"],[46,40,45,42],[46,44,45,46],[46,50,45,8],[46,52,45,54],[47,0,46,12,"testCode"],[47,8,46,12,"testCode"],[47,16,46,20],[47,19,46,23,"testCode"],[47,27,46,31],[47,30,46,34],[47,32,46,12],[48,0,47,9],[50,0,49,8],[50,10,49,12,"testCode"],[50,18,49,20],[50,23,49,25,"referenceCode"],[50,36,49,8],[50,38,49,40],[51,0,50,12],[51,15,50,19],[51,20,50,12],[52,0,51,9],[53,0,52,5],[55,0,54,4],[55,11,54,11],[55,15,54,4],[56,0,55,1],[58,0,57,0],[58,11,57,9,"isContextEdgeDelim"],[58,29,57,0],[58,30,57,28,"token"],[58,35,57,0],[58,37,57,35],[59,0,58,4],[59,8,58,8,"token"],[59,13,58,13],[59,14,58,14,"type"],[59,18,58,8],[59,23,58,23,"TYPE"],[59,27,58,27],[59,28,58,28,"Delim"],[59,33,58,4],[59,35,58,35],[60,0,59,8],[60,13,59,15],[60,18,59,8],[61,0,60,5],[63,0,64,4],[63,11,64,11,"token"],[63,16,64,16],[63,17,64,17,"value"],[63,22,64,11],[63,27,64,27],[63,30,64,4],[64,0,65,1],[66,0,67,0],[66,11,67,9,"isCommaContextStart"],[66,30,67,0],[66,31,67,29,"token"],[66,36,67,0],[66,38,67,36],[67,0,68,4],[67,8,68,8,"token"],[67,13,68,13],[67,18,68,18],[67,22,68,4],[67,24,68,24],[68,0,69,8],[68,13,69,15],[68,17,69,8],[69,0,70,5],[71,0,72,4],[71,11,73,8,"token"],[71,16,73,13],[71,17,73,14,"type"],[71,21,73,8],[71,26,73,23,"TYPE"],[71,30,73,27],[71,31,73,28,"Comma"],[71,36,73,8],[71,40,74,8,"token"],[71,45,74,13],[71,46,74,14,"type"],[71,50,74,8],[71,55,74,23,"TYPE"],[71,59,74,27],[71,60,74,28,"Function"],[71,68,73,8],[71,72,75,8,"token"],[71,77,75,13],[71,78,75,14,"type"],[71,82,75,8],[71,87,75,23,"TYPE"],[71,91,75,27],[71,92,75,28,"LeftParenthesis"],[71,107,73,8],[71,111,76,8,"token"],[71,116,76,13],[71,117,76,14,"type"],[71,121,76,8],[71,126,76,23,"TYPE"],[71,130,76,27],[71,131,76,28,"LeftSquareBracket"],[71,148,73,8],[71,152,77,8,"token"],[71,157,77,13],[71,158,77,14,"type"],[71,162,77,8],[71,167,77,23,"TYPE"],[71,171,77,27],[71,172,77,28,"LeftCurlyBracket"],[71,188,73,8],[71,192,78,8,"isContextEdgeDelim"],[71,210,78,26],[71,211,78,27,"token"],[71,216,78,26],[71,217,72,4],[72,0,80,1],[74,0,82,0],[74,11,82,9,"isCommaContextEnd"],[74,28,82,0],[74,29,82,27,"token"],[74,34,82,0],[74,36,82,34],[75,0,83,4],[75,8,83,8,"token"],[75,13,83,13],[75,18,83,18],[75,22,83,4],[75,24,83,24],[76,0,84,8],[76,13,84,15],[76,17,84,8],[77,0,85,5],[79,0,87,4],[79,11,88,8,"token"],[79,16,88,13],[79,17,88,14,"type"],[79,21,88,8],[79,26,88,23,"TYPE"],[79,30,88,27],[79,31,88,28,"RightParenthesis"],[79,47,88,8],[79,51,89,8,"token"],[79,56,89,13],[79,57,89,14,"type"],[79,61,89,8],[79,66,89,23,"TYPE"],[79,70,89,27],[79,71,89,28,"RightSquareBracket"],[79,89,88,8],[79,93,90,8,"token"],[79,98,90,13],[79,99,90,14,"type"],[79,103,90,8],[79,108,90,23,"TYPE"],[79,112,90,27],[79,113,90,28,"RightCurlyBracket"],[79,130,88,8],[79,134,91,8,"token"],[79,139,91,13],[79,140,91,14,"type"],[79,144,91,8],[79,149,91,23,"TYPE"],[79,153,91,27],[79,154,91,28,"Delim"],[79,159,87,4],[80,0,93,1],[82,0,95,0],[82,11,95,9,"internalMatch"],[82,24,95,0],[82,25,95,23,"tokens"],[82,31,95,0],[82,33,95,31,"state"],[82,38,95,0],[82,40,95,38,"syntaxes"],[82,48,95,0],[82,50,95,48],[83,0,96,4],[83,13,96,13,"moveToNextToken"],[83,28,96,4],[83,31,96,31],[84,0,97,8],[84,9,97,11],[85,0,98,12,"tokenIndex"],[85,8,98,12,"tokenIndex"],[85,18,98,22],[86,0,99,12,"token"],[86,8,99,12,"token"],[86,13,99,17],[86,16,99,20,"tokenIndex"],[86,26,99,30],[86,29,99,33,"tokens"],[86,35,99,39],[86,36,99,40,"length"],[86,42,99,20],[86,45,99,49,"tokens"],[86,51,99,55],[86,52,99,56,"tokenIndex"],[86,62,99,55],[86,63,99,20],[86,66,99,70],[86,70,99,12],[87,0,100,9],[87,7,97,8],[87,15,100,17,"token"],[87,20,100,22],[87,25,100,27],[87,29,100,17],[87,34,100,36,"token"],[87,39,100,41],[87,40,100,42,"type"],[87,44,100,36],[87,49,100,51,"TYPE"],[87,53,100,55],[87,54,100,56,"WhiteSpace"],[87,64,100,36],[87,68,100,70,"token"],[87,73,100,75],[87,74,100,76,"type"],[87,78,100,70],[87,83,100,85,"TYPE"],[87,87,100,89],[87,88,100,90,"Comment"],[87,95,100,17],[87,96,97,8],[88,0,101,5],[90,0,103,4],[90,13,103,13,"getNextToken"],[90,25,103,4],[90,26,103,26,"offset"],[90,32,103,4],[90,34,103,34],[91,0,104,8],[91,10,104,12,"nextIndex"],[91,19,104,21],[91,22,104,24,"tokenIndex"],[91,32,104,34],[91,35,104,37,"offset"],[91,41,104,8],[92,0,106,8],[92,13,106,15,"nextIndex"],[92,22,106,24],[92,25,106,27,"tokens"],[92,31,106,33],[92,32,106,34,"length"],[92,38,106,15],[92,41,106,43,"tokens"],[92,47,106,49],[92,48,106,50,"nextIndex"],[92,57,106,49],[92,58,106,15],[92,61,106,63],[92,65,106,8],[93,0,107,5],[95,0,109,4],[95,13,109,13,"stateSnapshotFromSyntax"],[95,36,109,4],[95,37,109,37,"nextState"],[95,46,109,4],[95,48,109,48,"prev"],[95,52,109,4],[95,54,109,54],[96,0,110,8],[96,13,110,15],[97,0,111,12,"nextState"],[97,8,111,12,"nextState"],[97,17,111,21],[97,19,111,23,"nextState"],[97,28,110,15],[98,0,112,12,"matchStack"],[98,8,112,12,"matchStack"],[98,18,112,22],[98,20,112,24,"matchStack"],[98,30,110,15],[99,0,113,12,"syntaxStack"],[99,8,113,12,"syntaxStack"],[99,19,113,23],[99,21,113,25,"syntaxStack"],[99,32,110,15],[100,0,114,12,"thenStack"],[100,8,114,12,"thenStack"],[100,17,114,21],[100,19,114,23,"thenStack"],[100,28,110,15],[101,0,115,12,"tokenIndex"],[101,8,115,12,"tokenIndex"],[101,18,115,22],[101,20,115,24,"tokenIndex"],[101,30,110,15],[102,0,116,12,"prev"],[102,8,116,12,"prev"],[102,12,116,16],[102,14,116,18,"prev"],[103,0,110,15],[103,7,110,8],[104,0,118,5],[106,0,120,4],[106,13,120,13,"pushThenStack"],[106,26,120,4],[106,27,120,27,"nextState"],[106,36,120,4],[106,38,120,38],[107,0,121,8,"thenStack"],[107,6,121,8,"thenStack"],[107,15,121,17],[107,18,121,20],[108,0,122,12,"nextState"],[108,8,122,12,"nextState"],[108,17,122,21],[108,19,122,23,"nextState"],[108,28,121,20],[109,0,123,12,"matchStack"],[109,8,123,12,"matchStack"],[109,18,123,22],[109,20,123,24,"matchStack"],[109,30,121,20],[110,0,124,12,"syntaxStack"],[110,8,124,12,"syntaxStack"],[110,19,124,23],[110,21,124,25,"syntaxStack"],[110,32,121,20],[111,0,125,12,"prev"],[111,8,125,12,"prev"],[111,12,125,16],[111,14,125,18,"thenStack"],[112,0,121,20],[112,7,121,8],[113,0,127,5],[115,0,129,4],[115,13,129,13,"pushElseStack"],[115,26,129,4],[115,27,129,27,"nextState"],[115,36,129,4],[115,38,129,38],[116,0,130,8,"elseStack"],[116,6,130,8,"elseStack"],[116,15,130,17],[116,18,130,20,"stateSnapshotFromSyntax"],[116,41,130,43],[116,42,130,44,"nextState"],[116,51,130,43],[116,53,130,55,"elseStack"],[116,62,130,43],[116,63,130,8],[117,0,131,5],[119,0,133,4],[119,13,133,13,"addTokenToMatch"],[119,28,133,4],[119,31,133,31],[120,0,134,8,"matchStack"],[120,6,134,8,"matchStack"],[120,16,134,18],[120,19,134,21],[121,0,135,12,"type"],[121,8,135,12,"type"],[121,12,135,16],[121,14,135,18,"TOKEN"],[121,19,134,21],[122,0,136,12,"syntax"],[122,8,136,12,"syntax"],[122,14,136,18],[122,16,136,20,"state"],[122,21,136,25],[122,22,136,26,"syntax"],[122,28,134,21],[123,0,137,12,"token"],[123,8,137,12,"token"],[123,13,137,17],[123,15,137,19,"token"],[123,20,134,21],[124,0,138,12,"prev"],[124,8,138,12,"prev"],[124,12,138,16],[124,14,138,18,"matchStack"],[125,0,134,21],[125,7,134,8],[126,0,141,8,"moveToNextToken"],[126,6,141,8,"moveToNextToken"],[126,21,141,23],[127,0,142,8,"syntaxStash"],[127,6,142,8,"syntaxStash"],[127,17,142,19],[127,20,142,22],[127,24,142,8],[129,0,144,8],[129,10,144,12,"tokenIndex"],[129,20,144,22],[129,23,144,25,"longestMatch"],[129,35,144,8],[129,37,144,39],[130,0,145,12,"longestMatch"],[130,8,145,12,"longestMatch"],[130,20,145,24],[130,23,145,27,"tokenIndex"],[130,33,145,12],[131,0,146,9],[132,0,147,5],[134,0,149,4],[134,13,149,13,"openSyntax"],[134,23,149,4],[134,26,149,26],[135,0,150,8,"syntaxStack"],[135,6,150,8,"syntaxStack"],[135,17,150,19],[135,20,150,22],[136,0,151,12,"syntax"],[136,8,151,12,"syntax"],[136,14,151,18],[136,16,151,20,"state"],[136,21,151,25],[136,22,151,26,"syntax"],[136,28,150,22],[137,0,152,12,"opts"],[137,8,152,12,"opts"],[137,12,152,16],[137,14,152,18,"state"],[137,19,152,23],[137,20,152,24,"syntax"],[137,26,152,18],[137,27,152,31,"opts"],[137,31,152,18],[137,35,152,40,"syntaxStack"],[137,46,152,51],[137,51,152,56],[137,55,152,40],[137,59,152,64,"syntaxStack"],[137,70,152,75],[137,71,152,76,"opts"],[137,75,152,18],[137,79,152,85],[137,83,150,22],[138,0,153,12,"prev"],[138,8,153,12,"prev"],[138,12,153,16],[138,14,153,18,"syntaxStack"],[139,0,150,22],[139,7,150,8],[140,0,156,8,"matchStack"],[140,6,156,8,"matchStack"],[140,16,156,18],[140,19,156,21],[141,0,157,12,"type"],[141,8,157,12,"type"],[141,12,157,16],[141,14,157,18,"OPEN_SYNTAX"],[141,25,156,21],[142,0,158,12,"syntax"],[142,8,158,12,"syntax"],[142,14,158,18],[142,16,158,20,"state"],[142,21,158,25],[142,22,158,26,"syntax"],[142,28,156,21],[143,0,159,12,"token"],[143,8,159,12,"token"],[143,13,159,17],[143,15,159,19,"matchStack"],[143,25,159,29],[143,26,159,30,"token"],[143,31,156,21],[144,0,160,12,"prev"],[144,8,160,12,"prev"],[144,12,160,16],[144,14,160,18,"matchStack"],[145,0,156,21],[145,7,156,8],[146,0,162,5],[148,0,164,4],[148,13,164,13,"closeSyntax"],[148,24,164,4],[148,27,164,27],[149,0,165,8],[149,10,165,12,"matchStack"],[149,20,165,22],[149,21,165,23,"type"],[149,25,165,12],[149,30,165,32,"OPEN_SYNTAX"],[149,41,165,8],[149,43,165,45],[150,0,166,12,"matchStack"],[150,8,166,12,"matchStack"],[150,18,166,22],[150,21,166,25,"matchStack"],[150,31,166,35],[150,32,166,36,"prev"],[150,36,166,12],[151,0,167,9],[151,7,165,8],[151,13,167,15],[152,0,168,12,"matchStack"],[152,8,168,12,"matchStack"],[152,18,168,22],[152,21,168,25],[153,0,169,16,"type"],[153,10,169,16,"type"],[153,14,169,20],[153,16,169,22,"CLOSE_SYNTAX"],[153,28,168,25],[154,0,170,16,"syntax"],[154,10,170,16,"syntax"],[154,16,170,22],[154,18,170,24,"syntaxStack"],[154,29,170,35],[154,30,170,36,"syntax"],[154,36,168,25],[155,0,171,16,"token"],[155,10,171,16,"token"],[155,15,171,21],[155,17,171,23,"matchStack"],[155,27,171,33],[155,28,171,34,"token"],[155,33,168,25],[156,0,172,16,"prev"],[156,10,172,16,"prev"],[156,14,172,20],[156,16,172,22,"matchStack"],[157,0,168,25],[157,9,168,12],[158,0,174,9],[160,0,176,8,"syntaxStack"],[160,6,176,8,"syntaxStack"],[160,17,176,19],[160,20,176,22,"syntaxStack"],[160,31,176,33],[160,32,176,34,"prev"],[160,36,176,8],[161,0,177,5],[163,0,179,4],[163,8,179,8,"syntaxStack"],[163,19,179,19],[163,22,179,22],[163,26,179,4],[164,0,180,4],[164,8,180,8,"thenStack"],[164,17,180,17],[164,20,180,20],[164,24,180,4],[165,0,181,4],[165,8,181,8,"elseStack"],[165,17,181,17],[165,20,181,20],[165,24,181,4],[166,0,186,4],[166,8,186,8,"syntaxStash"],[166,19,186,19],[166,22,186,22],[166,26,186,4],[167,0,188,4],[167,8,188,8,"iterationCount"],[167,22,188,22],[167,25,188,25],[167,26,188,4],[168,0,189,4],[168,8,189,8,"exitReason"],[168,18,189,18],[168,21,189,21],[168,25,189,4],[169,0,191,4],[169,8,191,8,"token"],[169,13,191,13],[169,16,191,16],[169,20,191,4],[170,0,192,4],[170,8,192,8,"tokenIndex"],[170,18,192,18],[170,21,192,21],[170,22,192,22],[170,23,192,4],[171,0,193,4],[171,8,193,8,"longestMatch"],[171,20,193,20],[171,23,193,23],[171,24,193,4],[172,0,194,4],[172,8,194,8,"matchStack"],[172,18,194,18],[172,21,194,21],[173,0,195,8,"type"],[173,6,195,8,"type"],[173,10,195,12],[173,12,195,14,"STUB"],[173,16,194,21],[174,0,196,8,"syntax"],[174,6,196,8,"syntax"],[174,12,196,14],[174,14,196,16],[174,18,194,21],[175,0,197,8,"token"],[175,6,197,8,"token"],[175,11,197,13],[175,13,197,15],[175,17,194,21],[176,0,198,8,"prev"],[176,6,198,8,"prev"],[176,10,198,12],[176,12,198,14],[177,0,194,21],[177,5,194,4],[178,0,201,4,"moveToNextToken"],[178,4,201,4,"moveToNextToken"],[178,19,201,19],[180,0,203,4],[180,11,203,11,"exitReason"],[180,21,203,21],[180,26,203,26],[180,30,203,11],[180,34,203,34],[180,36,203,36,"iterationCount"],[180,50,203,34],[180,53,203,53,"ITERATION_LIMIT"],[180,68,203,4],[180,70,203,70],[181,0,221,8],[181,14,221,16,"state"],[181,19,221,21],[181,20,221,22,"type"],[181,24,221,8],[182,0,222,12],[182,13,222,17],[182,20,222,12],[183,0,223,16],[183,14,223,20,"thenStack"],[183,23,223,29],[183,28,223,34],[183,32,223,16],[183,34,223,40],[184,0,225,20],[184,16,225,24,"token"],[184,21,225,29],[184,26,225,34],[184,30,225,20],[184,32,225,40],[185,0,227,24],[185,18,227,28,"tokenIndex"],[185,28,227,38],[185,33,227,43,"tokens"],[185,39,227,49],[185,40,227,50,"length"],[185,46,227,43],[185,49,227,59],[185,50,227,28],[185,54,227,65,"token"],[185,59,227,70],[185,60,227,71,"value"],[185,65,227,65],[185,70,227,81],[185,75,227,65],[185,79,227,90,"token"],[185,84,227,95],[185,85,227,96,"value"],[185,90,227,90],[185,95,227,106],[185,100,227,24],[185,102,227,114],[186,0,228,28,"state"],[186,16,228,28,"state"],[186,21,228,33],[186,24,228,36,"MISMATCH"],[186,32,228,28],[187,0,229,28],[188,0,230,25],[189,0,231,21],[191,0,234,20,"exitReason"],[191,12,234,20,"exitReason"],[191,22,234,30],[191,25,234,33,"EXIT_REASON_MATCH"],[191,42,234,20],[192,0,235,20],[193,0,236,17],[195,0,239,16,"state"],[195,10,239,16,"state"],[195,15,239,21],[195,18,239,24,"thenStack"],[195,27,239,33],[195,28,239,34,"nextState"],[195,37,239,16],[197,0,242,16],[197,14,242,20,"state"],[197,19,242,25],[197,24,242,30,"DISALLOW_EMPTY"],[197,38,242,16],[197,40,242,46],[198,0,243,20],[198,16,243,24,"thenStack"],[198,25,243,33],[198,26,243,34,"matchStack"],[198,36,243,24],[198,41,243,49,"matchStack"],[198,51,243,20],[198,53,243,61],[199,0,244,24,"state"],[199,14,244,24,"state"],[199,19,244,29],[199,22,244,32,"MISMATCH"],[199,30,244,24],[200,0,245,24],[201,0,246,21],[201,13,243,20],[201,19,246,27],[202,0,247,24,"state"],[202,14,247,24,"state"],[202,19,247,29],[202,22,247,32,"MATCH"],[202,27,247,24],[203,0,248,21],[204,0,249,17],[206,0,252,16],[206,17,252,23,"thenStack"],[206,26,252,32],[206,27,252,33,"syntaxStack"],[206,38,252,23],[206,43,252,49,"syntaxStack"],[206,54,252,16],[206,56,252,62],[207,0,253,20,"closeSyntax"],[207,12,253,20,"closeSyntax"],[207,23,253,31],[208,0,254,17],[210,0,257,16,"thenStack"],[210,10,257,16,"thenStack"],[210,19,257,25],[210,22,257,28,"thenStack"],[210,31,257,37],[210,32,257,38,"prev"],[210,36,257,16],[211,0,258,16],[213,0,260,12],[213,13,260,17],[213,23,260,12],[214,0,262,16],[214,14,262,20,"syntaxStash"],[214,25,262,31],[214,30,262,36],[214,34,262,20],[214,38,262,44,"syntaxStash"],[214,49,262,55],[214,54,262,60],[214,59,262,16],[214,61,262,67],[215,0,264,20],[215,16,264,24,"elseStack"],[215,25,264,33],[215,30,264,38],[215,34,264,24],[215,38,264,46,"tokenIndex"],[215,48,264,56],[215,51,264,59,"elseStack"],[215,60,264,68],[215,61,264,69,"tokenIndex"],[215,71,264,20],[215,73,264,81],[216,0,266,24,"elseStack"],[216,14,266,24,"elseStack"],[216,23,266,33],[216,26,266,36,"syntaxStash"],[216,37,266,24],[217,0,267,24,"syntaxStash"],[217,14,267,24,"syntaxStash"],[217,25,267,35],[217,28,267,38],[217,33,267,24],[218,0,268,21],[219,0,269,17],[219,11,262,16],[219,17,269,23],[219,21,269,27,"elseStack"],[219,30,269,36],[219,35,269,41],[219,39,269,23],[219,41,269,47],[220,0,272,20,"exitReason"],[220,12,272,20,"exitReason"],[220,22,272,30],[220,25,272,33,"EXIT_REASON_MISMATCH"],[220,45,272,20],[221,0,273,20],[222,0,274,17],[224,0,277,16,"state"],[224,10,277,16,"state"],[224,15,277,21],[224,18,277,24,"elseStack"],[224,27,277,33],[224,28,277,34,"nextState"],[224,37,277,16],[225,0,280,16,"thenStack"],[225,10,280,16,"thenStack"],[225,19,280,25],[225,22,280,28,"elseStack"],[225,31,280,37],[225,32,280,38,"thenStack"],[225,41,280,16],[226,0,281,16,"syntaxStack"],[226,10,281,16,"syntaxStack"],[226,21,281,27],[226,24,281,30,"elseStack"],[226,33,281,39],[226,34,281,40,"syntaxStack"],[226,45,281,16],[227,0,282,16,"matchStack"],[227,10,282,16,"matchStack"],[227,20,282,26],[227,23,282,29,"elseStack"],[227,32,282,38],[227,33,282,39,"matchStack"],[227,43,282,16],[228,0,283,16,"tokenIndex"],[228,10,283,16,"tokenIndex"],[228,20,283,26],[228,23,283,29,"elseStack"],[228,32,283,38],[228,33,283,39,"tokenIndex"],[228,43,283,16],[229,0,284,16,"token"],[229,10,284,16,"token"],[229,15,284,21],[229,18,284,24,"tokenIndex"],[229,28,284,34],[229,31,284,37,"tokens"],[229,37,284,43],[229,38,284,44,"length"],[229,44,284,24],[229,47,284,53,"tokens"],[229,53,284,59],[229,54,284,60,"tokenIndex"],[229,64,284,59],[229,65,284,24],[229,68,284,74],[229,72,284,16],[230,0,287,16,"elseStack"],[230,10,287,16,"elseStack"],[230,19,287,25],[230,22,287,28,"elseStack"],[230,31,287,37],[230,32,287,38,"prev"],[230,36,287,16],[231,0,288,16],[233,0,290,12],[233,13,290,17],[233,25,290,12],[234,0,291,16,"state"],[234,10,291,16,"state"],[234,15,291,21],[234,18,291,24,"state"],[234,23,291,29],[234,24,291,30,"match"],[234,29,291,16],[235,0,292,16],[237,0,294,12],[237,13,294,17],[237,17,294,12],[238,0,297,16],[238,14,297,20,"state"],[238,19,297,25],[238,20,297,26,"else"],[238,24,297,20],[238,29,297,35,"MISMATCH"],[238,37,297,16],[238,39,297,45],[239,0,298,20,"pushElseStack"],[239,12,298,20,"pushElseStack"],[239,25,298,33],[239,26,298,34,"state"],[239,31,298,39],[239,32,298,40,"else"],[239,36,298,33],[239,37,298,20],[240,0,299,17],[242,0,301,16],[242,14,301,20,"state"],[242,19,301,25],[242,20,301,26,"then"],[242,24,301,20],[242,29,301,35,"MATCH"],[242,34,301,16],[242,36,301,42],[243,0,302,20,"pushThenStack"],[243,12,302,20,"pushThenStack"],[243,25,302,33],[243,26,302,34,"state"],[243,31,302,39],[243,32,302,40,"then"],[243,36,302,33],[243,37,302,20],[244,0,303,17],[246,0,305,16,"state"],[246,10,305,16,"state"],[246,15,305,21],[246,18,305,24,"state"],[246,23,305,29],[246,24,305,30,"match"],[246,29,305,16],[247,0,306,16],[249,0,308,12],[249,13,308,17],[249,24,308,12],[250,0,309,16,"state"],[250,10,309,16,"state"],[250,15,309,21],[250,18,309,24],[251,0,310,20,"type"],[251,12,310,20,"type"],[251,16,310,24],[251,18,310,26],[251,35,309,24],[252,0,311,20,"syntax"],[252,12,311,20,"syntax"],[252,18,311,26],[252,20,311,28,"state"],[252,25,309,24],[253,0,312,20,"index"],[253,12,312,20,"index"],[253,17,312,25],[253,19,312,27],[253,20,309,24],[254,0,313,20,"mask"],[254,12,313,20,"mask"],[254,16,313,24],[254,18,313,26],[255,0,309,24],[255,11,309,16],[256,0,315,16],[258,0,317,12],[258,13,317,17],[258,30,317,12],[259,0,318,16],[259,14,318,20,"terms"],[259,19,318,25],[259,22,318,28,"state"],[259,27,318,33],[259,28,318,34,"syntax"],[259,34,318,28],[259,35,318,41,"terms"],[259,40,318,16],[261,0,320,16],[261,14,320,20,"state"],[261,19,320,25],[261,20,320,26,"index"],[261,25,320,20],[261,30,320,36,"terms"],[261,35,320,41],[261,36,320,42,"length"],[261,42,320,16],[261,44,320,50],[262,0,322,20],[262,16,322,24,"state"],[262,21,322,29],[262,22,322,30,"mask"],[262,26,322,24],[262,31,322,39],[262,32,322,24],[262,36,322,44,"state"],[262,41,322,49],[262,42,322,50,"syntax"],[262,48,322,44],[262,49,322,57,"all"],[262,52,322,20],[262,54,322,62],[263,0,323,24,"state"],[263,14,323,24,"state"],[263,19,323,29],[263,22,323,32,"MISMATCH"],[263,30,323,24],[264,0,324,24],[265,0,325,21],[267,0,328,20,"state"],[267,12,328,20,"state"],[267,17,328,25],[267,20,328,28,"MATCH"],[267,25,328,20],[268,0,329,20],[269,0,330,17],[271,0,333,16],[271,14,333,20,"state"],[271,19,333,25],[271,20,333,26,"mask"],[271,24,333,20],[271,29,333,35],[271,30,333,36],[271,35,333,41,"terms"],[271,40,333,46],[271,41,333,47,"length"],[271,47,333,35],[271,51,333,57],[271,52,333,16],[271,54,333,60],[272,0,334,20,"state"],[272,12,334,20,"state"],[272,17,334,25],[272,20,334,28,"MATCH"],[272,25,334,20],[273,0,335,20],[274,0,336,17],[276,0,338,16],[276,17,338,23,"state"],[276,22,338,28],[276,23,338,29,"index"],[276,28,338,23],[276,31,338,37,"terms"],[276,36,338,42],[276,37,338,43,"length"],[276,43,338,16],[276,45,338,51,"state"],[276,50,338,56],[276,51,338,57,"index"],[276,56,338,51],[276,58,338,16],[276,60,338,66],[277,0,339,20],[277,16,339,24,"matchFlag"],[277,25,339,33],[277,28,339,36],[277,33,339,41,"state"],[277,38,339,46],[277,39,339,47,"index"],[277,44,339,20],[279,0,341,20],[279,16,341,24],[279,17,341,25,"state"],[279,22,341,30],[279,23,341,31,"mask"],[279,27,341,25],[279,30,341,38,"matchFlag"],[279,39,341,24],[279,45,341,53],[279,46,341,20],[279,48,341,56],[280,0,344,24,"pushElseStack"],[280,14,344,24,"pushElseStack"],[280,27,344,37],[280,28,344,38,"state"],[280,33,344,37],[280,34,344,24],[281,0,345,24,"pushThenStack"],[281,14,345,24,"pushThenStack"],[281,27,345,37],[281,28,345,38],[282,0,346,28,"type"],[282,16,346,28,"type"],[282,20,346,32],[282,22,346,34],[282,36,345,38],[283,0,347,28,"syntax"],[283,16,347,28,"syntax"],[283,22,347,34],[283,24,347,36,"state"],[283,29,347,41],[283,30,347,42,"syntax"],[283,36,345,38],[284,0,348,28,"mask"],[284,16,348,28,"mask"],[284,20,348,32],[284,22,348,34,"state"],[284,27,348,39],[284,28,348,40,"mask"],[284,32,348,34],[284,35,348,47,"matchFlag"],[285,0,345,38],[285,15,345,37],[285,16,345,24],[286,0,352,24,"state"],[286,14,352,24,"state"],[286,19,352,29],[286,22,352,32,"terms"],[286,27,352,37],[286,28,352,38,"state"],[286,33,352,43],[286,34,352,44,"index"],[286,39,352,38],[286,41,352,37],[286,42,352,24],[287,0,353,24],[288,0,354,21],[289,0,355,17],[291,0,356,16],[293,0,358,12],[293,13,358,17],[293,27,358,12],[294,0,359,16,"state"],[294,10,359,16,"state"],[294,15,359,21],[294,18,359,24],[295,0,360,20,"type"],[295,12,360,20,"type"],[295,16,360,24],[295,18,360,26],[295,35,359,24],[296,0,361,20,"syntax"],[296,12,361,20,"syntax"],[296,18,361,26],[296,20,361,28,"state"],[296,25,361,33],[296,26,361,34,"syntax"],[296,32,359,24],[297,0,362,20,"index"],[297,12,362,20,"index"],[297,17,362,25],[297,19,362,27],[297,20,359,24],[298,0,363,20,"mask"],[298,12,363,20,"mask"],[298,16,363,24],[298,18,363,26,"state"],[298,23,363,31],[298,24,363,32,"mask"],[299,0,359,24],[299,11,359,16],[300,0,365,16],[302,0,367,12],[302,13,367,17],[302,19,367,12],[303,0,368,16],[303,14,368,20,"token"],[303,19,368,25],[303,24,368,30],[303,28,368,16],[303,30,368,36],[304,0,369,20],[304,16,369,24,"name"],[304,20,369,28],[304,23,369,31,"token"],[304,28,369,36],[304,29,369,37,"value"],[304,34,369,31],[304,35,369,43,"toLowerCase"],[304,46,369,31],[304,48,369,20],[306,0,372,20],[306,16,372,24,"name"],[306,20,372,28],[306,21,372,29,"indexOf"],[306,28,372,24],[306,29,372,37],[306,33,372,24],[306,39,372,47],[306,40,372,48],[306,41,372,20],[306,43,372,51],[307,0,373,24,"name"],[307,14,373,24,"name"],[307,18,373,28],[307,21,373,31,"name"],[307,25,373,35],[307,26,373,36,"replace"],[307,33,373,31],[307,34,373,44],[307,45,373,31],[307,47,373,57],[307,49,373,31],[307,50,373,24],[308,0,374,21],[310,0,376,20],[310,16,376,24,"hasOwnProperty"],[310,30,376,38],[310,31,376,39,"call"],[310,35,376,24],[310,36,376,44,"state"],[310,41,376,49],[310,42,376,50,"map"],[310,45,376,24],[310,47,376,55,"name"],[310,51,376,24],[310,52,376,20],[310,54,376,62],[311,0,377,24,"state"],[311,14,377,24,"state"],[311,19,377,29],[311,22,377,32,"state"],[311,27,377,37],[311,28,377,38,"map"],[311,31,377,32],[311,32,377,42,"name"],[311,36,377,32],[311,37,377,24],[312,0,378,24],[313,0,379,21],[314,0,380,17],[316,0,382,16,"state"],[316,10,382,16,"state"],[316,15,382,21],[316,18,382,24,"MISMATCH"],[316,26,382,16],[317,0,383,16],[319,0,385,12],[319,13,385,17],[319,22,385,12],[320,0,386,16],[320,14,386,20,"opts"],[320,18,386,24],[320,21,386,27,"syntaxStack"],[320,32,386,38],[320,37,386,43],[320,41,386,27],[320,44,386,50,"syntaxStack"],[320,55,386,61],[320,56,386,62,"opts"],[320,60,386,27],[320,63,386,69],[320,67,386,16],[321,0,387,16],[321,14,387,20,"lastTokenIndex"],[321,28,387,34],[321,31,387,37,"tokenIndex"],[321,41,387,47],[321,44,387,50,"Math"],[321,48,387,54],[321,49,387,55,"floor"],[321,54,387,50],[321,55,387,61,"state"],[321,60,387,66],[321,61,387,67,"fn"],[321,63,387,61],[321,64,387,70,"token"],[321,69,387,61],[321,71,387,77,"getNextToken"],[321,83,387,61],[321,85,387,91,"opts"],[321,89,387,61],[321,90,387,50],[321,91,387,16],[323,0,389,16],[323,14,389,20],[323,15,389,21,"isNaN"],[323,20,389,26],[323,21,389,27,"lastTokenIndex"],[323,35,389,26],[323,36,389,20],[323,40,389,46,"lastTokenIndex"],[323,54,389,60],[323,57,389,63,"tokenIndex"],[323,67,389,16],[323,69,389,75],[324,0,390,20],[324,19,390,27,"tokenIndex"],[324,29,390,37],[324,32,390,40,"lastTokenIndex"],[324,46,390,20],[324,48,390,56],[325,0,391,24,"addTokenToMatch"],[325,14,391,24,"addTokenToMatch"],[325,29,391,39],[326,0,392,21],[328,0,394,20,"state"],[328,12,394,20,"state"],[328,17,394,25],[328,20,394,28,"MATCH"],[328,25,394,20],[329,0,395,17],[329,11,389,16],[329,17,395,23],[330,0,396,20,"state"],[330,12,396,20,"state"],[330,17,396,25],[330,20,396,28,"MISMATCH"],[330,28,396,20],[331,0,397,17],[333,0,399,16],[335,0,401,12],[335,13,401,17],[335,19,401,12],[336,0,402,12],[336,13,402,17],[336,23,402,12],[337,0,403,16],[337,14,403,20,"syntaxDict"],[337,24,403,30],[337,27,403,33,"state"],[337,32,403,38],[337,33,403,39,"type"],[337,37,403,33],[337,42,403,48],[337,48,403,33],[337,51,403,57],[337,58,403,33],[337,61,403,67],[337,73,403,16],[338,0,404,16],[338,14,404,20,"dictSyntax"],[338,24,404,30],[338,27,404,33,"hasOwnProperty"],[338,41,404,47],[338,42,404,48,"call"],[338,46,404,33],[338,47,404,53,"syntaxes"],[338,55,404,33],[338,57,404,63,"syntaxDict"],[338,67,404,33],[338,71,404,77,"syntaxes"],[338,79,404,85],[338,80,404,86,"syntaxDict"],[338,90,404,85],[338,91,404,77],[338,92,404,98,"state"],[338,97,404,103],[338,98,404,104,"name"],[338,102,404,77],[338,103,404,33],[338,106,404,112],[338,110,404,16],[340,0,406,16],[340,14,406,20],[340,15,406,21,"dictSyntax"],[340,25,406,20],[340,29,406,35],[340,30,406,36,"dictSyntax"],[340,40,406,46],[340,41,406,47,"match"],[340,46,406,16],[340,48,406,54],[341,0,407,20],[341,18,407,26],[341,22,407,30,"Error"],[341,27,407,26],[341,28,408,24],[341,56,409,25,"state"],[341,61,409,30],[341,62,409,31,"type"],[341,66,409,25],[341,71,409,40],[341,77,409,25],[341,80,410,30],[341,86,410,36,"state"],[341,91,410,41],[341,92,410,42,"name"],[341,96,410,30],[341,99,410,49],[341,102,409,25],[341,105,411,30],[341,113,411,38,"state"],[341,118,411,43],[341,119,411,44,"name"],[341,123,411,30],[341,126,411,51],[341,131,408,24],[341,132,407,26],[341,133,407,20],[342,0,413,17],[344,0,416,16],[344,14,416,20,"syntaxStash"],[344,25,416,31],[344,30,416,36],[344,35,416,20],[344,39,416,45,"token"],[344,44,416,50],[344,49,416,55],[344,53,416,20],[344,57,416,63,"state"],[344,62,416,68],[344,63,416,69,"type"],[344,67,416,63],[344,72,416,78],[344,78,416,16],[344,80,416,86],[345,0,417,20],[345,16,417,24,"lowPriorityMatching"],[345,35,417,43],[345,38,421,25,"state"],[345,43,421,30],[345,44,421,31,"name"],[345,48,421,25],[345,53,421,40],[345,67,421,25],[345,71,421,58,"token"],[345,76,421,63],[345,77,421,64,"type"],[345,81,421,58],[345,86,421,73,"TYPE"],[345,90,421,77],[345,91,421,78,"Ident"],[345,96,421,24],[345,100,426,25,"state"],[345,105,426,30],[345,106,426,31,"name"],[345,110,426,25],[345,115,426,40],[345,123,426,25],[345,127,426,52,"token"],[345,132,426,57],[345,133,426,58,"value"],[345,138,426,52],[345,143,426,68],[345,146,417,20],[347,0,428,20],[347,16,428,24,"lowPriorityMatching"],[347,35,428,20],[347,37,428,45],[348,0,429,24],[348,18,429,28,"syntaxStash"],[348,29,429,39],[348,34,429,44],[348,38,429,24],[348,40,429,50],[349,0,430,28,"syntaxStash"],[349,16,430,28,"syntaxStash"],[349,27,430,39],[349,30,430,42,"stateSnapshotFromSyntax"],[349,53,430,65],[349,54,430,66,"state"],[349,59,430,65],[349,61,430,73,"elseStack"],[349,70,430,65],[349,71,430,28],[350,0,431,25],[352,0,433,24,"state"],[352,14,433,24,"state"],[352,19,433,29],[352,22,433,32,"MISMATCH"],[352,30,433,24],[353,0,434,24],[354,0,435,21],[355,0,436,17],[357,0,438,16,"openSyntax"],[357,10,438,16,"openSyntax"],[357,20,438,26],[358,0,439,16,"state"],[358,10,439,16,"state"],[358,15,439,21],[358,18,439,24,"dictSyntax"],[358,28,439,34],[358,29,439,35,"match"],[358,34,439,16],[359,0,440,16],[361,0,442,12],[361,13,442,17],[361,22,442,12],[362,0,443,16],[362,14,443,20,"name"],[362,18,443,24],[362,21,443,27,"state"],[362,26,443,32],[362,27,443,33,"name"],[362,31,443,16],[364,0,445,16],[364,14,445,20,"token"],[364,19,445,25],[364,24,445,30],[364,28,445,16],[364,30,445,36],[365,0,446,20],[365,16,446,24,"keywordName"],[365,27,446,35],[365,30,446,38,"token"],[365,35,446,43],[365,36,446,44,"value"],[365,41,446,20],[367,0,449,20],[367,16,449,24,"keywordName"],[367,27,449,35],[367,28,449,36,"indexOf"],[367,35,449,24],[367,36,449,44],[367,40,449,24],[367,46,449,54],[367,47,449,55],[367,48,449,20],[367,50,449,58],[368,0,450,24,"keywordName"],[368,14,450,24,"keywordName"],[368,25,450,35],[368,28,450,38,"keywordName"],[368,39,450,49],[368,40,450,50,"replace"],[368,47,450,38],[368,48,450,58],[368,59,450,38],[368,61,450,71],[368,63,450,38],[368,64,450,24],[369,0,451,21],[371,0,453,20],[371,16,453,24,"areStringsEqualCaseInsensitive"],[371,46,453,54],[371,47,453,55,"keywordName"],[371,58,453,54],[371,60,453,68,"name"],[371,64,453,54],[371,65,453,20],[371,67,453,75],[372,0,454,24,"addTokenToMatch"],[372,14,454,24,"addTokenToMatch"],[372,29,454,39],[373,0,455,24,"state"],[373,14,455,24,"state"],[373,19,455,29],[373,22,455,32,"MATCH"],[373,27,455,24],[374,0,456,24],[375,0,457,21],[376,0,458,17],[378,0,460,16,"state"],[378,10,460,16,"state"],[378,15,460,21],[378,18,460,24,"MISMATCH"],[378,26,460,16],[379,0,461,16],[381,0,463,12],[381,13,463,17],[381,24,463,12],[382,0,464,12],[382,13,464,17],[382,23,464,12],[383,0,465,16],[383,14,465,20,"token"],[383,19,465,25],[383,24,465,30],[383,28,465,20],[383,32,465,38,"areStringsEqualCaseInsensitive"],[383,62,465,68],[383,63,465,69,"token"],[383,68,465,74],[383,69,465,75,"value"],[383,74,465,68],[383,76,465,82,"state"],[383,81,465,87],[383,82,465,88,"name"],[383,86,465,68],[383,87,465,16],[383,89,465,95],[384,0,466,20,"addTokenToMatch"],[384,12,466,20,"addTokenToMatch"],[384,27,466,35],[385,0,467,20,"state"],[385,12,467,20,"state"],[385,17,467,25],[385,20,467,28,"MATCH"],[385,25,467,20],[386,0,468,20],[387,0,469,17],[389,0,471,16,"state"],[389,10,471,16,"state"],[389,15,471,21],[389,18,471,24,"MISMATCH"],[389,26,471,16],[390,0,472,16],[392,0,474,12],[392,13,474,17],[392,20,474,12],[393,0,475,16],[393,14,475,20,"token"],[393,19,475,25],[393,24,475,30],[393,28,475,20],[393,32,475,38,"token"],[393,37,475,43],[393,38,475,44,"value"],[393,43,475,38],[393,48,475,54,"state"],[393,53,475,59],[393,54,475,60,"value"],[393,59,475,16],[393,61,475,67],[394,0,476,20,"addTokenToMatch"],[394,12,476,20,"addTokenToMatch"],[394,27,476,35],[395,0,477,20,"state"],[395,12,477,20,"state"],[395,17,477,25],[395,20,477,28,"MATCH"],[395,25,477,20],[396,0,478,20],[397,0,479,17],[399,0,481,16,"state"],[399,10,481,16,"state"],[399,15,481,21],[399,18,481,24,"MISMATCH"],[399,26,481,16],[400,0,482,16],[402,0,484,12],[402,13,484,17],[402,20,484,12],[403,0,485,16],[403,14,485,20,"token"],[403,19,485,25],[403,24,485,30],[403,28,485,20],[403,32,485,38,"token"],[403,37,485,43],[403,38,485,44,"type"],[403,42,485,38],[403,47,485,53,"TYPE"],[403,51,485,57],[403,52,485,58,"Comma"],[403,57,485,16],[403,59,485,65],[404,0,486,20],[404,16,486,24,"isCommaContextStart"],[404,35,486,43],[404,36,486,44,"matchStack"],[404,46,486,54],[404,47,486,55,"token"],[404,52,486,43],[404,53,486,20],[404,55,486,63],[405,0,487,24,"state"],[405,14,487,24,"state"],[405,19,487,29],[405,22,487,32,"MISMATCH"],[405,30,487,24],[406,0,488,21],[406,13,486,20],[406,19,488,27],[407,0,489,24,"addTokenToMatch"],[407,14,489,24,"addTokenToMatch"],[407,29,489,39],[408,0,490,24,"state"],[408,14,490,24,"state"],[408,19,490,29],[408,22,490,32,"isCommaContextEnd"],[408,39,490,49],[408,40,490,50,"token"],[408,45,490,49],[408,46,490,32],[408,49,490,59,"MISMATCH"],[408,57,490,32],[408,60,490,70,"MATCH"],[408,65,490,24],[409,0,491,21],[410,0,492,17],[410,11,485,16],[410,17,492,23],[411,0,493,20,"state"],[411,12,493,20,"state"],[411,17,493,25],[411,20,493,28,"isCommaContextStart"],[411,39,493,47],[411,40,493,48,"matchStack"],[411,50,493,58],[411,51,493,59,"token"],[411,56,493,47],[411,57,493,28],[411,61,493,69,"isCommaContextEnd"],[411,78,493,86],[411,79,493,87,"token"],[411,84,493,86],[411,85,493,28],[411,88,493,96,"MATCH"],[411,93,493,28],[411,96,493,104,"MISMATCH"],[411,104,493,20],[412,0,494,17],[414,0,496,16],[416,0,498,12],[416,13,498,17],[416,21,498,12],[417,0,499,16],[417,14,499,20,"string"],[417,20,499,26],[417,23,499,29],[417,25,499,16],[419,0,501,16],[419,15,501,21],[419,19,501,25,"lastTokenIndex"],[419,33,501,39],[419,36,501,42,"tokenIndex"],[419,46,501,16],[419,48,501,54,"lastTokenIndex"],[419,62,501,68],[419,65,501,71,"tokens"],[419,71,501,77],[419,72,501,78,"length"],[419,78,501,54],[419,82,501,88,"string"],[419,88,501,94],[419,89,501,95,"length"],[419,95,501,88],[419,98,501,104,"state"],[419,103,501,109],[419,104,501,110,"value"],[419,109,501,104],[419,110,501,116,"length"],[419,116,501,16],[419,118,501,124,"lastTokenIndex"],[419,132,501,138],[419,134,501,16],[419,136,501,142],[420,0,502,20,"string"],[420,12,502,20,"string"],[420,18,502,26],[420,22,502,30,"tokens"],[420,28,502,36],[420,29,502,37,"lastTokenIndex"],[420,43,502,36],[420,44,502,30],[420,45,502,53,"value"],[420,50,502,20],[421,0,503,17],[423,0,505,16],[423,14,505,20,"areStringsEqualCaseInsensitive"],[423,44,505,50],[423,45,505,51,"string"],[423,51,505,50],[423,53,505,59,"state"],[423,58,505,64],[423,59,505,65,"value"],[423,64,505,50],[423,65,505,16],[423,67,505,73],[424,0,506,20],[424,19,506,27,"tokenIndex"],[424,29,506,37],[424,32,506,40,"lastTokenIndex"],[424,46,506,20],[424,48,506,56],[425,0,507,24,"addTokenToMatch"],[425,14,507,24,"addTokenToMatch"],[425,29,507,39],[426,0,508,21],[428,0,510,20,"state"],[428,12,510,20,"state"],[428,17,510,25],[428,20,510,28,"MATCH"],[428,25,510,20],[429,0,511,17],[429,11,505,16],[429,17,511,23],[430,0,512,20,"state"],[430,12,512,20,"state"],[430,17,512,25],[430,20,512,28,"MISMATCH"],[430,28,512,20],[431,0,513,17],[433,0,515,16],[435,0,517,12],[436,0,518,16],[436,16,518,22],[436,20,518,26,"Error"],[436,25,518,22],[436,26,518,32],[436,50,518,56,"state"],[436,55,518,61],[436,56,518,62,"type"],[436,60,518,22],[436,61,518,16],[437,0,221,8],[438,0,520,5],[440,0,522,4,"totalIterationCount"],[440,4,522,4,"totalIterationCount"],[440,23,522,23],[440,27,522,27,"iterationCount"],[440,41,522,4],[442,0,524,4],[442,12,524,12,"exitReason"],[442,22,524,4],[443,0,525,8],[443,11,525,13],[443,15,525,8],[444,0,526,12,"console"],[444,8,526,12,"console"],[444,15,526,19],[444,16,526,20,"warn"],[444,20,526,12],[444,21,526,25],[444,54,526,58,"ITERATION_LIMIT"],[444,69,526,25],[444,72,526,76],[444,85,526,12],[445,0,527,12,"exitReason"],[445,8,527,12,"exitReason"],[445,18,527,22],[445,21,527,25,"EXIT_REASON_ITERATION_LIMIT"],[445,48,527,12],[446,0,528,12,"matchStack"],[446,8,528,12,"matchStack"],[446,18,528,22],[446,21,528,25],[446,25,528,12],[447,0,529,12],[449,0,531,8],[449,11,531,13,"EXIT_REASON_MATCH"],[449,28,531,8],[450,0,532,12],[450,15,532,19,"syntaxStack"],[450,26,532,30],[450,31,532,35],[450,35,532,12],[450,37,532,41],[451,0,533,16,"closeSyntax"],[451,10,533,16,"closeSyntax"],[451,21,533,27],[452,0,534,13],[454,0,535,12],[456,0,537,8],[457,0,538,12,"matchStack"],[457,8,538,12,"matchStack"],[457,18,538,22],[457,21,538,25],[457,25,538,12],[458,0,524,4],[460,0,541,4],[460,11,541,11],[461,0,542,8,"tokens"],[461,6,542,8,"tokens"],[461,12,542,14],[461,14,542,16,"tokens"],[461,20,541,11],[462,0,543,8,"reason"],[462,6,543,8,"reason"],[462,12,543,14],[462,14,543,16,"exitReason"],[462,24,541,11],[463,0,544,8,"iterations"],[463,6,544,8,"iterations"],[463,16,544,18],[463,18,544,20,"iterationCount"],[463,32,541,11],[464,0,545,8,"match"],[464,6,545,8,"match"],[464,11,545,13],[464,13,545,15,"matchStack"],[464,23,541,11],[465,0,546,8,"longestMatch"],[465,6,546,8,"longestMatch"],[465,18,546,20],[465,20,546,22,"longestMatch"],[466,0,541,11],[466,5,541,4],[467,0,548,1],[469,0,550,0],[469,11,550,9,"matchAsList"],[469,22,550,0],[469,23,550,21,"tokens"],[469,29,550,0],[469,31,550,29,"matchGraph"],[469,41,550,0],[469,43,550,41,"syntaxes"],[469,51,550,0],[469,53,550,51],[470,0,551,4],[470,8,551,8,"matchResult"],[470,19,551,19],[470,22,551,22,"internalMatch"],[470,35,551,35],[470,36,551,36,"tokens"],[470,42,551,35],[470,44,551,44,"matchGraph"],[470,54,551,35],[470,56,551,56,"syntaxes"],[470,64,551,64],[470,68,551,68],[470,70,551,35],[470,71,551,4],[472,0,553,4],[472,8,553,8,"matchResult"],[472,19,553,19],[472,20,553,20,"match"],[472,25,553,8],[472,30,553,30],[472,34,553,4],[472,36,553,36],[473,0,554,8],[473,10,554,12,"item"],[473,14,554,16],[473,17,554,19,"reverseList"],[473,28,554,30],[473,29,554,31,"matchResult"],[473,40,554,42],[473,41,554,43,"match"],[473,46,554,30],[473,47,554,19],[473,48,554,50,"prev"],[473,52,554,8],[474,0,556,8,"matchResult"],[474,6,556,8,"matchResult"],[474,17,556,19],[474,18,556,20,"match"],[474,23,556,8],[474,26,556,28],[474,28,556,8],[476,0,558,8],[476,13,558,15,"item"],[476,17,558,19],[476,22,558,24],[476,26,558,8],[476,28,558,30],[477,0,559,12],[477,16,559,20,"item"],[477,20,559,24],[477,21,559,25,"type"],[477,25,559,12],[478,0,560,16],[478,15,560,21,"STUB"],[478,19,560,16],[479,0,561,20],[481,0,563,16],[481,15,563,21,"OPEN_SYNTAX"],[481,26,563,16],[482,0,564,16],[482,15,564,21,"CLOSE_SYNTAX"],[482,27,564,16],[483,0,565,20,"matchResult"],[483,12,565,20,"matchResult"],[483,23,565,31],[483,24,565,32,"match"],[483,29,565,20],[483,30,565,38,"push"],[483,34,565,20],[483,35,565,43],[484,0,566,24,"type"],[484,14,566,24,"type"],[484,18,566,28],[484,20,566,30,"item"],[484,24,566,34],[484,25,566,35,"type"],[484,29,565,43],[485,0,567,24,"syntax"],[485,14,567,24,"syntax"],[485,20,567,30],[485,22,567,32,"item"],[485,26,567,36],[485,27,567,37,"syntax"],[486,0,565,43],[486,13,565,20],[487,0,569,20],[489,0,571,16],[490,0,572,20,"matchResult"],[490,12,572,20,"matchResult"],[490,23,572,31],[490,24,572,32,"match"],[490,29,572,20],[490,30,572,38,"push"],[490,34,572,20],[490,35,572,43],[491,0,573,24,"token"],[491,14,573,24,"token"],[491,19,573,29],[491,21,573,31,"item"],[491,25,573,35],[491,26,573,36,"token"],[491,31,573,31],[491,32,573,42,"value"],[491,37,572,43],[492,0,574,24,"node"],[492,14,574,24,"node"],[492,18,574,28],[492,20,574,30,"item"],[492,24,574,34],[492,25,574,35,"token"],[492,30,574,30],[492,31,574,41,"node"],[493,0,572,43],[493,13,572,20],[494,0,576,20],[495,0,559,12],[497,0,579,12,"item"],[497,8,579,12,"item"],[497,12,579,16],[497,15,579,19,"item"],[497,19,579,23],[497,20,579,24,"prev"],[497,24,579,12],[498,0,580,9],[499,0,581,5],[501,0,583,4],[501,11,583,11,"matchResult"],[501,22,583,4],[502,0,584,1],[504,0,586,0],[504,11,586,9,"matchAsTree"],[504,22,586,0],[504,23,586,21,"tokens"],[504,29,586,0],[504,31,586,29,"matchGraph"],[504,41,586,0],[504,43,586,41,"syntaxes"],[504,51,586,0],[504,53,586,51],[505,0,587,4],[505,8,587,8,"matchResult"],[505,19,587,19],[505,22,587,22,"internalMatch"],[505,35,587,35],[505,36,587,36,"tokens"],[505,42,587,35],[505,44,587,44,"matchGraph"],[505,54,587,35],[505,56,587,56,"syntaxes"],[505,64,587,64],[505,68,587,68],[505,70,587,35],[505,71,587,4],[507,0,589,4],[507,8,589,8,"matchResult"],[507,19,589,19],[507,20,589,20,"match"],[507,25,589,8],[507,30,589,30],[507,34,589,4],[507,36,589,36],[508,0,590,8],[508,13,590,15,"matchResult"],[508,24,590,8],[509,0,591,5],[511,0,593,4],[511,8,593,8,"item"],[511,12,593,12],[511,15,593,15,"matchResult"],[511,26,593,26],[511,27,593,27,"match"],[511,32,593,4],[512,0,594,4],[512,8,594,8,"host"],[512,12,594,12],[512,15,594,15,"matchResult"],[512,26,594,26],[512,27,594,27,"match"],[512,32,594,15],[512,35,594,35],[513,0,595,8,"syntax"],[513,6,595,8,"syntax"],[513,12,595,14],[513,14,595,16,"matchGraph"],[513,24,595,26],[513,25,595,27,"syntax"],[513,31,595,16],[513,35,595,37],[513,39,594,35],[514,0,596,8,"match"],[514,6,596,8,"match"],[514,11,596,13],[514,13,596,15],[515,0,594,35],[515,5,594,4],[516,0,598,4],[516,8,598,8,"hostStack"],[516,17,598,17],[516,20,598,20],[516,21,598,21,"host"],[516,25,598,20],[516,26,598,4],[517,0,601,4,"item"],[517,4,601,4,"item"],[517,8,601,8],[517,11,601,11,"reverseList"],[517,22,601,22],[517,23,601,23,"item"],[517,27,601,22],[517,28,601,11],[517,29,601,29,"prev"],[517,33,601,4],[519,0,604,4],[519,11,604,11,"item"],[519,15,604,15],[519,20,604,20],[519,24,604,4],[519,26,604,26],[520,0,605,8],[520,14,605,16,"item"],[520,18,605,20],[520,19,605,21,"type"],[520,23,605,8],[521,0,606,12],[521,13,606,17,"OPEN_SYNTAX"],[521,24,606,12],[522,0,607,16,"host"],[522,10,607,16,"host"],[522,14,607,20],[522,15,607,21,"match"],[522,20,607,16],[522,21,607,27,"push"],[522,25,607,16],[522,26,607,32,"host"],[522,30,607,36],[522,33,607,39],[523,0,608,20,"syntax"],[523,12,608,20,"syntax"],[523,18,608,26],[523,20,608,28,"item"],[523,24,608,32],[523,25,608,33,"syntax"],[523,31,607,39],[524,0,609,20,"match"],[524,12,609,20,"match"],[524,17,609,25],[524,19,609,27],[525,0,607,39],[525,11,607,16],[526,0,611,16,"hostStack"],[526,10,611,16,"hostStack"],[526,19,611,25],[526,20,611,26,"push"],[526,24,611,16],[526,25,611,31,"host"],[526,29,611,16],[527,0,612,16],[529,0,614,12],[529,13,614,17,"CLOSE_SYNTAX"],[529,25,614,12],[530,0,615,16,"hostStack"],[530,10,615,16,"hostStack"],[530,19,615,25],[530,20,615,26,"pop"],[530,23,615,16],[531,0,616,16,"host"],[531,10,616,16,"host"],[531,14,616,20],[531,17,616,23,"hostStack"],[531,26,616,32],[531,27,616,33,"hostStack"],[531,36,616,42],[531,37,616,43,"length"],[531,43,616,33],[531,46,616,52],[531,47,616,32],[531,48,616,16],[532,0,617,16],[534,0,619,12],[535,0,620,16,"host"],[535,10,620,16,"host"],[535,14,620,20],[535,15,620,21,"match"],[535,20,620,16],[535,21,620,27,"push"],[535,25,620,16],[535,26,620,32],[536,0,621,20,"syntax"],[536,12,621,20,"syntax"],[536,18,621,26],[536,20,621,28,"item"],[536,24,621,32],[536,25,621,33,"syntax"],[536,31,621,28],[536,35,621,43],[536,39,620,32],[537,0,622,20,"token"],[537,12,622,20,"token"],[537,17,622,25],[537,19,622,27,"item"],[537,23,622,31],[537,24,622,32,"token"],[537,29,622,27],[537,30,622,38,"value"],[537,35,620,32],[538,0,623,20,"node"],[538,12,623,20,"node"],[538,16,623,24],[538,18,623,26,"item"],[538,22,623,30],[538,23,623,31,"token"],[538,28,623,26],[538,29,623,37,"node"],[539,0,620,32],[539,11,620,16],[540,0,605,8],[542,0,627,8,"item"],[542,6,627,8,"item"],[542,10,627,12],[542,13,627,15,"item"],[542,17,627,19],[542,18,627,20,"prev"],[542,22,627,8],[543,0,628,5],[545,0,630,4],[545,11,630,11,"matchResult"],[545,22,630,4],[546,0,631,1],[548,0,633,0,"module"],[548,2,633,0,"module"],[548,8,633,6],[548,9,633,7,"exports"],[548,16,633,0],[548,19,633,17],[549,0,634,4,"matchAsList"],[549,4,634,4,"matchAsList"],[549,15,634,15],[549,17,634,17,"matchAsList"],[549,28,633,17],[550,0,635,4,"matchAsTree"],[550,4,635,4,"matchAsTree"],[550,15,635,15],[550,17,635,17,"matchAsTree"],[550,28,633,17],[551,0,636,4,"getTotalIterationCount"],[551,4,636,4,"getTotalIterationCount"],[551,26,636,26],[551,28,636,28],[551,62,636,39],[552,0,637,8],[552,13,637,15,"totalIterationCount"],[552,32,637,8],[553,0,638,5],[554,0,633,17],[554,3,633,0]],"functionMap":{"names":["<global>","reverseList","areStringsEqualCaseInsensitive","isContextEdgeDelim","isCommaContextStart","isCommaContextEnd","internalMatch","moveToNextToken","getNextToken","stateSnapshotFromSyntax","pushThenStack","pushElseStack","addTokenToMatch","openSyntax","closeSyntax","matchAsList","matchAsTree","module.exports.getTotalIterationCount"],"mappings":"AAA;ACmB;CDa;AEE;CFoB;AGE;CHQ;AIE;CJa;AKE;CLW;AME;ICC;KDK;IEE;KFI;IGE;KHS;IIE;KJO;IKE;KLE;IME;KNc;IOE;KPa;IQE;KRa;CNmX;AeE;CfkC;AgBE;ChB6C;4BiBK;KjBE"}},"type":"js/module"}]}