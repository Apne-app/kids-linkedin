{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"isAsync":false}},{"name":"escape-string-regexp","data":{"isAsync":false}},{"name":"query-string","data":{"isAsync":false}},{"name":"./checkLegacyPathConfig","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = getStateFromPath;\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/defineProperty\"));\n\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/toConsumableArray\"));\n\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/slicedToArray\"));\n\n  var _escapeStringRegexp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"escape-string-regexp\"));\n\n  var _queryString = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"query-string\"));\n\n  var _checkLegacyPathConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"./checkLegacyPathConfig\"));\n\n  function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  function getStateFromPath(path, options) {\n    var _ref;\n\n    var _checkLegacyPathConfi = (0, _checkLegacyPathConfig.default)(options),\n        _checkLegacyPathConfi2 = (0, _slicedToArray2.default)(_checkLegacyPathConfi, 2),\n        legacy = _checkLegacyPathConfi2[0],\n        compatOptions = _checkLegacyPathConfi2[1];\n\n    var initialRoutes = [];\n\n    if (compatOptions == null ? void 0 : compatOptions.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: compatOptions.initialRouteName,\n        connectedRoutes: Object.keys(compatOptions.screens)\n      });\n    }\n\n    var screens = compatOptions == null ? void 0 : compatOptions.screens;\n    var remaining = path.replace(/\\/+/g, '/').replace(/^\\//, '').replace(/\\?.*$/, '');\n    remaining = remaining.endsWith('/') ? remaining : remaining + \"/\";\n\n    if (screens === undefined) {\n      var routes = remaining.split('/').filter(Boolean).map(function (segment, i, self) {\n        var name = decodeURIComponent(segment);\n\n        if (i === self.length - 1) {\n          return {\n            name: name,\n            params: parseQueryParams(path)\n          };\n        }\n\n        return {\n          name: name\n        };\n      });\n\n      if (routes.length) {\n        return createNestedStateObject(routes, initialRoutes);\n      }\n\n      return undefined;\n    }\n\n    var configs = (_ref = []).concat.apply(_ref, (0, _toConsumableArray2.default)(Object.keys(screens).map(function (key) {\n      return createNormalizedConfigs(legacy, key, screens, [], initialRoutes);\n    }))).sort(function (a, b) {\n      if (a.pattern.startsWith(b.pattern)) {\n        return 1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      var aParts = a.pattern.split('/');\n      var bParts = b.pattern.split('/');\n      var aWildcardIndex = aParts.indexOf('*');\n      var bWildcardIndex = bParts.indexOf('*');\n\n      if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n        return -1;\n      }\n\n      if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n        return 1;\n      }\n\n      if (aWildcardIndex === bWildcardIndex) {\n        return bParts.length - aParts.length;\n      }\n\n      return bWildcardIndex - aWildcardIndex;\n    });\n\n    if (remaining === '/') {\n      var match = configs.find(function (config) {\n        return config.path === '' && config.routeNames.every(function (name) {\n          var _configs$find;\n\n          return !((_configs$find = configs.find(function (c) {\n            return c.screen === name;\n          })) == null ? void 0 : _configs$find.path);\n        });\n      });\n\n      if (match) {\n        return createNestedStateObject(match.routeNames.map(function (name, i, self) {\n          if (i === self.length - 1) {\n            return {\n              name: name,\n              params: parseQueryParams(path, match.parse)\n            };\n          }\n\n          return {\n            name: name\n          };\n        }), initialRoutes);\n      }\n\n      return undefined;\n    }\n\n    var result;\n    var current;\n\n    if (legacy === false) {\n      var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs.map(function (c) {\n        return _objectSpread(_objectSpread({}, c), {}, {\n          regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n        });\n      })),\n          routeNames = _matchAgainstConfigs.routeNames,\n          allParams = _matchAgainstConfigs.allParams,\n          remainingPath = _matchAgainstConfigs.remainingPath;\n\n      if (routeNames !== undefined) {\n        remaining = remainingPath;\n        current = createNestedStateObject(createRouteObjects(configs, routeNames, allParams), initialRoutes);\n        result = current;\n      }\n    } else {\n      while (remaining) {\n        var _matchAgainstConfigs2 = matchAgainstConfigs(remaining, configs),\n            _routeNames = _matchAgainstConfigs2.routeNames,\n            _allParams = _matchAgainstConfigs2.allParams,\n            _remainingPath = _matchAgainstConfigs2.remainingPath;\n\n        remaining = _remainingPath;\n\n        if (_routeNames === undefined) {\n          var segments = remaining.split('/');\n          _routeNames = [decodeURIComponent(segments[0])];\n          segments.shift();\n          remaining = segments.join('/');\n        }\n\n        var state = createNestedStateObject(createRouteObjects(configs, _routeNames, _allParams), initialRoutes);\n\n        if (current) {\n          var _current2;\n\n          while ((_current = current) == null ? void 0 : _current.routes[current.index || 0].state) {\n            var _current;\n\n            current = current.routes[current.index || 0].state;\n          }\n\n          current.routes[((_current2 = current) == null ? void 0 : _current2.index) || 0].state = state;\n        } else {\n          result = state;\n        }\n\n        current = state;\n      }\n    }\n\n    if (current == null || result == null) {\n      return undefined;\n    }\n\n    var route = findFocusedRoute(current);\n    var params = parseQueryParams(path, findParseConfigForRoute(route.name, configs));\n\n    if (params) {\n      route.params = _objectSpread(_objectSpread({}, route.params), params);\n    }\n\n    return result;\n  }\n\n  var joinPaths = function joinPaths() {\n    var _ref2;\n\n    for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n      paths[_key] = arguments[_key];\n    }\n\n    return (_ref2 = []).concat.apply(_ref2, (0, _toConsumableArray2.default)(paths.map(function (p) {\n      return p.split('/');\n    }))).filter(Boolean).join('/');\n  };\n\n  var matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n    var routeNames;\n    var allParams;\n    var remainingPath = remaining;\n\n    var _loop = function _loop(config) {\n      if (!config.regex) {\n        return \"continue\";\n      }\n\n      var match = remainingPath.match(config.regex);\n\n      if (match) {\n        routeNames = (0, _toConsumableArray2.default)(config.routeNames);\n        var paramPatterns = config.pattern.split('/').filter(function (p) {\n          return p.startsWith(':');\n        });\n\n        if (paramPatterns.length) {\n          allParams = paramPatterns.reduce(function (acc, p, i) {\n            var value = match[(i + 1) * 2].replace(/\\//, '');\n            acc[p] = value;\n            return acc;\n          }, {});\n        }\n\n        remainingPath = remainingPath.replace(match[1], '');\n        return \"break\";\n      }\n    };\n\n    for (var _iterator = _createForOfIteratorHelperLoose(configs), _step; !(_step = _iterator()).done;) {\n      var config = _step.value;\n\n      var _ret = _loop(config);\n\n      if (_ret === \"continue\") continue;\n      if (_ret === \"break\") break;\n    }\n\n    return {\n      routeNames: routeNames,\n      allParams: allParams,\n      remainingPath: remainingPath\n    };\n  };\n\n  var createNormalizedConfigs = function createNormalizedConfigs(legacy, screen, routeConfig) {\n    var routeNames = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    var initials = arguments.length > 4 ? arguments[4] : undefined;\n    var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n    var configs = [];\n    routeNames.push(screen);\n    var config = routeConfig[screen];\n\n    if (typeof config === 'string') {\n      var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n    } else if (typeof config === 'object') {\n      var _pattern;\n\n      if (typeof config.path === 'string') {\n        if (legacy) {\n          _pattern = config.exact !== true && parentPattern ? joinPaths(parentPattern, config.path) : config.path;\n        } else {\n          if (config.exact && config.path === undefined) {\n            throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n          }\n\n          _pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n        }\n\n        configs.push(createConfigItem(legacy, screen, routeNames, _pattern, config.path, config.parse));\n      }\n\n      if (config.screens) {\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            connectedRoutes: Object.keys(config.screens)\n          });\n        }\n\n        Object.keys(config.screens).forEach(function (nestedConfig) {\n          var _pattern2;\n\n          var result = createNormalizedConfigs(legacy, nestedConfig, config.screens, routeNames, initials, (_pattern2 = _pattern) != null ? _pattern2 : parentPattern);\n          configs.push.apply(configs, (0, _toConsumableArray2.default)(result));\n        });\n      }\n    }\n\n    routeNames.pop();\n    return configs;\n  };\n\n  var createConfigItem = function createConfigItem(legacy, screen, routeNames, pattern, path, parse) {\n    pattern = pattern.split('/').filter(Boolean).join('/');\n    var regex = pattern ? new RegExp(\"^(\" + pattern.split('/').map(function (it) {\n      if (legacy && it === '*') {\n        throw new Error(\"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config\");\n      }\n\n      if (it.startsWith(':')) {\n        return \"(([^/]+\\\\/)\" + (it.endsWith('?') ? '?' : '') + \")\";\n      }\n\n      return (it === '*' ? '.*' : (0, _escapeStringRegexp.default)(it)) + \"\\\\/\";\n    }).join('') + \")\") : undefined;\n    return {\n      screen: screen,\n      regex: regex,\n      pattern: pattern,\n      path: path,\n      routeNames: (0, _toConsumableArray2.default)(routeNames),\n      parse: parse\n    };\n  };\n\n  var findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n    for (var _iterator2 = _createForOfIteratorHelperLoose(flatConfig), _step2; !(_step2 = _iterator2()).done;) {\n      var config = _step2.value;\n\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n\n    return undefined;\n  };\n\n  var findInitialRoute = function findInitialRoute(routeName, initialRoutes) {\n    for (var _iterator3 = _createForOfIteratorHelperLoose(initialRoutes), _step3; !(_step3 = _iterator3()).done;) {\n      var config = _step3.value;\n\n      if (config.connectedRoutes.includes(routeName)) {\n        return config.initialRouteName === routeName ? undefined : config.initialRouteName;\n      }\n    }\n\n    return undefined;\n  };\n\n  var createStateObject = function createStateObject(initialRoute, routeName, params, isEmpty) {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, {\n            name: routeName,\n            params: params\n          }]\n        };\n      } else {\n        return {\n          routes: [{\n            name: routeName,\n            params: params\n          }]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, {\n            name: routeName,\n            params: params,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      } else {\n        return {\n          routes: [{\n            name: routeName,\n            params: params,\n            state: {\n              routes: []\n            }\n          }]\n        };\n      }\n    }\n  };\n\n  var createNestedStateObject = function createNestedStateObject(routes, initialRoutes) {\n    var state;\n    var route = routes.shift();\n    var initialRoute = findInitialRoute(route.name, initialRoutes);\n    state = createStateObject(initialRoute, route.name, route.params, routes.length === 0);\n\n    if (routes.length > 0) {\n      var nestedState = state;\n\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, initialRoutes);\n        var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route.name, route.params, routes.length === 0);\n\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n      }\n    }\n\n    return state;\n  };\n\n  var createRouteObjects = function createRouteObjects(configs, routeNames, allParams) {\n    return routeNames.map(function (name) {\n      var config = configs.find(function (c) {\n        return c.screen === name;\n      });\n      var params;\n\n      if (allParams && (config == null ? void 0 : config.path)) {\n        var pattern = config.path;\n\n        if (pattern) {\n          var paramPatterns = pattern.split('/').filter(function (p) {\n            return p.startsWith(':');\n          });\n\n          if (paramPatterns.length) {\n            params = paramPatterns.reduce(function (acc, p) {\n              var key = p.replace(/^:/, '').replace(/\\?$/, '');\n              var value = allParams[p];\n\n              if (value) {\n                acc[key] = config.parse && config.parse[key] ? config.parse[key](value) : value;\n              }\n\n              return acc;\n            }, {});\n          }\n        }\n      }\n\n      if (params && Object.keys(params).length) {\n        return {\n          name: name,\n          params: params\n        };\n      }\n\n      return {\n        name: name\n      };\n    });\n  };\n\n  var findFocusedRoute = function findFocusedRoute(state) {\n    var _current4;\n\n    var current = state;\n\n    while ((_current3 = current) == null ? void 0 : _current3.routes[current.index || 0].state) {\n      var _current3;\n\n      current = current.routes[current.index || 0].state;\n    }\n\n    var route = current.routes[((_current4 = current) == null ? void 0 : _current4.index) || 0];\n    return route;\n  };\n\n  var parseQueryParams = function parseQueryParams(path, parseConfig) {\n    var query = path.split('?')[1];\n\n    var params = _queryString.default.parse(query);\n\n    if (parseConfig) {\n      Object.keys(params).forEach(function (name) {\n        if (parseConfig[name] && typeof params[name] === 'string') {\n          params[name] = parseConfig[name](params[name]);\n        }\n      });\n    }\n\n    return Object.keys(params).length ? params : undefined;\n  };\n});","lineCount":502,"map":[[15,0,1,0],[17,0,2,0],[19,0,8,0],[31,0,57,15],[31,11,57,24,"getStateFromPath"],[31,27,57,15],[31,28,58,2,"path"],[31,32,57,15],[31,34,59,2,"options"],[31,41,57,15],[31,43,60,27],[32,0,60,27],[34,0,60,27],[34,32,61,34],[34,68,61,56,"options"],[34,75,61,34],[34,76,60,27],[35,0,60,27],[36,0,60,27],[36,8,61,9,"legacy"],[36,14,60,27],[37,0,60,27],[37,8,61,17,"compatOptions"],[37,21,60,27],[39,0,63,2],[39,8,63,6,"initialRoutes"],[39,21,63,41],[39,24,63,44],[39,26,63,2],[41,0,65,2],[41,8,65,6,"compatOptions"],[41,21,65,2],[41,41,65,6,"compatOptions"],[41,54,65,19],[41,55,65,21,"initialRouteName"],[41,71,65,2],[41,73,65,39],[42,0,66,4,"initialRoutes"],[42,6,66,4,"initialRoutes"],[42,19,66,17],[42,20,66,18,"push"],[42,24,66,4],[42,25,66,23],[43,0,67,6,"initialRouteName"],[43,8,67,6,"initialRouteName"],[43,24,67,22],[43,26,67,24,"compatOptions"],[43,39,67,37],[43,40,67,38,"initialRouteName"],[43,56,66,23],[44,0,68,6,"connectedRoutes"],[44,8,68,6,"connectedRoutes"],[44,23,68,21],[44,25,68,23,"Object"],[44,31,68,29],[44,32,68,30,"keys"],[44,36,68,23],[44,37,68,35,"compatOptions"],[44,50,68,48],[44,51,68,49,"screens"],[44,58,68,23],[45,0,66,23],[45,7,66,4],[46,0,70,3],[48,0,72,2],[48,8,72,8,"screens"],[48,15,72,15],[48,18,72,18,"compatOptions"],[48,31,72,15],[48,51,72,18,"compatOptions"],[48,64,72,31],[48,65,72,33,"screens"],[48,72,72,2],[49,0,74,2],[49,8,74,6,"remaining"],[49,17,74,15],[49,20,74,18,"path"],[49,24,74,22],[49,25,75,5,"replace"],[49,32,74,18],[49,33,75,13],[49,39,74,18],[49,41,75,21],[49,44,74,18],[49,46,76,5,"replace"],[49,53,74,18],[49,54,76,13],[49,59,74,18],[49,61,76,20],[49,63,74,18],[49,65,77,5,"replace"],[49,72,74,18],[49,73,77,13],[49,80,74,18],[49,82,77,22],[49,84,74,18],[49,85,74,2],[50,0,80,2,"remaining"],[50,4,80,2,"remaining"],[50,13,80,11],[50,16,80,14,"remaining"],[50,25,80,23],[50,26,80,24,"endsWith"],[50,34,80,14],[50,35,80,33],[50,38,80,14],[50,42,80,40,"remaining"],[50,51,80,14],[50,54,80,55,"remaining"],[50,63,80,14],[50,69,80,2],[52,0,82,2],[52,8,82,6,"screens"],[52,15,82,13],[52,20,82,18,"undefined"],[52,29,82,2],[52,31,82,29],[53,0,84,4],[53,10,84,10,"routes"],[53,16,84,16],[53,19,84,19,"remaining"],[53,28,84,28],[53,29,85,7,"split"],[53,34,84,19],[53,35,85,13],[53,38,84,19],[53,40,86,7,"filter"],[53,46,84,19],[53,47,86,14,"Boolean"],[53,54,84,19],[53,56,87,7,"map"],[53,59,84,19],[53,60,87,11],[53,70,87,12,"segment"],[53,77,87,11],[53,79,87,21,"i"],[53,80,87,11],[53,82,87,24,"self"],[53,86,87,11],[53,88,87,33],[54,0,88,8],[54,12,88,14,"name"],[54,16,88,18],[54,19,88,21,"decodeURIComponent"],[54,37,88,39],[54,38,88,40,"segment"],[54,45,88,39],[54,46,88,8],[56,0,90,8],[56,12,90,12,"i"],[56,13,90,13],[56,18,90,18,"self"],[56,22,90,22],[56,23,90,23,"length"],[56,29,90,18],[56,32,90,32],[56,33,90,8],[56,35,90,35],[57,0,91,10],[57,17,91,17],[58,0,91,19,"name"],[58,12,91,19,"name"],[58,16,91,23],[58,18,91,19,"name"],[58,22,91,17],[59,0,91,25,"params"],[59,12,91,25,"params"],[59,18,91,31],[59,20,91,33,"parseQueryParams"],[59,36,91,49],[59,37,91,50,"path"],[59,41,91,49],[60,0,91,17],[60,11,91,10],[61,0,92,9],[63,0,94,8],[63,15,94,15],[64,0,94,17,"name"],[64,10,94,17,"name"],[64,14,94,21],[64,16,94,17,"name"],[65,0,94,15],[65,9,94,8],[66,0,95,7],[66,7,84,19],[66,8,84,4],[68,0,97,4],[68,10,97,8,"routes"],[68,16,97,14],[68,17,97,15,"length"],[68,23,97,4],[68,25,97,23],[69,0,98,6],[69,15,98,13,"createNestedStateObject"],[69,38,98,36],[69,39,98,37,"routes"],[69,45,98,36],[69,47,98,45,"initialRoutes"],[69,60,98,36],[69,61,98,6],[70,0,99,5],[72,0,101,4],[72,13,101,11,"undefined"],[72,22,101,4],[73,0,102,3],[75,0,105,2],[75,8,105,8,"configs"],[75,15,105,15],[75,18,105,18],[75,26,105,19],[75,28,105,18],[75,30,106,5,"concat"],[75,36,105,18],[75,82,107,9,"Object"],[75,88,107,15],[75,89,107,16,"keys"],[75,93,107,9],[75,94,107,21,"screens"],[75,101,107,9],[75,103,107,30,"map"],[75,106,107,9],[75,107,107,34],[75,117,107,35,"key"],[75,120,107,34],[76,0,107,34],[76,13,108,8,"createNormalizedConfigs"],[76,36,108,31],[76,37,109,10,"legacy"],[76,43,108,31],[76,45,110,10,"key"],[76,48,108,31],[76,50,111,10,"screens"],[76,57,108,31],[76,59,112,10],[76,61,108,31],[76,63,113,10,"initialRoutes"],[76,76,108,31],[76,77,107,34],[77,0,107,34],[77,5,107,9],[77,6,105,18],[77,9,117,5,"sort"],[77,13,105,18],[77,14,117,10],[77,24,117,11,"a"],[77,25,117,10],[77,27,117,14,"b"],[77,28,117,10],[77,30,117,20],[78,0,124,6],[78,10,124,10,"a"],[78,11,124,11],[78,12,124,12,"pattern"],[78,19,124,10],[78,20,124,20,"startsWith"],[78,30,124,10],[78,31,124,31,"b"],[78,32,124,32],[78,33,124,33,"pattern"],[78,40,124,10],[78,41,124,6],[78,43,124,43],[79,0,125,8],[79,15,125,15],[79,16,125,8],[80,0,126,7],[82,0,128,6],[82,10,128,10,"b"],[82,11,128,11],[82,12,128,12,"pattern"],[82,19,128,10],[82,20,128,20,"startsWith"],[82,30,128,10],[82,31,128,31,"a"],[82,32,128,32],[82,33,128,33,"pattern"],[82,40,128,10],[82,41,128,6],[82,43,128,43],[83,0,129,8],[83,15,129,15],[83,16,129,8],[84,0,130,7],[86,0,132,6],[86,10,132,12,"aParts"],[86,16,132,18],[86,19,132,21,"a"],[86,20,132,22],[86,21,132,23,"pattern"],[86,28,132,21],[86,29,132,31,"split"],[86,34,132,21],[86,35,132,37],[86,38,132,21],[86,39,132,6],[87,0,133,6],[87,10,133,12,"bParts"],[87,16,133,18],[87,19,133,21,"b"],[87,20,133,22],[87,21,133,23,"pattern"],[87,28,133,21],[87,29,133,31,"split"],[87,34,133,21],[87,35,133,37],[87,38,133,21],[87,39,133,6],[88,0,135,6],[88,10,135,12,"aWildcardIndex"],[88,24,135,26],[88,27,135,29,"aParts"],[88,33,135,35],[88,34,135,36,"indexOf"],[88,41,135,29],[88,42,135,44],[88,45,135,29],[88,46,135,6],[89,0,136,6],[89,10,136,12,"bWildcardIndex"],[89,24,136,26],[89,27,136,29,"bParts"],[89,33,136,35],[89,34,136,36,"indexOf"],[89,41,136,29],[89,42,136,44],[89,45,136,29],[89,46,136,6],[91,0,139,6],[91,10,139,10,"aWildcardIndex"],[91,24,139,24],[91,29,139,29],[91,30,139,30],[91,31,139,10],[91,35,139,35,"bWildcardIndex"],[91,49,139,49],[91,54,139,54],[91,55,139,55],[91,56,139,6],[91,58,139,58],[92,0,140,8],[92,15,140,15],[92,16,140,16],[92,17,140,8],[93,0,141,7],[95,0,143,6],[95,10,143,10,"aWildcardIndex"],[95,24,143,24],[95,29,143,29],[95,30,143,30],[95,31,143,10],[95,35,143,35,"bWildcardIndex"],[95,49,143,49],[95,54,143,54],[95,55,143,55],[95,56,143,6],[95,58,143,58],[96,0,144,8],[96,15,144,15],[96,16,144,8],[97,0,145,7],[99,0,147,6],[99,10,147,10,"aWildcardIndex"],[99,24,147,24],[99,29,147,29,"bWildcardIndex"],[99,43,147,6],[99,45,147,45],[100,0,150,8],[100,15,150,15,"bParts"],[100,21,150,21],[100,22,150,22,"length"],[100,28,150,15],[100,31,150,31,"aParts"],[100,37,150,37],[100,38,150,38,"length"],[100,44,150,8],[101,0,151,7],[103,0,155,6],[103,13,155,13,"bWildcardIndex"],[103,27,155,27],[103,30,155,30,"aWildcardIndex"],[103,44,155,6],[104,0,156,5],[104,5,105,18],[104,6,105,2],[106,0,158,2],[106,8,158,6,"remaining"],[106,17,158,15],[106,22,158,20],[106,25,158,2],[106,27,158,25],[107,0,161,4],[107,10,161,10,"match"],[107,15,161,15],[107,18,161,18,"configs"],[107,25,161,25],[107,26,161,26,"find"],[107,30,161,18],[107,31,162,6],[107,41,162,7,"config"],[107,47,162,6],[108,0,162,6],[108,15,163,8,"config"],[108,21,163,14],[108,22,163,15,"path"],[108,26,163,8],[108,31,163,24],[108,33,163,8],[108,37,164,8,"config"],[108,43,164,14],[108,44,164,15,"routeNames"],[108,54,164,8],[108,55,164,26,"every"],[108,60,164,8],[108,61,166,10],[108,71,166,11,"name"],[108,75,166,10],[109,0,166,10],[111,0,166,10],[111,17,166,20],[111,36,166,21,"configs"],[111,43,166,28],[111,44,166,29,"find"],[111,48,166,21],[111,49,166,34],[111,59,166,35,"c"],[111,60,166,34],[112,0,166,34],[112,19,166,41,"c"],[112,20,166,42],[112,21,166,43,"screen"],[112,27,166,41],[112,32,166,54,"name"],[112,36,166,34],[113,0,166,34],[113,11,166,21],[113,12,166,20],[113,33,166,21],[113,47,166,61,"path"],[113,51,166,20],[113,52,166,10],[114,0,166,10],[114,9,164,8],[114,10,162,6],[115,0,162,6],[115,7,161,18],[115,8,161,4],[117,0,170,4],[117,10,170,8,"match"],[117,15,170,4],[117,17,170,15],[118,0,171,6],[118,15,171,13,"createNestedStateObject"],[118,38,171,36],[118,39,172,8,"match"],[118,44,172,13],[118,45,172,14,"routeNames"],[118,55,172,8],[118,56,172,25,"map"],[118,59,172,8],[118,60,172,29],[118,70,172,30,"name"],[118,74,172,29],[118,76,172,36,"i"],[118,77,172,29],[118,79,172,39,"self"],[118,83,172,29],[118,85,172,48],[119,0,173,10],[119,14,173,14,"i"],[119,15,173,15],[119,20,173,20,"self"],[119,24,173,24],[119,25,173,25,"length"],[119,31,173,20],[119,34,173,34],[119,35,173,10],[119,37,173,37],[120,0,174,12],[120,19,174,19],[121,0,174,21,"name"],[121,14,174,21,"name"],[121,18,174,25],[121,20,174,21,"name"],[121,24,174,19],[122,0,174,27,"params"],[122,14,174,27,"params"],[122,20,174,33],[122,22,174,35,"parseQueryParams"],[122,38,174,51],[122,39,174,52,"path"],[122,43,174,51],[122,45,174,58,"match"],[122,50,174,63],[122,51,174,64,"parse"],[122,56,174,51],[123,0,174,19],[123,13,174,12],[124,0,175,11],[126,0,177,10],[126,17,177,17],[127,0,177,19,"name"],[127,12,177,19,"name"],[127,16,177,23],[127,18,177,19,"name"],[128,0,177,17],[128,11,177,10],[129,0,178,9],[129,9,172,8],[129,10,171,36],[129,12,179,8,"initialRoutes"],[129,25,171,36],[129,26,171,6],[130,0,181,5],[132,0,183,4],[132,13,183,11,"undefined"],[132,22,183,4],[133,0,184,3],[135,0,186,2],[135,8,186,6,"result"],[135,14,186,2],[136,0,187,2],[136,8,187,6,"current"],[136,15,187,2],[138,0,189,2],[138,8,189,6,"legacy"],[138,14,189,12],[138,19,189,17],[138,24,189,2],[138,26,189,24],[139,0,189,24],[139,33,192,53,"matchAgainstConfigs"],[139,52,192,72],[139,53,193,6,"remaining"],[139,62,192,72],[139,64,194,6,"configs"],[139,71,194,13],[139,72,194,14,"map"],[139,75,194,6],[139,76,194,18],[139,86,194,19,"c"],[139,87,194,18],[140,0,194,18],[140,47,195,11,"c"],[140,48,194,18],[141,0,197,8,"regex"],[141,10,197,8,"regex"],[141,15,197,13],[141,17,197,15,"c"],[141,18,197,16],[141,19,197,17,"regex"],[141,24,197,15],[141,27,197,25],[141,31,197,29,"RegExp"],[141,37,197,25],[141,38,197,36,"c"],[141,39,197,37],[141,40,197,38,"regex"],[141,45,197,36],[141,46,197,44,"source"],[141,52,197,36],[141,55,197,53],[141,58,197,25],[141,59,197,15],[141,62,197,60,"undefined"],[142,0,194,18],[143,0,194,18],[143,7,194,6],[143,8,192,72],[143,9,189,24],[144,0,189,24],[144,10,192,12,"routeNames"],[144,20,189,24],[144,44,192,12,"routeNames"],[144,54,189,24],[145,0,189,24],[145,10,192,24,"allParams"],[145,19,189,24],[145,43,192,24,"allParams"],[145,52,189,24],[146,0,189,24],[146,10,192,35,"remainingPath"],[146,23,189,24],[146,47,192,35,"remainingPath"],[146,60,189,24],[148,0,201,4],[148,10,201,8,"routeNames"],[148,20,201,18],[148,25,201,23,"undefined"],[148,34,201,4],[148,36,201,34],[149,0,203,6,"remaining"],[149,8,203,6,"remaining"],[149,17,203,15],[149,20,203,18,"remainingPath"],[149,33,203,6],[150,0,204,6,"current"],[150,8,204,6,"current"],[150,15,204,13],[150,18,204,16,"createNestedStateObject"],[150,41,204,39],[150,42,205,8,"createRouteObjects"],[150,60,205,26],[150,61,205,27,"configs"],[150,68,205,26],[150,70,205,36,"routeNames"],[150,80,205,26],[150,82,205,48,"allParams"],[150,91,205,26],[150,92,204,39],[150,94,206,8,"initialRoutes"],[150,107,204,39],[150,108,204,6],[151,0,208,6,"result"],[151,8,208,6,"result"],[151,14,208,12],[151,17,208,15,"current"],[151,24,208,6],[152,0,209,5],[153,0,210,3],[153,5,189,2],[153,11,210,9],[154,0,213,4],[154,13,213,11,"remaining"],[154,22,213,4],[154,24,213,22],[155,0,213,22],[155,36,214,53,"matchAgainstConfigs"],[155,55,214,72],[155,56,215,8,"remaining"],[155,65,214,72],[155,67,216,8,"configs"],[155,74,214,72],[155,75,213,22],[156,0,213,22],[156,12,214,12,"routeNames"],[156,23,213,22],[156,48,214,12,"routeNames"],[156,58,213,22],[157,0,213,22],[157,12,214,24,"allParams"],[157,22,213,22],[157,47,214,24,"allParams"],[157,56,213,22],[158,0,213,22],[158,12,214,35,"remainingPath"],[158,26,213,22],[158,51,214,35,"remainingPath"],[158,64,213,22],[160,0,219,6,"remaining"],[160,8,219,6,"remaining"],[160,17,219,15],[160,20,219,18,"remainingPath"],[160,34,219,6],[162,0,222,6],[162,12,222,10,"routeNames"],[162,23,222,20],[162,28,222,25,"undefined"],[162,37,222,6],[162,39,222,36],[163,0,223,8],[163,14,223,14,"segments"],[163,22,223,22],[163,25,223,25,"remaining"],[163,34,223,34],[163,35,223,35,"split"],[163,40,223,25],[163,41,223,41],[163,44,223,25],[163,45,223,8],[164,0,225,8,"routeNames"],[164,10,225,8,"routeNames"],[164,21,225,18],[164,24,225,21],[164,25,225,22,"decodeURIComponent"],[164,43,225,40],[164,44,225,41,"segments"],[164,52,225,49],[164,53,225,50],[164,54,225,49],[164,55,225,40],[164,56,225,21],[164,57,225,8],[165,0,226,8,"segments"],[165,10,226,8,"segments"],[165,18,226,16],[165,19,226,17,"shift"],[165,24,226,8],[166,0,227,8,"remaining"],[166,10,227,8,"remaining"],[166,19,227,17],[166,22,227,20,"segments"],[166,30,227,28],[166,31,227,29,"join"],[166,35,227,20],[166,36,227,34],[166,39,227,20],[166,40,227,8],[167,0,228,7],[169,0,230,6],[169,12,230,12,"state"],[169,17,230,17],[169,20,230,20,"createNestedStateObject"],[169,43,230,43],[169,44,231,8,"createRouteObjects"],[169,62,231,26],[169,63,231,27,"configs"],[169,70,231,26],[169,72,231,36,"routeNames"],[169,83,231,26],[169,85,231,48,"allParams"],[169,95,231,26],[169,96,230,43],[169,98,232,8,"initialRoutes"],[169,111,230,43],[169,112,230,6],[171,0,235,6],[171,12,235,10,"current"],[171,19,235,6],[171,21,235,19],[172,0,235,19],[174,0,237,8],[174,29,237,15,"current"],[174,36,237,8],[174,57,237,15],[174,66,237,24,"routes"],[174,72,237,15],[174,73,237,31,"current"],[174,80,237,38],[174,81,237,39,"index"],[174,86,237,31],[174,90,237,48],[174,91,237,15],[174,93,237,51,"state"],[174,98,237,8],[174,100,237,58],[175,0,237,58],[177,0,238,10,"current"],[177,12,238,10,"current"],[177,19,238,17],[177,22,238,20,"current"],[177,29,238,27],[177,30,238,28,"routes"],[177,36,238,20],[177,37,238,35,"current"],[177,44,238,42],[177,45,238,43,"index"],[177,50,238,35],[177,54,238,52],[177,55,238,20],[177,57,238,55,"state"],[177,62,238,10],[178,0,239,9],[180,0,241,9,"current"],[180,10,241,9,"current"],[180,17,241,8],[180,18,241,51,"routes"],[180,24,241,8],[180,25,242,10],[180,39,242,10,"current"],[180,46,242,17],[180,55,242,10],[180,77,242,19,"index"],[180,82,242,10],[180,87,242,28],[180,88,241,8],[180,90,243,10,"state"],[180,95,241,8],[180,98,243,18,"state"],[180,103,241,8],[181,0,244,7],[181,9,235,6],[181,15,244,13],[182,0,245,8,"result"],[182,10,245,8,"result"],[182,16,245,14],[182,19,245,17,"state"],[182,24,245,8],[183,0,246,7],[185,0,248,6,"current"],[185,8,248,6,"current"],[185,15,248,13],[185,18,248,16,"state"],[185,23,248,6],[186,0,249,5],[187,0,250,3],[189,0,252,2],[189,8,252,6,"current"],[189,15,252,13],[189,19,252,17],[189,23,252,6],[189,27,252,25,"result"],[189,33,252,31],[189,37,252,35],[189,41,252,2],[189,43,252,41],[190,0,253,4],[190,13,253,11,"undefined"],[190,22,253,4],[191,0,254,3],[193,0,256,2],[193,8,256,8,"route"],[193,13,256,13],[193,16,256,16,"findFocusedRoute"],[193,32,256,32],[193,33,256,33,"current"],[193,40,256,32],[193,41,256,2],[194,0,257,2],[194,8,257,8,"params"],[194,14,257,14],[194,17,257,17,"parseQueryParams"],[194,33,257,33],[194,34,258,4,"path"],[194,38,257,33],[194,40,259,4,"findParseConfigForRoute"],[194,63,259,27],[194,64,259,28,"route"],[194,69,259,33],[194,70,259,34,"name"],[194,74,259,27],[194,76,259,40,"configs"],[194,83,259,27],[194,84,257,33],[194,85,257,2],[196,0,262,2],[196,8,262,6,"params"],[196,14,262,2],[196,16,262,14],[197,0,264,4,"route"],[197,6,264,4,"route"],[197,11,264,9],[197,12,264,10,"params"],[197,18,264,4],[197,53,264,24,"route"],[197,58,264,29],[197,59,264,30,"params"],[197,65,264,4],[197,68,264,41,"params"],[197,74,264,4],[198,0,265,3],[200,0,267,2],[200,11,267,9,"result"],[200,17,267,2],[201,0,268,1],[203,0,270,0],[203,6,270,6,"joinPaths"],[203,15,270,15],[203,18,270,18],[203,27,270,6,"joinPaths"],[203,36,270,18],[204,0,270,18],[206,0,270,18],[206,38,270,22,"paths"],[206,43,270,18],[207,0,270,22,"paths"],[207,6,270,22,"paths"],[207,11,270,18],[208,0,270,18],[210,0,270,18],[210,11,271,2],[210,20,271,3],[210,22,271,2],[210,24,272,5,"concat"],[210,30,271,2],[210,77,272,15,"paths"],[210,82,272,20],[210,83,272,21,"map"],[210,86,272,15],[210,87,272,25],[210,97,272,26,"p"],[210,98,272,25],[211,0,272,25],[211,13,272,32,"p"],[211,14,272,33],[211,15,272,34,"split"],[211,20,272,32],[211,21,272,40],[211,24,272,32],[211,25,272,25],[212,0,272,25],[212,5,272,15],[212,6,271,2],[212,9,273,5,"filter"],[212,15,271,2],[212,16,273,12,"Boolean"],[212,23,271,2],[212,25,274,5,"join"],[212,29,271,2],[212,30,274,10],[212,33,271,2],[212,34,270,18],[213,0,270,18],[213,3,270,0],[215,0,276,0],[215,6,276,6,"matchAgainstConfigs"],[215,25,276,25],[215,28,276,28],[215,37,276,6,"matchAgainstConfigs"],[215,56,276,28],[215,57,276,29,"remaining"],[215,66,276,28],[215,68,276,48,"configs"],[215,75,276,28],[215,77,276,75],[216,0,277,2],[216,8,277,6,"routeNames"],[216,18,277,2],[217,0,278,2],[217,8,278,6,"allParams"],[217,17,278,2],[218,0,279,2],[218,8,279,6,"remainingPath"],[218,21,279,19],[218,24,279,22,"remaining"],[218,33,279,2],[220,0,276,75],[220,31,282,13,"config"],[220,37,276,75],[221,0,283,4],[221,10,283,8],[221,11,283,9,"config"],[221,17,283,15],[221,18,283,16,"regex"],[221,23,283,4],[221,25,283,23],[222,0,284,6],[223,0,285,5],[225,0,287,4],[225,10,287,10,"match"],[225,15,287,15],[225,18,287,18,"remainingPath"],[225,31,287,31],[225,32,287,32,"match"],[225,37,287,18],[225,38,287,38,"config"],[225,44,287,44],[225,45,287,45,"regex"],[225,50,287,18],[225,51,287,4],[227,0,290,4],[227,10,290,8,"match"],[227,15,290,4],[227,17,290,15],[228,0,291,6,"routeNames"],[228,8,291,6,"routeNames"],[228,18,291,16],[228,54,291,23,"config"],[228,60,291,29],[228,61,291,30,"routeNames"],[228,71,291,16],[228,72,291,6],[229,0,293,6],[229,12,293,12,"paramPatterns"],[229,25,293,25],[229,28,293,28,"config"],[229,34,293,34],[229,35,293,35,"pattern"],[229,42,293,28],[229,43,294,9,"split"],[229,48,293,28],[229,49,294,15],[229,52,293,28],[229,54,295,9,"filter"],[229,60,293,28],[229,61,295,16],[229,71,295,17,"p"],[229,72,295,16],[230,0,295,16],[230,17,295,23,"p"],[230,18,295,24],[230,19,295,25,"startsWith"],[230,29,295,23],[230,30,295,36],[230,33,295,23],[230,34,295,16],[231,0,295,16],[231,9,293,28],[231,10,293,6],[233,0,297,6],[233,12,297,10,"paramPatterns"],[233,25,297,23],[233,26,297,24,"length"],[233,32,297,6],[233,34,297,32],[234,0,298,8,"allParams"],[234,10,298,8,"allParams"],[234,19,298,17],[234,22,298,20,"paramPatterns"],[234,35,298,33],[234,36,298,34,"reduce"],[234,42,298,20],[234,43,298,62],[234,53,298,63,"acc"],[234,56,298,62],[234,58,298,68,"p"],[234,59,298,62],[234,61,298,71,"i"],[234,62,298,62],[234,64,298,77],[235,0,299,10],[235,16,299,16,"value"],[235,21,299,21],[235,24,299,24,"match"],[235,29,299,29],[235,30,299,31],[235,31,299,32,"i"],[235,32,299,33],[235,35,299,36],[235,36,299,31],[235,40,299,41],[235,41,299,29],[235,42,299,24],[235,43,299,44,"replace"],[235,50,299,24],[235,51,299,52],[235,55,299,24],[235,57,299,58],[235,59,299,24],[235,60,299,10],[236,0,301,10,"acc"],[236,12,301,10,"acc"],[236,15,301,13],[236,16,301,14,"p"],[236,17,301,13],[236,18,301,10],[236,21,301,19,"value"],[236,26,301,10],[237,0,303,10],[237,19,303,17,"acc"],[237,22,303,10],[238,0,304,9],[238,11,298,20],[238,13,304,11],[238,15,298,20],[238,16,298,8],[239,0,305,7],[241,0,307,6,"remainingPath"],[241,8,307,6,"remainingPath"],[241,21,307,19],[241,24,307,22,"remainingPath"],[241,37,307,35],[241,38,307,36,"replace"],[241,45,307,22],[241,46,307,44,"match"],[241,51,307,49],[241,52,307,50],[241,53,307,49],[241,54,307,22],[241,56,307,54],[241,58,307,22],[241,59,307,6],[242,0,309,6],[243,0,310,5],[244,0,276,75],[246,0,282,2],[246,57,282,23,"configs"],[246,64,282,2],[246,104,282,32],[247,0,282,32],[247,10,282,13,"config"],[247,16,282,32],[249,0,282,32],[249,23,282,13,"config"],[249,29,282,32],[251,0,282,32],[251,31,284,6],[252,0,282,32],[252,28,309,6],[253,0,311,3],[255,0,313,2],[255,11,313,9],[256,0,313,11,"routeNames"],[256,6,313,11,"routeNames"],[256,16,313,21],[256,18,313,11,"routeNames"],[256,28,313,9],[257,0,313,23,"allParams"],[257,6,313,23,"allParams"],[257,15,313,32],[257,17,313,23,"allParams"],[257,26,313,9],[258,0,313,34,"remainingPath"],[258,6,313,34,"remainingPath"],[258,19,313,47],[258,21,313,34,"remainingPath"],[259,0,313,9],[259,5,313,2],[260,0,314,1],[260,3,276,0],[262,0,316,0],[262,6,316,6,"createNormalizedConfigs"],[262,29,316,29],[262,32,316,32],[262,41,316,6,"createNormalizedConfigs"],[262,64,316,32],[262,65,317,2,"legacy"],[262,71,316,32],[262,73,318,2,"screen"],[262,79,316,32],[262,81,319,2,"routeConfig"],[262,92,316,32],[262,94,323,20],[263,0,323,20],[263,8,320,2,"routeNames"],[263,18,323,20],[263,89,320,25],[263,91,323,20],[264,0,323,20],[264,8,321,2,"initials"],[264,16,323,20],[265,0,323,20],[265,8,322,2,"parentPattern"],[265,21,323,20],[266,0,324,2],[266,8,324,8,"configs"],[266,15,324,30],[266,18,324,33],[266,20,324,2],[267,0,326,2,"routeNames"],[267,4,326,2,"routeNames"],[267,14,326,12],[267,15,326,13,"push"],[267,19,326,2],[267,20,326,18,"screen"],[267,26,326,2],[268,0,328,2],[268,8,328,8,"config"],[268,14,328,14],[268,17,328,17,"routeConfig"],[268,28,328,28],[268,29,328,29,"screen"],[268,35,328,28],[268,36,328,2],[270,0,330,2],[270,8,330,6],[270,15,330,13,"config"],[270,21,330,6],[270,26,330,24],[270,34,330,2],[270,36,330,34],[271,0,332,4],[271,10,332,10,"pattern"],[271,17,332,17],[271,20,332,20,"parentPattern"],[271,33,332,33],[271,36,332,36,"joinPaths"],[271,45,332,45],[271,46,332,46,"parentPattern"],[271,59,332,45],[271,61,332,61,"config"],[271,67,332,45],[271,68,332,33],[271,71,332,71,"config"],[271,77,332,4],[272,0,334,4,"configs"],[272,6,334,4,"configs"],[272,13,334,11],[272,14,334,12,"push"],[272,18,334,4],[272,19,334,17,"createConfigItem"],[272,35,334,33],[272,36,334,34,"legacy"],[272,42,334,33],[272,44,334,42,"screen"],[272,50,334,33],[272,52,334,50,"routeNames"],[272,62,334,33],[272,64,334,62,"pattern"],[272,71,334,33],[272,73,334,71,"config"],[272,79,334,33],[272,80,334,4],[273,0,335,3],[273,5,330,2],[273,11,335,9],[273,15,335,13],[273,22,335,20,"config"],[273,28,335,13],[273,33,335,31],[273,41,335,9],[273,43,335,41],[274,0,336,4],[274,10,336,8,"pattern"],[274,18,336,4],[276,0,341,4],[276,10,341,8],[276,17,341,15,"config"],[276,23,341,21],[276,24,341,22,"path"],[276,28,341,8],[276,33,341,31],[276,41,341,4],[276,43,341,41],[277,0,342,6],[277,12,342,10,"legacy"],[277,18,342,6],[277,20,342,18],[278,0,343,8,"pattern"],[278,10,343,8,"pattern"],[278,18,343,15],[278,21,344,10,"config"],[278,27,344,16],[278,28,344,17,"exact"],[278,33,344,10],[278,38,344,27],[278,42,344,10],[278,46,344,35,"parentPattern"],[278,59,344,10],[278,62,345,14,"joinPaths"],[278,71,345,23],[278,72,345,24,"parentPattern"],[278,85,345,23],[278,87,345,39,"config"],[278,93,345,45],[278,94,345,46,"path"],[278,98,345,23],[278,99,344,10],[278,102,346,14,"config"],[278,108,346,20],[278,109,346,21,"path"],[278,113,343,8],[279,0,347,7],[279,9,342,6],[279,15,347,13],[280,0,348,8],[280,14,348,12,"config"],[280,20,348,18],[280,21,348,19,"exact"],[280,26,348,12],[280,30,348,28,"config"],[280,36,348,34],[280,37,348,35,"path"],[280,41,348,28],[280,46,348,44,"undefined"],[280,55,348,8],[280,57,348,55],[281,0,349,10],[281,18,349,16],[281,22,349,20,"Error"],[281,27,349,16],[281,28,350,12],[281,178,349,16],[281,179,349,10],[282,0,352,9],[284,0,354,8,"pattern"],[284,10,354,8,"pattern"],[284,18,354,15],[284,21,355,10,"config"],[284,27,355,16],[284,28,355,17,"exact"],[284,33,355,10],[284,38,355,27],[284,42,355,10],[284,45,356,14,"joinPaths"],[284,54,356,23],[284,55,356,24,"parentPattern"],[284,68,356,37],[284,72,356,41],[284,74,356,23],[284,76,356,45,"config"],[284,82,356,51],[284,83,356,52,"path"],[284,87,356,45],[284,91,356,60],[284,93,356,23],[284,94,355,10],[284,97,357,14,"config"],[284,103,357,20],[284,104,357,21,"path"],[284,108,357,14],[284,112,357,29],[284,114,354,8],[285,0,358,7],[287,0,360,6,"configs"],[287,8,360,6,"configs"],[287,15,360,13],[287,16,360,14,"push"],[287,20,360,6],[287,21,361,8,"createConfigItem"],[287,37,361,24],[287,38,362,10,"legacy"],[287,44,361,24],[287,46,363,10,"screen"],[287,52,361,24],[287,54,364,10,"routeNames"],[287,64,361,24],[287,66,365,10,"pattern"],[287,74,361,24],[287,76,366,10,"config"],[287,82,366,16],[287,83,366,17,"path"],[287,87,361,24],[287,89,367,10,"config"],[287,95,367,16],[287,96,367,17,"parse"],[287,101,361,24],[287,102,360,6],[288,0,370,5],[290,0,372,4],[290,10,372,8,"config"],[290,16,372,14],[290,17,372,15,"screens"],[290,24,372,4],[290,26,372,24],[291,0,374,6],[291,12,374,10,"config"],[291,18,374,16],[291,19,374,17,"initialRouteName"],[291,35,374,6],[291,37,374,35],[292,0,375,8,"initials"],[292,10,375,8,"initials"],[292,18,375,16],[292,19,375,17,"push"],[292,23,375,8],[292,24,375,22],[293,0,376,10,"initialRouteName"],[293,12,376,10,"initialRouteName"],[293,28,376,26],[293,30,376,28,"config"],[293,36,376,34],[293,37,376,35,"initialRouteName"],[293,53,375,22],[294,0,377,10,"connectedRoutes"],[294,12,377,10,"connectedRoutes"],[294,27,377,25],[294,29,377,27,"Object"],[294,35,377,33],[294,36,377,34,"keys"],[294,40,377,27],[294,41,377,39,"config"],[294,47,377,45],[294,48,377,46,"screens"],[294,55,377,27],[295,0,375,22],[295,11,375,8],[296,0,379,7],[298,0,381,6,"Object"],[298,8,381,6,"Object"],[298,14,381,12],[298,15,381,13,"keys"],[298,19,381,6],[298,20,381,18,"config"],[298,26,381,24],[298,27,381,25,"screens"],[298,34,381,6],[298,36,381,34,"forEach"],[298,43,381,6],[298,44,381,42],[298,54,381,43,"nestedConfig"],[298,66,381,42],[298,68,381,60],[299,0,381,60],[301,0,382,8],[301,14,382,14,"result"],[301,20,382,20],[301,23,382,23,"createNormalizedConfigs"],[301,46,382,46],[301,47,383,10,"legacy"],[301,53,382,46],[301,55,384,10,"nestedConfig"],[301,67,382,46],[301,69,385,10,"config"],[301,75,385,16],[301,76,385,17,"screens"],[301,83,382,46],[301,85,386,10,"routeNames"],[301,95,382,46],[301,97,387,10,"initials"],[301,105,382,46],[301,120,388,10,"pattern"],[301,128,382,46],[301,152,388,21,"parentPattern"],[301,165,382,46],[301,166,382,8],[302,0,391,8,"configs"],[302,10,391,8,"configs"],[302,17,391,15],[302,18,391,16,"push"],[302,22,391,8],[302,29,391,8,"configs"],[302,36,391,15],[302,71,391,24,"result"],[302,77,391,15],[302,79,391,8],[303,0,392,7],[303,9,381,6],[304,0,393,5],[305,0,394,3],[307,0,396,2,"routeNames"],[307,4,396,2,"routeNames"],[307,14,396,12],[307,15,396,13,"pop"],[307,18,396,2],[308,0,398,2],[308,11,398,9,"configs"],[308,18,398,2],[309,0,399,1],[309,3,316,0],[311,0,401,0],[311,6,401,6,"createConfigItem"],[311,22,401,22],[311,25,401,25],[311,34,401,6,"createConfigItem"],[311,50,401,25],[311,51,402,2,"legacy"],[311,57,401,25],[311,59,403,2,"screen"],[311,65,401,25],[311,67,404,2,"routeNames"],[311,77,401,25],[311,79,405,2,"pattern"],[311,86,401,25],[311,88,406,2,"path"],[311,92,401,25],[311,94,407,2,"parse"],[311,99,401,25],[311,101,408,18],[312,0,410,2,"pattern"],[312,4,410,2,"pattern"],[312,11,410,9],[312,14,410,12,"pattern"],[312,21,410,19],[312,22,410,20,"split"],[312,27,410,12],[312,28,410,26],[312,31,410,12],[312,33,410,31,"filter"],[312,39,410,12],[312,40,410,38,"Boolean"],[312,47,410,12],[312,49,410,47,"join"],[312,53,410,12],[312,54,410,52],[312,57,410,12],[312,58,410,2],[313,0,412,2],[313,8,412,8,"regex"],[313,13,412,13],[313,16,412,16,"pattern"],[313,23,412,23],[313,26,413,6],[313,30,413,10,"RegExp"],[313,36,413,6],[313,44,414,13,"pattern"],[313,51,414,20],[313,52,415,11,"split"],[313,57,414,13],[313,58,415,17],[313,61,414,13],[313,63,416,11,"map"],[313,66,414,13],[313,67,416,15],[313,77,416,16,"it"],[313,79,416,15],[313,81,416,23],[314,0,417,12],[314,10,417,16,"legacy"],[314,16,417,22],[314,20,417,26,"it"],[314,22,417,28],[314,27,417,33],[314,30,417,12],[314,32,417,38],[315,0,418,14],[315,14,418,20],[315,18,418,24,"Error"],[315,23,418,20],[315,24,419,16],[315,168,418,20],[315,169,418,14],[316,0,421,13],[318,0,423,12],[318,10,423,16,"it"],[318,12,423,18],[318,13,423,19,"startsWith"],[318,23,423,16],[318,24,423,30],[318,27,423,16],[318,28,423,12],[318,30,423,36],[319,0,424,14],[319,32,424,35,"it"],[319,34,424,37],[319,35,424,38,"endsWith"],[319,43,424,35],[319,44,424,47],[319,47,424,35],[319,51,424,54],[319,54,424,35],[319,57,424,60],[319,59,424,14],[320,0,425,13],[322,0,427,12],[322,14,427,22,"it"],[322,16,427,24],[322,21,427,29],[322,24,427,22],[322,27,427,35],[322,31,427,22],[322,34,427,42],[322,67,427,49,"it"],[322,69,427,42],[322,70,427,12],[323,0,428,11],[323,5,414,13],[323,7,429,11,"join"],[323,11,414,13],[323,12,429,16],[323,14,414,13],[323,15,413,6],[323,22,412,23],[323,25,431,6,"undefined"],[323,34,412,2],[324,0,433,2],[324,11,433,9],[325,0,434,4,"screen"],[325,6,434,4,"screen"],[325,12,434,10],[325,14,434,4,"screen"],[325,20,433,9],[326,0,435,4,"regex"],[326,6,435,4,"regex"],[326,11,435,9],[326,13,435,4,"regex"],[326,18,433,9],[327,0,436,4,"pattern"],[327,6,436,4,"pattern"],[327,13,436,11],[327,15,436,4,"pattern"],[327,22,433,9],[328,0,437,4,"path"],[328,6,437,4,"path"],[328,10,437,8],[328,12,437,4,"path"],[328,16,433,9],[329,0,439,4,"routeNames"],[329,6,439,4,"routeNames"],[329,16,439,14],[329,51,439,20,"routeNames"],[329,61,439,14],[329,62,433,9],[330,0,440,4,"parse"],[330,6,440,4,"parse"],[330,11,440,9],[330,13,440,4,"parse"],[331,0,433,9],[331,5,433,2],[332,0,442,1],[332,3,401,0],[334,0,444,0],[334,6,444,6,"findParseConfigForRoute"],[334,29,444,29],[334,32,444,32],[334,41,444,6,"findParseConfigForRoute"],[334,64,444,32],[334,65,445,2,"routeName"],[334,74,444,32],[334,76,446,2,"flatConfig"],[334,86,444,32],[334,88,447,30],[335,0,448,2],[335,58,448,23,"flatConfig"],[335,68,448,2],[335,111,448,35],[336,0,448,35],[336,10,448,13,"config"],[336,16,448,35],[338,0,449,4],[338,10,449,8,"routeName"],[338,19,449,17],[338,24,449,22,"config"],[338,30,449,28],[338,31,449,29,"routeNames"],[338,41,449,22],[338,42,449,40,"config"],[338,48,449,46],[338,49,449,47,"routeNames"],[338,59,449,40],[338,60,449,58,"length"],[338,66,449,40],[338,69,449,67],[338,70,449,22],[338,71,449,4],[338,73,449,71],[339,0,450,6],[339,15,450,13,"config"],[339,21,450,19],[339,22,450,20,"parse"],[339,27,450,6],[340,0,451,5],[341,0,452,3],[343,0,454,2],[343,11,454,9,"undefined"],[343,20,454,2],[344,0,455,1],[344,3,444,0],[346,0,458,0],[346,6,458,6,"findInitialRoute"],[346,22,458,22],[346,25,458,25],[346,34,458,6,"findInitialRoute"],[346,50,458,25],[346,51,459,2,"routeName"],[346,60,458,25],[346,62,460,2,"initialRoutes"],[346,75,458,25],[346,77,461,25],[347,0,462,2],[347,58,462,23,"initialRoutes"],[347,71,462,2],[347,114,462,38],[348,0,462,38],[348,10,462,13,"config"],[348,16,462,38],[350,0,463,4],[350,10,463,8,"config"],[350,16,463,14],[350,17,463,15,"connectedRoutes"],[350,32,463,8],[350,33,463,31,"includes"],[350,41,463,8],[350,42,463,40,"routeName"],[350,51,463,8],[350,52,463,4],[350,54,463,52],[351,0,464,6],[351,15,464,13,"config"],[351,21,464,19],[351,22,464,20,"initialRouteName"],[351,38,464,13],[351,43,464,41,"routeName"],[351,52,464,13],[351,55,465,10,"undefined"],[351,64,464,13],[351,67,466,10,"config"],[351,73,466,16],[351,74,466,17,"initialRouteName"],[351,90,464,6],[352,0,467,5],[353,0,468,3],[355,0,469,2],[355,11,469,9,"undefined"],[355,20,469,2],[356,0,470,1],[356,3,458,0],[358,0,474,0],[358,6,474,6,"createStateObject"],[358,23,474,23],[358,26,474,26],[358,35,474,6,"createStateObject"],[358,52,474,26],[358,53,475,2,"initialRoute"],[358,65,474,26],[358,67,476,2,"routeName"],[358,76,474,26],[358,78,477,2,"params"],[358,84,474,26],[358,86,478,2,"isEmpty"],[358,93,474,26],[358,95,479,19],[359,0,480,2],[359,8,480,6,"isEmpty"],[359,15,480,2],[359,17,480,15],[360,0,481,4],[360,10,481,8,"initialRoute"],[360,22,481,4],[360,24,481,22],[361,0,482,6],[361,15,482,13],[362,0,483,8,"index"],[362,10,483,8,"index"],[362,15,483,13],[362,17,483,15],[362,18,482,13],[363,0,484,8,"routes"],[363,10,484,8,"routes"],[363,16,484,14],[363,18,484,16],[363,19,484,17],[364,0,484,19,"name"],[364,12,484,19,"name"],[364,16,484,23],[364,18,484,25,"initialRoute"],[365,0,484,17],[365,11,484,16],[365,13,484,41],[366,0,484,43,"name"],[366,12,484,43,"name"],[366,16,484,47],[366,18,484,49,"routeName"],[366,27,484,41],[367,0,484,70,"params"],[367,12,484,70,"params"],[367,18,484,76],[367,20,484,70,"params"],[368,0,484,41],[368,11,484,16],[369,0,482,13],[369,9,482,6],[370,0,486,5],[370,7,481,4],[370,13,486,11],[371,0,487,6],[371,15,487,13],[372,0,488,8,"routes"],[372,10,488,8,"routes"],[372,16,488,14],[372,18,488,16],[372,19,488,17],[373,0,488,19,"name"],[373,12,488,19,"name"],[373,16,488,23],[373,18,488,25,"routeName"],[373,27,488,17],[374,0,488,46,"params"],[374,12,488,46,"params"],[374,18,488,52],[374,20,488,46,"params"],[375,0,488,17],[375,11,488,16],[376,0,487,13],[376,9,487,6],[377,0,490,5],[378,0,491,3],[378,5,480,2],[378,11,491,9],[379,0,492,4],[379,10,492,8,"initialRoute"],[379,22,492,4],[379,24,492,22],[380,0,493,6],[380,15,493,13],[381,0,494,8,"index"],[381,10,494,8,"index"],[381,15,494,13],[381,17,494,15],[381,18,493,13],[382,0,495,8,"routes"],[382,10,495,8,"routes"],[382,16,495,14],[382,18,495,16],[382,19,496,10],[383,0,496,12,"name"],[383,12,496,12,"name"],[383,16,496,16],[383,18,496,18,"initialRoute"],[384,0,496,10],[384,11,495,16],[384,13,497,10],[385,0,497,12,"name"],[385,12,497,12,"name"],[385,16,497,16],[385,18,497,18,"routeName"],[385,27,497,10],[386,0,497,39,"params"],[386,12,497,39,"params"],[386,18,497,45],[386,20,497,39,"params"],[386,26,497,10],[387,0,497,47,"state"],[387,12,497,47,"state"],[387,17,497,52],[387,19,497,54],[388,0,497,56,"routes"],[388,14,497,56,"routes"],[388,20,497,62],[388,22,497,64],[389,0,497,54],[390,0,497,10],[390,11,495,16],[391,0,493,13],[391,9,493,6],[392,0,500,5],[392,7,492,4],[392,13,500,11],[393,0,501,6],[393,15,501,13],[394,0,502,8,"routes"],[394,10,502,8,"routes"],[394,16,502,14],[394,18,502,16],[394,19,502,17],[395,0,502,19,"name"],[395,12,502,19,"name"],[395,16,502,23],[395,18,502,25,"routeName"],[395,27,502,17],[396,0,502,46,"params"],[396,12,502,46,"params"],[396,18,502,52],[396,20,502,46,"params"],[396,26,502,17],[397,0,502,54,"state"],[397,12,502,54,"state"],[397,17,502,59],[397,19,502,61],[398,0,502,63,"routes"],[398,14,502,63,"routes"],[398,20,502,69],[398,22,502,71],[399,0,502,61],[400,0,502,17],[400,11,502,16],[401,0,501,13],[401,9,501,6],[402,0,504,5],[403,0,505,3],[404,0,506,1],[404,3,474,0],[406,0,508,0],[406,6,508,6,"createNestedStateObject"],[406,29,508,29],[406,32,508,32],[406,41,508,6,"createNestedStateObject"],[406,64,508,32],[406,65,509,2,"routes"],[406,71,508,32],[406,73,510,2,"initialRoutes"],[406,86,508,32],[406,88,511,5],[407,0,512,2],[407,8,512,6,"state"],[407,13,512,2],[408,0,513,2],[408,8,513,6,"route"],[408,13,513,11],[408,16,513,14,"routes"],[408,22,513,20],[408,23,513,21,"shift"],[408,28,513,14],[408,30,513,2],[409,0,514,2],[409,8,514,6,"initialRoute"],[409,20,514,18],[409,23,514,21,"findInitialRoute"],[409,39,514,37],[409,40,514,38,"route"],[409,45,514,43],[409,46,514,44,"name"],[409,50,514,37],[409,52,514,50,"initialRoutes"],[409,65,514,37],[409,66,514,2],[410,0,516,2,"state"],[410,4,516,2,"state"],[410,9,516,7],[410,12,516,10,"createStateObject"],[410,29,516,27],[410,30,517,4,"initialRoute"],[410,42,516,27],[410,44,518,4,"route"],[410,49,518,9],[410,50,518,10,"name"],[410,54,516,27],[410,56,519,4,"route"],[410,61,519,9],[410,62,519,10,"params"],[410,68,516,27],[410,70,520,4,"routes"],[410,76,520,10],[410,77,520,11,"length"],[410,83,520,4],[410,88,520,22],[410,89,516,27],[410,90,516,2],[412,0,523,2],[412,8,523,6,"routes"],[412,14,523,12],[412,15,523,13,"length"],[412,21,523,6],[412,24,523,22],[412,25,523,2],[412,27,523,25],[413,0,524,4],[413,10,524,8,"nestedState"],[413,21,524,19],[413,24,524,22,"state"],[413,29,524,4],[415,0,526,4],[415,13,526,12,"route"],[415,18,526,17],[415,21,526,20,"routes"],[415,27,526,26],[415,28,526,27,"shift"],[415,33,526,20],[415,35,526,4],[415,37,526,74],[416,0,527,6,"initialRoute"],[416,8,527,6,"initialRoute"],[416,20,527,18],[416,23,527,21,"findInitialRoute"],[416,39,527,37],[416,40,527,38,"route"],[416,45,527,43],[416,46,527,44,"name"],[416,50,527,37],[416,52,527,50,"initialRoutes"],[416,65,527,37],[416,66,527,6],[417,0,529,6],[417,12,529,12,"nestedStateIndex"],[417,28,529,28],[417,31,530,8,"nestedState"],[417,42,530,19],[417,43,530,20,"index"],[417,48,530,8],[417,52,530,29,"nestedState"],[417,63,530,40],[417,64,530,41,"routes"],[417,70,530,29],[417,71,530,48,"length"],[417,77,530,29],[417,80,530,57],[417,81,529,6],[418,0,532,6,"nestedState"],[418,8,532,6,"nestedState"],[418,19,532,17],[418,20,532,18,"routes"],[418,26,532,6],[418,27,532,25,"nestedStateIndex"],[418,43,532,6],[418,45,532,43,"state"],[418,50,532,6],[418,53,532,51,"createStateObject"],[418,70,532,68],[418,71,533,8,"initialRoute"],[418,83,532,68],[418,85,534,8,"route"],[418,90,534,13],[418,91,534,14,"name"],[418,95,532,68],[418,97,535,8,"route"],[418,102,535,13],[418,103,535,14,"params"],[418,109,532,68],[418,111,536,8,"routes"],[418,117,536,14],[418,118,536,15,"length"],[418,124,536,8],[418,129,536,26],[418,130,532,68],[418,131,532,6],[420,0,539,6],[420,12,539,10,"routes"],[420,18,539,16],[420,19,539,17,"length"],[420,25,539,10],[420,28,539,26],[420,29,539,6],[420,31,539,29],[421,0,540,8,"nestedState"],[421,10,540,8,"nestedState"],[421,21,540,19],[421,24,540,22,"nestedState"],[421,35,540,33],[421,36,540,34,"routes"],[421,42,540,22],[421,43,540,41,"nestedStateIndex"],[421,59,540,22],[421,61,541,11,"state"],[421,66,540,8],[422,0,542,7],[423,0,543,5],[424,0,544,3],[426,0,546,2],[426,11,546,9,"state"],[426,16,546,2],[427,0,547,1],[427,3,508,0],[429,0,549,0],[429,6,549,6,"createRouteObjects"],[429,24,549,24],[429,27,549,27],[429,36,549,6,"createRouteObjects"],[429,54,549,27],[429,55,550,2,"configs"],[429,62,549,27],[429,64,551,2,"routeNames"],[429,74,549,27],[429,76,552,2,"allParams"],[429,85,549,27],[430,0,549,27],[430,11,554,2,"routeNames"],[430,21,554,12],[430,22,554,13,"map"],[430,25,554,2],[430,26,554,17],[430,36,554,18,"name"],[430,40,554,17],[430,42,554,27],[431,0,555,4],[431,10,555,10,"config"],[431,16,555,16],[431,19,555,19,"configs"],[431,26,555,26],[431,27,555,27,"find"],[431,31,555,19],[431,32,555,32],[431,42,555,33,"c"],[431,43,555,32],[432,0,555,32],[432,15,555,39,"c"],[432,16,555,40],[432,17,555,41,"screen"],[432,23,555,39],[432,28,555,52,"name"],[432,32,555,32],[433,0,555,32],[433,7,555,19],[433,8,555,4],[434,0,557,4],[434,10,557,8,"params"],[434,16,557,4],[436,0,559,4],[436,10,559,8,"allParams"],[436,19,559,17],[436,24,559,21,"config"],[436,30,559,17],[436,50,559,21,"config"],[436,56,559,27],[436,57,559,29,"path"],[436,61,559,17],[436,62,559,4],[436,64,559,35],[437,0,560,6],[437,12,560,12,"pattern"],[437,19,560,19],[437,22,560,22,"config"],[437,28,560,28],[437,29,560,29,"path"],[437,33,560,6],[439,0,562,6],[439,12,562,10,"pattern"],[439,19,562,6],[439,21,562,19],[440,0,563,8],[440,14,563,14,"paramPatterns"],[440,27,563,27],[440,30,563,30,"pattern"],[440,37,563,37],[440,38,564,11,"split"],[440,43,563,30],[440,44,564,17],[440,47,563,30],[440,49,565,11,"filter"],[440,55,563,30],[440,56,565,18],[440,66,565,19,"p"],[440,67,565,18],[441,0,565,18],[441,19,565,25,"p"],[441,20,565,26],[441,21,565,27,"startsWith"],[441,31,565,25],[441,32,565,38],[441,35,565,25],[441,36,565,18],[442,0,565,18],[442,11,563,30],[442,12,563,8],[444,0,567,8],[444,14,567,12,"paramPatterns"],[444,27,567,25],[444,28,567,26,"length"],[444,34,567,8],[444,36,567,34],[445,0,568,10,"params"],[445,12,568,10,"params"],[445,18,568,16],[445,21,568,19,"paramPatterns"],[445,34,568,32],[445,35,568,33,"reduce"],[445,41,568,19],[445,42,568,61],[445,52,568,62,"acc"],[445,55,568,61],[445,57,568,67,"p"],[445,58,568,61],[445,60,568,73],[446,0,569,12],[446,18,569,18,"key"],[446,21,569,21],[446,24,569,24,"p"],[446,25,569,25],[446,26,569,26,"replace"],[446,33,569,24],[446,34,569,34],[446,38,569,24],[446,40,569,40],[446,42,569,24],[446,44,569,44,"replace"],[446,51,569,24],[446,52,569,52],[446,57,569,24],[446,59,569,59],[446,61,569,24],[446,62,569,12],[447,0,570,12],[447,18,570,18,"value"],[447,23,570,23],[447,26,570,26,"allParams"],[447,35,570,35],[447,36,570,37,"p"],[447,37,570,35],[447,38,570,12],[449,0,572,12],[449,18,572,16,"value"],[449,23,572,12],[449,25,572,23],[450,0,573,14,"acc"],[450,16,573,14,"acc"],[450,19,573,17],[450,20,573,18,"key"],[450,23,573,17],[450,24,573,14],[450,27,574,16,"config"],[450,33,574,22],[450,34,574,23,"parse"],[450,39,574,16],[450,43,574,32,"config"],[450,49,574,38],[450,50,574,39,"parse"],[450,55,574,32],[450,56,574,45,"key"],[450,59,574,32],[450,60,574,16],[450,63,575,20,"config"],[450,69,575,26],[450,70,575,27,"parse"],[450,75,575,20],[450,76,575,33,"key"],[450,79,575,20],[450,81,575,38,"value"],[450,86,575,20],[450,87,574,16],[450,90,576,20,"value"],[450,95,573,14],[451,0,577,13],[453,0,579,12],[453,21,579,19,"acc"],[453,24,579,12],[454,0,580,11],[454,13,568,19],[454,15,580,13],[454,17,568,19],[454,18,568,10],[455,0,581,9],[456,0,582,7],[457,0,583,5],[459,0,585,4],[459,10,585,8,"params"],[459,16,585,14],[459,20,585,18,"Object"],[459,26,585,24],[459,27,585,25,"keys"],[459,31,585,18],[459,32,585,30,"params"],[459,38,585,18],[459,40,585,38,"length"],[459,46,585,4],[459,48,585,46],[460,0,586,6],[460,15,586,13],[461,0,586,15,"name"],[461,10,586,15,"name"],[461,14,586,19],[461,16,586,15,"name"],[461,20,586,13],[462,0,586,21,"params"],[462,10,586,21,"params"],[462,16,586,27],[462,18,586,21,"params"],[463,0,586,13],[463,9,586,6],[464,0,587,5],[466,0,589,4],[466,13,589,11],[467,0,589,13,"name"],[467,8,589,13,"name"],[467,12,589,17],[467,14,589,13,"name"],[468,0,589,11],[468,7,589,4],[469,0,590,3],[469,5,554,2],[469,6,549,27],[470,0,549,27],[470,3,549,0],[472,0,592,0],[472,6,592,6,"findFocusedRoute"],[472,22,592,22],[472,25,592,25],[472,34,592,6,"findFocusedRoute"],[472,50,592,25],[472,51,592,26,"state"],[472,56,592,25],[472,58,592,50],[473,0,592,50],[475,0,593,2],[475,8,593,6,"current"],[475,15,593,39],[475,18,593,42,"state"],[475,23,593,2],[477,0,595,2],[477,24,595,9,"current"],[477,31,595,2],[477,52,595,9],[477,62,595,18,"routes"],[477,68,595,9],[477,69,595,25,"current"],[477,76,595,32],[477,77,595,33,"index"],[477,82,595,25],[477,86,595,42],[477,87,595,9],[477,89,595,45,"state"],[477,94,595,2],[477,96,595,52],[478,0,595,52],[480,0,597,4,"current"],[480,6,597,4,"current"],[480,13,597,11],[480,16,597,14,"current"],[480,23,597,21],[480,24,597,22,"routes"],[480,30,597,14],[480,31,597,29,"current"],[480,38,597,36],[480,39,597,37,"index"],[480,44,597,29],[480,48,597,46],[480,49,597,14],[480,51,597,49,"state"],[480,56,597,4],[481,0,598,3],[483,0,600,2],[483,8,600,8,"route"],[483,13,600,13],[483,16,600,17,"current"],[483,23,600,16],[483,24,600,59,"routes"],[483,30,600,16],[483,31,601,4],[483,45,601,4,"current"],[483,52,601,11],[483,61,601,4],[483,83,601,13,"index"],[483,88,601,4],[483,93,601,22],[483,94,600,16],[483,95,600,2],[484,0,604,2],[484,11,604,9,"route"],[484,16,604,2],[485,0,605,1],[485,3,592,0],[487,0,607,0],[487,6,607,6,"parseQueryParams"],[487,22,607,22],[487,25,607,25],[487,34,607,6,"parseQueryParams"],[487,50,607,25],[487,51,608,2,"path"],[487,55,607,25],[487,57,609,2,"parseConfig"],[487,68,607,25],[487,70,610,5],[488,0,611,2],[488,8,611,8,"query"],[488,13,611,13],[488,16,611,16,"path"],[488,20,611,20],[488,21,611,21,"split"],[488,26,611,16],[488,27,611,27],[488,30,611,16],[488,32,611,32],[488,33,611,16],[488,34,611,2],[490,0,612,2],[490,8,612,8,"params"],[490,14,612,14],[490,17,612,17,"queryString"],[490,38,612,29,"parse"],[490,43,612,17],[490,44,612,35,"query"],[490,49,612,17],[490,50,612,2],[492,0,614,2],[492,8,614,6,"parseConfig"],[492,19,614,2],[492,21,614,19],[493,0,615,4,"Object"],[493,6,615,4,"Object"],[493,12,615,10],[493,13,615,11,"keys"],[493,17,615,4],[493,18,615,16,"params"],[493,24,615,4],[493,26,615,24,"forEach"],[493,33,615,4],[493,34,615,32],[493,44,615,33,"name"],[493,48,615,32],[493,50,615,42],[494,0,616,6],[494,12,616,10,"parseConfig"],[494,23,616,21],[494,24,616,22,"name"],[494,28,616,21],[494,29,616,10],[494,33,616,31],[494,40,616,38,"params"],[494,46,616,44],[494,47,616,45,"name"],[494,51,616,44],[494,52,616,31],[494,57,616,55],[494,65,616,6],[494,67,616,65],[495,0,617,8,"params"],[495,10,617,8,"params"],[495,16,617,14],[495,17,617,15,"name"],[495,21,617,14],[495,22,617,8],[495,25,617,23,"parseConfig"],[495,36,617,34],[495,37,617,35,"name"],[495,41,617,34],[495,42,617,23],[495,43,617,41,"params"],[495,49,617,47],[495,50,617,48,"name"],[495,54,617,47],[495,55,617,23],[495,56,617,8],[496,0,618,7],[497,0,619,5],[497,7,615,4],[498,0,620,3],[500,0,622,2],[500,11,622,9,"Object"],[500,17,622,15],[500,18,622,16,"keys"],[500,22,622,9],[500,23,622,21,"params"],[500,29,622,9],[500,31,622,29,"length"],[500,37,622,9],[500,40,622,38,"params"],[500,46,622,9],[500,49,622,47,"undefined"],[500,58,622,2],[501,0,623,1],[501,3,607,0]],"functionMap":{"names":["<global>","getStateFromPath","remaining.split.filter.map$argument_0","Object.keys.map$argument_0","concat.sort$argument_0","configs.find$argument_0","config.routeNames.every$argument_0","match.routeNames.map$argument_0","configs.map$argument_0","joinPaths","paths.map$argument_0","matchAgainstConfigs","config.pattern.split.filter$argument_0","paramPatterns.reduce$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","pattern.split.map$argument_0","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject","createRouteObjects","routeNames.map$argument_0","pattern.split.filter$argument_0","findFocusedRoute","parseQueryParams"],"mappings":"AAA;eCwD;WC8B;ODQ;kCEY;SFO;UGG;KHuC;MIM;UCI,wBD,wBC,OD;SJC;6BMK;SNM;kBOgB;QPI;CDsE;kBSE;yBCE,mBD;cTE;4BWE;gBCmB,wBD;8DEG;SFM;CXU;gCcE;0CCiE;ODW;CdO;yBgBE;eCe;WDY;ChBc;gCkBE;ClBW;yBmBG;CnBY;0BoBI;CpBgC;gCqBE;CrBuC;2BsBE;iBCK;gClBC,wBkB;kBCU,wBD;6DVG;WUY;GDU,CtB;yByBE;CzBa;yB0BE;gCXQ;KWI;C1BI"}},"type":"js/module"}]}