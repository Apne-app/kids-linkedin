{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireWildcard","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/extends","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"isAsync":false}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"isAsync":false}},{"name":"escape-string-regexp","data":{"isAsync":false}},{"name":"query-string","data":{"isAsync":false}},{"name":"./checkLegacyPathConfig","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireWildcard = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireWildcard\");\n\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = getStateFromPath;\n\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/defineProperty\"));\n\n  var _extends4 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/extends\"));\n\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/toConsumableArray\"));\n\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/slicedToArray\"));\n\n  var _escapeStringRegexp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"escape-string-regexp\"));\n\n  var queryString = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[7], \"query-string\"));\n\n  var _checkLegacyPathConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8], \"./checkLegacyPathConfig\"));\n\n  function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  function getStateFromPath(path, options) {\n    var _ref;\n\n    var _checkLegacyPathConfi = (0, _checkLegacyPathConfig.default)(options),\n        _checkLegacyPathConfi2 = (0, _slicedToArray2.default)(_checkLegacyPathConfi, 2),\n        legacy = _checkLegacyPathConfi2[0],\n        compatOptions = _checkLegacyPathConfi2[1];\n\n    var initialRoutes = [];\n\n    if (compatOptions != null && compatOptions.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: compatOptions.initialRouteName,\n        connectedRoutes: Object.keys(compatOptions.screens)\n      });\n    }\n\n    var screens = compatOptions == null ? void 0 : compatOptions.screens;\n    var remaining = path.replace(/\\/+/g, '/').replace(/^\\//, '').replace(/\\?.*$/, '');\n    remaining = remaining.endsWith('/') ? remaining : remaining + \"/\";\n\n    if (screens === undefined) {\n      var routes = remaining.split('/').filter(Boolean).map(function (segment, i, self) {\n        var name = decodeURIComponent(segment);\n\n        if (i === self.length - 1) {\n          return {\n            name: name,\n            params: parseQueryParams(path)\n          };\n        }\n\n        return {\n          name: name\n        };\n      });\n\n      if (routes.length) {\n        return createNestedStateObject(routes, initialRoutes);\n      }\n\n      return undefined;\n    }\n\n    var configs = (_ref = []).concat.apply(_ref, (0, _toConsumableArray2.default)(Object.keys(screens).map(function (key) {\n      return createNormalizedConfigs(legacy, key, screens, [], initialRoutes);\n    }))).sort(function (a, b) {\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      var aParts = a.pattern.split('/');\n      var bParts = b.pattern.split('/');\n      var aWildcardIndex = aParts.indexOf('*');\n      var bWildcardIndex = bParts.indexOf('*');\n\n      if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n        return -1;\n      }\n\n      if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n        return 1;\n      }\n\n      if (aWildcardIndex === bWildcardIndex) {\n        return bParts.length - aParts.length;\n      }\n\n      return bWildcardIndex - aWildcardIndex;\n    });\n\n    configs.reduce(function (acc, config) {\n      if (acc[config.pattern]) {\n        var a = acc[config.pattern].routeNames;\n        var b = config.routeNames;\n        var intersects = a.length > b.length ? b.every(function (it, i) {\n          return a[i] === it;\n        }) : a.every(function (it, i) {\n          return b[i] === it;\n        });\n\n        if (!intersects) {\n          throw new Error(\"Found conflicting screens with the same pattern. The pattern '\" + config.pattern + \"' resolves to both '\" + a.join(' > ') + \"' and '\" + b.join(' > ') + \"'. Patterns must be unique and cannot resolve to more than one screen.\");\n        }\n      }\n\n      return (0, _extends4.default)(acc, (0, _defineProperty2.default)({}, config.pattern, config));\n    }, {});\n\n    if (remaining === '/') {\n      var match = configs.find(function (config) {\n        return config.path === '' && config.routeNames.every(function (name) {\n          var _configs$find;\n\n          return !((_configs$find = configs.find(function (c) {\n            return c.screen === name;\n          })) != null && _configs$find.path);\n        });\n      });\n\n      if (match) {\n        return createNestedStateObject(match.routeNames.map(function (name, i, self) {\n          if (i === self.length - 1) {\n            return {\n              name: name,\n              params: parseQueryParams(path, match.parse)\n            };\n          }\n\n          return {\n            name: name\n          };\n        }), initialRoutes);\n      }\n\n      return undefined;\n    }\n\n    var result;\n    var current;\n\n    if (legacy === false) {\n      var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs.map(function (c) {\n        return _objectSpread(_objectSpread({}, c), {}, {\n          regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n        });\n      })),\n          _routes = _matchAgainstConfigs.routes,\n          remainingPath = _matchAgainstConfigs.remainingPath;\n\n      if (_routes !== undefined) {\n        current = createNestedStateObject(_routes, initialRoutes);\n        remaining = remainingPath;\n        result = current;\n      }\n    } else {\n      while (remaining) {\n        var _matchAgainstConfigs2 = matchAgainstConfigs(remaining, configs),\n            _routes2 = _matchAgainstConfigs2.routes,\n            _remainingPath = _matchAgainstConfigs2.remainingPath;\n\n        remaining = _remainingPath;\n\n        if (_routes2 === undefined) {\n          var segments = remaining.split('/');\n          _routes2 = [{\n            name: decodeURIComponent(segments[0])\n          }];\n          segments.shift();\n          remaining = segments.join('/');\n        }\n\n        var state = createNestedStateObject(_routes2, initialRoutes);\n\n        if (current) {\n          var _current2;\n\n          while ((_current = current) != null && _current.routes[current.index || 0].state) {\n            var _current;\n\n            current = current.routes[current.index || 0].state;\n          }\n\n          current.routes[((_current2 = current) == null ? void 0 : _current2.index) || 0].state = state;\n        } else {\n          result = state;\n        }\n\n        current = state;\n      }\n    }\n\n    if (current == null || result == null) {\n      return undefined;\n    }\n\n    var route = findFocusedRoute(current);\n    var params = parseQueryParams(path, findParseConfigForRoute(route.name, configs));\n\n    if (params) {\n      route.params = _objectSpread(_objectSpread({}, route.params), params);\n    }\n\n    return result;\n  }\n\n  var joinPaths = function joinPaths() {\n    var _ref2;\n\n    for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n      paths[_key] = arguments[_key];\n    }\n\n    return (_ref2 = []).concat.apply(_ref2, (0, _toConsumableArray2.default)(paths.map(function (p) {\n      return p.split('/');\n    }))).filter(Boolean).join('/');\n  };\n\n  var matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n    var routes;\n    var remainingPath = remaining;\n\n    var _loop = function _loop(config) {\n      if (!config.regex) {\n        return \"continue\";\n      }\n\n      var match = remainingPath.match(config.regex);\n\n      if (match) {\n        var _config$pattern;\n\n        var matchedParams = (_config$pattern = config.pattern) == null ? void 0 : _config$pattern.split('/').filter(function (p) {\n          return p.startsWith(':');\n        }).reduce(function (acc, p, i) {\n          return (0, _extends4.default)(acc, (0, _defineProperty2.default)({}, p, match[(i + 1) * 2].replace(/\\//, '')));\n        }, {});\n        routes = config.routeNames.map(function (name) {\n          var _config$path;\n\n          var config = configs.find(function (c) {\n            return c.screen === name;\n          });\n          var params = config == null ? void 0 : (_config$path = config.path) == null ? void 0 : _config$path.split('/').filter(function (p) {\n            return p.startsWith(':');\n          }).reduce(function (acc, p) {\n            var value = matchedParams[p];\n\n            if (value) {\n              var _config$parse;\n\n              var key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = (_config$parse = config.parse) != null && _config$parse[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n\n          if (params && Object.keys(params).length) {\n            return {\n              name: name,\n              params: params\n            };\n          }\n\n          return {\n            name: name\n          };\n        });\n        remainingPath = remainingPath.replace(match[1], '');\n        return \"break\";\n      }\n    };\n\n    for (var _iterator = _createForOfIteratorHelperLoose(configs), _step; !(_step = _iterator()).done;) {\n      var config = _step.value;\n\n      var _ret = _loop(config);\n\n      if (_ret === \"continue\") continue;\n      if (_ret === \"break\") break;\n    }\n\n    return {\n      routes: routes,\n      remainingPath: remainingPath\n    };\n  };\n\n  var createNormalizedConfigs = function createNormalizedConfigs(legacy, screen, routeConfig) {\n    var routeNames = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    var initials = arguments.length > 4 ? arguments[4] : undefined;\n    var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n    var configs = [];\n    routeNames.push(screen);\n    var config = routeConfig[screen];\n\n    if (typeof config === 'string') {\n      var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n    } else if (typeof config === 'object') {\n      var _pattern;\n\n      if (typeof config.path === 'string') {\n        if (legacy) {\n          _pattern = config.exact !== true && parentPattern ? joinPaths(parentPattern, config.path) : config.path;\n        } else {\n          if (config.exact && config.path === undefined) {\n            throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n          }\n\n          _pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n        }\n\n        configs.push(createConfigItem(legacy, screen, routeNames, _pattern, config.path, config.parse));\n      }\n\n      if (config.screens) {\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            connectedRoutes: Object.keys(config.screens)\n          });\n        }\n\n        Object.keys(config.screens).forEach(function (nestedConfig) {\n          var _pattern2;\n\n          var result = createNormalizedConfigs(legacy, nestedConfig, config.screens, routeNames, initials, (_pattern2 = _pattern) != null ? _pattern2 : parentPattern);\n          configs.push.apply(configs, (0, _toConsumableArray2.default)(result));\n        });\n      }\n    }\n\n    routeNames.pop();\n    return configs;\n  };\n\n  var createConfigItem = function createConfigItem(legacy, screen, routeNames, pattern, path, parse) {\n    pattern = pattern.split('/').filter(Boolean).join('/');\n    var regex = pattern ? new RegExp(\"^(\" + pattern.split('/').map(function (it) {\n      if (legacy && it === '*') {\n        throw new Error(\"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config\");\n      }\n\n      if (it.startsWith(':')) {\n        return \"(([^/]+\\\\/)\" + (it.endsWith('?') ? '?' : '') + \")\";\n      }\n\n      return (it === '*' ? '.*' : (0, _escapeStringRegexp.default)(it)) + \"\\\\/\";\n    }).join('') + \")\") : undefined;\n    return {\n      screen: screen,\n      regex: regex,\n      pattern: pattern,\n      path: path,\n      routeNames: (0, _toConsumableArray2.default)(routeNames),\n      parse: parse\n    };\n  };\n\n  var findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n    for (var _iterator2 = _createForOfIteratorHelperLoose(flatConfig), _step2; !(_step2 = _iterator2()).done;) {\n      var config = _step2.value;\n\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n\n    return undefined;\n  };\n\n  var findInitialRoute = function findInitialRoute(routeName, initialRoutes) {\n    for (var _iterator3 = _createForOfIteratorHelperLoose(initialRoutes), _step3; !(_step3 = _iterator3()).done;) {\n      var config = _step3.value;\n\n      if (config.connectedRoutes.includes(routeName)) {\n        return config.initialRouteName === routeName ? undefined : config.initialRouteName;\n      }\n    }\n\n    return undefined;\n  };\n\n  var createStateObject = function createStateObject(initialRoute, route, isEmpty) {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, route]\n        };\n      } else {\n        return {\n          routes: [route]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, _objectSpread(_objectSpread({}, route), {}, {\n            state: {\n              routes: []\n            }\n          })]\n        };\n      } else {\n        return {\n          routes: [_objectSpread(_objectSpread({}, route), {}, {\n            state: {\n              routes: []\n            }\n          })]\n        };\n      }\n    }\n  };\n\n  var createNestedStateObject = function createNestedStateObject(routes, initialRoutes) {\n    var state;\n    var route = routes.shift();\n    var initialRoute = findInitialRoute(route.name, initialRoutes);\n    state = createStateObject(initialRoute, route, routes.length === 0);\n\n    if (routes.length > 0) {\n      var nestedState = state;\n\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, initialRoutes);\n        var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n      }\n    }\n\n    return state;\n  };\n\n  var findFocusedRoute = function findFocusedRoute(state) {\n    var _current4;\n\n    var current = state;\n\n    while ((_current3 = current) != null && _current3.routes[current.index || 0].state) {\n      var _current3;\n\n      current = current.routes[current.index || 0].state;\n    }\n\n    var route = current.routes[((_current4 = current) == null ? void 0 : _current4.index) || 0];\n    return route;\n  };\n\n  var parseQueryParams = function parseQueryParams(path, parseConfig) {\n    var query = path.split('?')[1];\n    var params = queryString.parse(query);\n\n    if (parseConfig) {\n      Object.keys(params).forEach(function (name) {\n        if (parseConfig[name] && typeof params[name] === 'string') {\n          params[name] = parseConfig[name](params[name]);\n        }\n      });\n    }\n\n    return Object.keys(params).length ? params : undefined;\n  };\n});","lineCount":498,"map":[[19,0,1,0],[21,0,2,0],[23,0,8,0],[35,0,62,15],[35,11,62,24,"getStateFromPath"],[35,27,62,15],[35,28,63,2,"path"],[35,32,62,15],[35,34,64,2,"options"],[35,41,62,15],[35,43,65,27],[36,0,65,27],[38,0,65,27],[38,32,66,34],[38,68,66,56,"options"],[38,75,66,34],[38,76,65,27],[39,0,65,27],[40,0,65,27],[40,8,66,9,"legacy"],[40,14,65,27],[41,0,65,27],[41,8,66,17,"compatOptions"],[41,21,65,27],[43,0,68,2],[43,8,68,6,"initialRoutes"],[43,21,68,41],[43,24,68,44],[43,26,68,2],[45,0,70,2],[45,8,70,6,"compatOptions"],[45,21,70,2],[45,33,70,6,"compatOptions"],[45,46,70,19],[45,47,70,21,"initialRouteName"],[45,63,70,2],[45,65,70,39],[46,0,71,4,"initialRoutes"],[46,6,71,4,"initialRoutes"],[46,19,71,17],[46,20,71,18,"push"],[46,24,71,4],[46,25,71,23],[47,0,72,6,"initialRouteName"],[47,8,72,6,"initialRouteName"],[47,24,72,22],[47,26,72,24,"compatOptions"],[47,39,72,37],[47,40,72,38,"initialRouteName"],[47,56,71,23],[48,0,73,6,"connectedRoutes"],[48,8,73,6,"connectedRoutes"],[48,23,73,21],[48,25,73,23,"Object"],[48,31,73,29],[48,32,73,30,"keys"],[48,36,73,23],[48,37,73,35,"compatOptions"],[48,50,73,48],[48,51,73,49,"screens"],[48,58,73,23],[49,0,71,23],[49,7,71,4],[50,0,75,3],[52,0,77,2],[52,8,77,8,"screens"],[52,15,77,15],[52,18,77,18,"compatOptions"],[52,31,77,15],[52,51,77,18,"compatOptions"],[52,64,77,31],[52,65,77,33,"screens"],[52,72,77,2],[53,0,79,2],[53,8,79,6,"remaining"],[53,17,79,15],[53,20,79,18,"path"],[53,24,79,22],[53,25,80,5,"replace"],[53,32,79,18],[53,33,80,13],[53,39,79,18],[53,41,80,21],[53,44,79,18],[53,46,81,5,"replace"],[53,53,79,18],[53,54,81,13],[53,59,79,18],[53,61,81,20],[53,63,79,18],[53,65,82,5,"replace"],[53,72,79,18],[53,73,82,13],[53,80,79,18],[53,82,82,22],[53,84,79,18],[53,85,79,2],[54,0,85,2,"remaining"],[54,4,85,2,"remaining"],[54,13,85,11],[54,16,85,14,"remaining"],[54,25,85,23],[54,26,85,24,"endsWith"],[54,34,85,14],[54,35,85,33],[54,38,85,14],[54,42,85,40,"remaining"],[54,51,85,14],[54,54,85,55,"remaining"],[54,63,85,14],[54,69,85,2],[56,0,87,2],[56,8,87,6,"screens"],[56,15,87,13],[56,20,87,18,"undefined"],[56,29,87,2],[56,31,87,29],[57,0,89,4],[57,10,89,10,"routes"],[57,16,89,16],[57,19,89,19,"remaining"],[57,28,89,28],[57,29,90,7,"split"],[57,34,89,19],[57,35,90,13],[57,38,89,19],[57,40,91,7,"filter"],[57,46,89,19],[57,47,91,14,"Boolean"],[57,54,89,19],[57,56,92,7,"map"],[57,59,89,19],[57,60,92,11],[57,70,92,12,"segment"],[57,77,92,11],[57,79,92,21,"i"],[57,80,92,11],[57,82,92,24,"self"],[57,86,92,11],[57,88,92,33],[58,0,93,8],[58,12,93,14,"name"],[58,16,93,18],[58,19,93,21,"decodeURIComponent"],[58,37,93,39],[58,38,93,40,"segment"],[58,45,93,39],[58,46,93,8],[60,0,95,8],[60,12,95,12,"i"],[60,13,95,13],[60,18,95,18,"self"],[60,22,95,22],[60,23,95,23,"length"],[60,29,95,18],[60,32,95,32],[60,33,95,8],[60,35,95,35],[61,0,96,10],[61,17,96,17],[62,0,96,19,"name"],[62,12,96,19,"name"],[62,16,96,23],[62,18,96,19,"name"],[62,22,96,17],[63,0,96,25,"params"],[63,12,96,25,"params"],[63,18,96,31],[63,20,96,33,"parseQueryParams"],[63,36,96,49],[63,37,96,50,"path"],[63,41,96,49],[64,0,96,17],[64,11,96,10],[65,0,97,9],[67,0,99,8],[67,15,99,15],[68,0,99,17,"name"],[68,10,99,17,"name"],[68,14,99,21],[68,16,99,17,"name"],[69,0,99,15],[69,9,99,8],[70,0,100,7],[70,7,89,19],[70,8,89,4],[72,0,102,4],[72,10,102,8,"routes"],[72,16,102,14],[72,17,102,15,"length"],[72,23,102,4],[72,25,102,23],[73,0,103,6],[73,15,103,13,"createNestedStateObject"],[73,38,103,36],[73,39,103,37,"routes"],[73,45,103,36],[73,47,103,45,"initialRoutes"],[73,60,103,36],[73,61,103,6],[74,0,104,5],[76,0,106,4],[76,13,106,11,"undefined"],[76,22,106,4],[77,0,107,3],[79,0,110,2],[79,8,110,8,"configs"],[79,15,110,15],[79,18,110,18],[79,26,110,19],[79,28,110,18],[79,30,111,5,"concat"],[79,36,110,18],[79,82,112,9,"Object"],[79,88,112,15],[79,89,112,16,"keys"],[79,93,112,9],[79,94,112,21,"screens"],[79,101,112,9],[79,103,112,30,"map"],[79,106,112,9],[79,107,112,34],[79,117,112,35,"key"],[79,120,112,34],[80,0,112,34],[80,13,113,8,"createNormalizedConfigs"],[80,36,113,31],[80,37,114,10,"legacy"],[80,43,113,31],[80,45,115,10,"key"],[80,48,113,31],[80,50,116,10,"screens"],[80,57,113,31],[80,59,117,10],[80,61,113,31],[80,63,118,10,"initialRoutes"],[80,76,113,31],[80,77,112,34],[81,0,112,34],[81,5,112,9],[81,6,110,18],[81,9,122,5,"sort"],[81,13,110,18],[81,14,122,10],[81,24,122,11,"a"],[81,25,122,10],[81,27,122,14,"b"],[81,28,122,10],[81,30,122,20],[82,0,129,6],[82,10,129,10,"a"],[82,11,129,11],[82,12,129,12,"pattern"],[82,19,129,10],[82,24,129,24,"b"],[82,25,129,25],[82,26,129,26,"pattern"],[82,33,129,6],[82,35,129,35],[83,0,130,8],[83,15,130,15,"b"],[83,16,130,16],[83,17,130,17,"routeNames"],[83,27,130,15],[83,28,130,28,"join"],[83,32,130,15],[83,33,130,33],[83,36,130,15],[83,38,130,38,"localeCompare"],[83,51,130,15],[83,52,130,52,"a"],[83,53,130,53],[83,54,130,54,"routeNames"],[83,64,130,52],[83,65,130,65,"join"],[83,69,130,52],[83,70,130,70],[83,73,130,52],[83,74,130,15],[83,75,130,8],[84,0,131,7],[86,0,135,6],[86,10,135,10,"a"],[86,11,135,11],[86,12,135,12,"pattern"],[86,19,135,10],[86,20,135,20,"startsWith"],[86,30,135,10],[86,31,135,31,"b"],[86,32,135,32],[86,33,135,33,"pattern"],[86,40,135,10],[86,41,135,6],[86,43,135,43],[87,0,136,8],[87,15,136,15],[87,16,136,16],[87,17,136,8],[88,0,137,7],[90,0,139,6],[90,10,139,10,"b"],[90,11,139,11],[90,12,139,12,"pattern"],[90,19,139,10],[90,20,139,20,"startsWith"],[90,30,139,10],[90,31,139,31,"a"],[90,32,139,32],[90,33,139,33,"pattern"],[90,40,139,10],[90,41,139,6],[90,43,139,43],[91,0,140,8],[91,15,140,15],[91,16,140,8],[92,0,141,7],[94,0,143,6],[94,10,143,12,"aParts"],[94,16,143,18],[94,19,143,21,"a"],[94,20,143,22],[94,21,143,23,"pattern"],[94,28,143,21],[94,29,143,31,"split"],[94,34,143,21],[94,35,143,37],[94,38,143,21],[94,39,143,6],[95,0,144,6],[95,10,144,12,"bParts"],[95,16,144,18],[95,19,144,21,"b"],[95,20,144,22],[95,21,144,23,"pattern"],[95,28,144,21],[95,29,144,31,"split"],[95,34,144,21],[95,35,144,37],[95,38,144,21],[95,39,144,6],[96,0,146,6],[96,10,146,12,"aWildcardIndex"],[96,24,146,26],[96,27,146,29,"aParts"],[96,33,146,35],[96,34,146,36,"indexOf"],[96,41,146,29],[96,42,146,44],[96,45,146,29],[96,46,146,6],[97,0,147,6],[97,10,147,12,"bWildcardIndex"],[97,24,147,26],[97,27,147,29,"bParts"],[97,33,147,35],[97,34,147,36,"indexOf"],[97,41,147,29],[97,42,147,44],[97,45,147,29],[97,46,147,6],[99,0,150,6],[99,10,150,10,"aWildcardIndex"],[99,24,150,24],[99,29,150,29],[99,30,150,30],[99,31,150,10],[99,35,150,35,"bWildcardIndex"],[99,49,150,49],[99,54,150,54],[99,55,150,55],[99,56,150,6],[99,58,150,58],[100,0,151,8],[100,15,151,15],[100,16,151,16],[100,17,151,8],[101,0,152,7],[103,0,154,6],[103,10,154,10,"aWildcardIndex"],[103,24,154,24],[103,29,154,29],[103,30,154,30],[103,31,154,10],[103,35,154,35,"bWildcardIndex"],[103,49,154,49],[103,54,154,54],[103,55,154,55],[103,56,154,6],[103,58,154,58],[104,0,155,8],[104,15,155,15],[104,16,155,8],[105,0,156,7],[107,0,158,6],[107,10,158,10,"aWildcardIndex"],[107,24,158,24],[107,29,158,29,"bWildcardIndex"],[107,43,158,6],[107,45,158,45],[108,0,161,8],[108,15,161,15,"bParts"],[108,21,161,21],[108,22,161,22,"length"],[108,28,161,15],[108,31,161,31,"aParts"],[108,37,161,37],[108,38,161,38,"length"],[108,44,161,8],[109,0,162,7],[111,0,166,6],[111,13,166,13,"bWildcardIndex"],[111,27,166,27],[111,30,166,30,"aWildcardIndex"],[111,44,166,6],[112,0,167,5],[112,5,110,18],[112,6,110,2],[114,0,170,2,"configs"],[114,4,170,2,"configs"],[114,11,170,9],[114,12,170,10,"reduce"],[114,18,170,2],[114,19,170,46],[114,29,170,47,"acc"],[114,32,170,46],[114,34,170,52,"config"],[114,40,170,46],[114,42,170,63],[115,0,171,4],[115,10,171,8,"acc"],[115,13,171,11],[115,14,171,12,"config"],[115,20,171,18],[115,21,171,19,"pattern"],[115,28,171,11],[115,29,171,4],[115,31,171,29],[116,0,172,6],[116,12,172,12,"a"],[116,13,172,13],[116,16,172,16,"acc"],[116,19,172,19],[116,20,172,20,"config"],[116,26,172,26],[116,27,172,27,"pattern"],[116,34,172,19],[116,35,172,16],[116,36,172,36,"routeNames"],[116,46,172,6],[117,0,173,6],[117,12,173,12,"b"],[117,13,173,13],[117,16,173,16,"config"],[117,22,173,22],[117,23,173,23,"routeNames"],[117,33,173,6],[118,0,177,6],[118,12,177,12,"intersects"],[118,22,177,22],[118,25,178,8,"a"],[118,26,178,9],[118,27,178,10,"length"],[118,33,178,8],[118,36,178,19,"b"],[118,37,178,20],[118,38,178,21,"length"],[118,44,178,8],[118,47,179,12,"b"],[118,48,179,13],[118,49,179,14,"every"],[118,54,179,12],[118,55,179,20],[118,65,179,21,"it"],[118,67,179,20],[118,69,179,25,"i"],[118,70,179,20],[119,0,179,20],[119,17,179,31,"a"],[119,18,179,32],[119,19,179,33,"i"],[119,20,179,32],[119,21,179,31],[119,26,179,40,"it"],[119,28,179,20],[120,0,179,20],[120,9,179,12],[120,10,178,8],[120,13,180,12,"a"],[120,14,180,13],[120,15,180,14,"every"],[120,20,180,12],[120,21,180,20],[120,31,180,21,"it"],[120,33,180,20],[120,35,180,25,"i"],[120,36,180,20],[121,0,180,20],[121,17,180,31,"b"],[121,18,180,32],[121,19,180,33,"i"],[121,20,180,32],[121,21,180,31],[121,26,180,40,"it"],[121,28,180,20],[122,0,180,20],[122,9,180,12],[122,10,177,6],[124,0,182,6],[124,12,182,10],[124,13,182,11,"intersects"],[124,23,182,6],[124,25,182,23],[125,0,183,8],[125,16,183,14],[125,20,183,18,"Error"],[125,25,183,14],[125,93,185,12,"config"],[125,99,185,18],[125,100,185,19,"pattern"],[125,107,183,14],[125,135,186,33,"a"],[125,136,186,34],[125,137,186,35,"join"],[125,141,186,33],[125,142,186,40],[125,147,186,33],[125,148,183,14],[125,163,186,56,"b"],[125,164,186,57],[125,165,186,58,"join"],[125,169,186,56],[125,170,187,12],[125,175,186,56],[125,176,183,14],[125,252,183,8],[126,0,190,7],[127,0,191,5],[129,0,193,4],[129,13,193,11],[129,36,193,25,"acc"],[129,39,193,11],[129,75,194,7,"config"],[129,81,194,13],[129,82,194,14,"pattern"],[129,89,193,11],[129,91,194,24,"config"],[129,97,193,11],[129,99,193,4],[130,0,196,3],[130,5,170,2],[130,7,196,5],[130,9,170,2],[132,0,198,2],[132,8,198,6,"remaining"],[132,17,198,15],[132,22,198,20],[132,25,198,2],[132,27,198,25],[133,0,201,4],[133,10,201,10,"match"],[133,15,201,15],[133,18,201,18,"configs"],[133,25,201,25],[133,26,201,26,"find"],[133,30,201,18],[133,31,202,6],[133,41,202,7,"config"],[133,47,202,6],[134,0,202,6],[134,15,203,8,"config"],[134,21,203,14],[134,22,203,15,"path"],[134,26,203,8],[134,31,203,24],[134,33,203,8],[134,37,204,8,"config"],[134,43,204,14],[134,44,204,15,"routeNames"],[134,54,204,8],[134,55,204,26,"every"],[134,60,204,8],[134,61,206,10],[134,71,206,11,"name"],[134,75,206,10],[135,0,206,10],[137,0,206,10],[137,17,206,20],[137,36,206,21,"configs"],[137,43,206,28],[137,44,206,29,"find"],[137,48,206,21],[137,49,206,34],[137,59,206,35,"c"],[137,60,206,34],[138,0,206,34],[138,19,206,41,"c"],[138,20,206,42],[138,21,206,43,"screen"],[138,27,206,41],[138,32,206,54,"name"],[138,36,206,34],[139,0,206,34],[139,11,206,21],[139,12,206,20],[139,25,206,21],[139,39,206,61,"path"],[139,43,206,20],[139,44,206,10],[140,0,206,10],[140,9,204,8],[140,10,202,6],[141,0,202,6],[141,7,201,18],[141,8,201,4],[143,0,210,4],[143,10,210,8,"match"],[143,15,210,4],[143,17,210,15],[144,0,211,6],[144,15,211,13,"createNestedStateObject"],[144,38,211,36],[144,39,212,8,"match"],[144,44,212,13],[144,45,212,14,"routeNames"],[144,55,212,8],[144,56,212,25,"map"],[144,59,212,8],[144,60,212,29],[144,70,212,30,"name"],[144,74,212,29],[144,76,212,36,"i"],[144,77,212,29],[144,79,212,39,"self"],[144,83,212,29],[144,85,212,48],[145,0,213,10],[145,14,213,14,"i"],[145,15,213,15],[145,20,213,20,"self"],[145,24,213,24],[145,25,213,25,"length"],[145,31,213,20],[145,34,213,34],[145,35,213,10],[145,37,213,37],[146,0,214,12],[146,19,214,19],[147,0,214,21,"name"],[147,14,214,21,"name"],[147,18,214,25],[147,20,214,21,"name"],[147,24,214,19],[148,0,214,27,"params"],[148,14,214,27,"params"],[148,20,214,33],[148,22,214,35,"parseQueryParams"],[148,38,214,51],[148,39,214,52,"path"],[148,43,214,51],[148,45,214,58,"match"],[148,50,214,63],[148,51,214,64,"parse"],[148,56,214,51],[149,0,214,19],[149,13,214,12],[150,0,215,11],[152,0,217,10],[152,17,217,17],[153,0,217,19,"name"],[153,12,217,19,"name"],[153,16,217,23],[153,18,217,19,"name"],[154,0,217,17],[154,11,217,10],[155,0,218,9],[155,9,212,8],[155,10,211,36],[155,12,219,8,"initialRoutes"],[155,25,211,36],[155,26,211,6],[156,0,221,5],[158,0,223,4],[158,13,223,11,"undefined"],[158,22,223,4],[159,0,224,3],[161,0,226,2],[161,8,226,6,"result"],[161,14,226,2],[162,0,227,2],[162,8,227,6,"current"],[162,15,227,2],[164,0,229,2],[164,8,229,6,"legacy"],[164,14,229,12],[164,19,229,17],[164,24,229,2],[164,26,229,24],[165,0,229,24],[165,33,232,38,"matchAgainstConfigs"],[165,52,232,57],[165,53,233,6,"remaining"],[165,62,232,57],[165,64,234,6,"configs"],[165,71,234,13],[165,72,234,14,"map"],[165,75,234,6],[165,76,234,18],[165,86,234,19,"c"],[165,87,234,18],[166,0,234,18],[166,47,235,11,"c"],[166,48,234,18],[167,0,237,8,"regex"],[167,10,237,8,"regex"],[167,15,237,13],[167,17,237,15,"c"],[167,18,237,16],[167,19,237,17,"regex"],[167,24,237,15],[167,27,237,25],[167,31,237,29,"RegExp"],[167,37,237,25],[167,38,237,36,"c"],[167,39,237,37],[167,40,237,38,"regex"],[167,45,237,36],[167,46,237,44,"source"],[167,52,237,36],[167,55,237,53],[167,58,237,25],[167,59,237,15],[167,62,237,60,"undefined"],[168,0,234,18],[169,0,234,18],[169,7,234,6],[169,8,232,57],[169,9,229,24],[170,0,229,24],[170,10,232,12,"routes"],[170,17,229,24],[170,41,232,12,"routes"],[170,47,229,24],[171,0,229,24],[171,10,232,20,"remainingPath"],[171,23,229,24],[171,47,232,20,"remainingPath"],[171,60,229,24],[173,0,241,4],[173,10,241,8,"routes"],[173,17,241,14],[173,22,241,19,"undefined"],[173,31,241,4],[173,33,241,30],[174,0,243,6,"current"],[174,8,243,6,"current"],[174,15,243,13],[174,18,243,16,"createNestedStateObject"],[174,41,243,39],[174,42,243,40,"routes"],[174,49,243,39],[174,51,243,48,"initialRoutes"],[174,64,243,39],[174,65,243,6],[175,0,244,6,"remaining"],[175,8,244,6,"remaining"],[175,17,244,15],[175,20,244,18,"remainingPath"],[175,33,244,6],[176,0,245,6,"result"],[176,8,245,6,"result"],[176,14,245,12],[176,17,245,15,"current"],[176,24,245,6],[177,0,246,5],[178,0,247,3],[178,5,229,2],[178,11,247,9],[179,0,250,4],[179,13,250,11,"remaining"],[179,22,250,4],[179,24,250,22],[180,0,250,22],[180,36,251,38,"matchAgainstConfigs"],[180,55,251,57],[180,56,251,58,"remaining"],[180,65,251,57],[180,67,251,69,"configs"],[180,74,251,57],[180,75,250,22],[181,0,250,22],[181,12,251,12,"routes"],[181,20,250,22],[181,45,251,12,"routes"],[181,51,250,22],[182,0,250,22],[182,12,251,20,"remainingPath"],[182,26,250,22],[182,51,251,20,"remainingPath"],[182,64,250,22],[184,0,253,6,"remaining"],[184,8,253,6,"remaining"],[184,17,253,15],[184,20,253,18,"remainingPath"],[184,34,253,6],[186,0,256,6],[186,12,256,10,"routes"],[186,20,256,16],[186,25,256,21,"undefined"],[186,34,256,6],[186,36,256,32],[187,0,257,8],[187,14,257,14,"segments"],[187,22,257,22],[187,25,257,25,"remaining"],[187,34,257,34],[187,35,257,35,"split"],[187,40,257,25],[187,41,257,41],[187,44,257,25],[187,45,257,8],[188,0,259,8,"routes"],[188,10,259,8,"routes"],[188,18,259,14],[188,21,259,17],[188,22,259,18],[189,0,259,20,"name"],[189,12,259,20,"name"],[189,16,259,24],[189,18,259,26,"decodeURIComponent"],[189,36,259,44],[189,37,259,45,"segments"],[189,45,259,53],[189,46,259,54],[189,47,259,53],[189,48,259,44],[190,0,259,18],[190,11,259,17],[190,12,259,8],[191,0,260,8,"segments"],[191,10,260,8,"segments"],[191,18,260,16],[191,19,260,17,"shift"],[191,24,260,8],[192,0,261,8,"remaining"],[192,10,261,8,"remaining"],[192,19,261,17],[192,22,261,20,"segments"],[192,30,261,28],[192,31,261,29,"join"],[192,35,261,20],[192,36,261,34],[192,39,261,20],[192,40,261,8],[193,0,262,7],[195,0,264,6],[195,12,264,12,"state"],[195,17,264,17],[195,20,264,20,"createNestedStateObject"],[195,43,264,43],[195,44,264,44,"routes"],[195,52,264,43],[195,54,264,52,"initialRoutes"],[195,67,264,43],[195,68,264,6],[197,0,266,6],[197,12,266,10,"current"],[197,19,266,6],[197,21,266,19],[198,0,266,19],[200,0,268,8],[200,29,268,15,"current"],[200,36,268,8],[200,49,268,15],[200,58,268,24,"routes"],[200,64,268,15],[200,65,268,31,"current"],[200,72,268,38],[200,73,268,39,"index"],[200,78,268,31],[200,82,268,48],[200,83,268,15],[200,85,268,51,"state"],[200,90,268,8],[200,92,268,58],[201,0,268,58],[203,0,269,10,"current"],[203,12,269,10,"current"],[203,19,269,17],[203,22,269,20,"current"],[203,29,269,27],[203,30,269,28,"routes"],[203,36,269,20],[203,37,269,35,"current"],[203,44,269,42],[203,45,269,43,"index"],[203,50,269,35],[203,54,269,52],[203,55,269,20],[203,57,269,55,"state"],[203,62,269,10],[204,0,270,9],[206,0,272,9,"current"],[206,10,272,9,"current"],[206,17,272,8],[206,18,272,51,"routes"],[206,24,272,8],[206,25,273,10],[206,39,273,10,"current"],[206,46,273,17],[206,55,273,10],[206,77,273,19,"index"],[206,82,273,10],[206,87,273,28],[206,88,272,8],[206,90,274,10,"state"],[206,95,272,8],[206,98,274,18,"state"],[206,103,272,8],[207,0,275,7],[207,9,266,6],[207,15,275,13],[208,0,276,8,"result"],[208,10,276,8,"result"],[208,16,276,14],[208,19,276,17,"state"],[208,24,276,8],[209,0,277,7],[211,0,279,6,"current"],[211,8,279,6,"current"],[211,15,279,13],[211,18,279,16,"state"],[211,23,279,6],[212,0,280,5],[213,0,281,3],[215,0,283,2],[215,8,283,6,"current"],[215,15,283,13],[215,19,283,17],[215,23,283,6],[215,27,283,25,"result"],[215,33,283,31],[215,37,283,35],[215,41,283,2],[215,43,283,41],[216,0,284,4],[216,13,284,11,"undefined"],[216,22,284,4],[217,0,285,3],[219,0,287,2],[219,8,287,8,"route"],[219,13,287,13],[219,16,287,16,"findFocusedRoute"],[219,32,287,32],[219,33,287,33,"current"],[219,40,287,32],[219,41,287,2],[220,0,288,2],[220,8,288,8,"params"],[220,14,288,14],[220,17,288,17,"parseQueryParams"],[220,33,288,33],[220,34,289,4,"path"],[220,38,288,33],[220,40,290,4,"findParseConfigForRoute"],[220,63,290,27],[220,64,290,28,"route"],[220,69,290,33],[220,70,290,34,"name"],[220,74,290,27],[220,76,290,40,"configs"],[220,83,290,27],[220,84,288,33],[220,85,288,2],[222,0,293,2],[222,8,293,6,"params"],[222,14,293,2],[222,16,293,14],[223,0,295,4,"route"],[223,6,295,4,"route"],[223,11,295,9],[223,12,295,10,"params"],[223,18,295,4],[223,53,295,24,"route"],[223,58,295,29],[223,59,295,30,"params"],[223,65,295,4],[223,68,295,41,"params"],[223,74,295,4],[224,0,296,3],[226,0,298,2],[226,11,298,9,"result"],[226,17,298,2],[227,0,299,1],[229,0,301,0],[229,6,301,6,"joinPaths"],[229,15,301,15],[229,18,301,18],[229,27,301,6,"joinPaths"],[229,36,301,18],[230,0,301,18],[232,0,301,18],[232,38,301,22,"paths"],[232,43,301,18],[233,0,301,22,"paths"],[233,6,301,22,"paths"],[233,11,301,18],[234,0,301,18],[236,0,301,18],[236,11,302,2],[236,20,302,3],[236,22,302,2],[236,24,303,5,"concat"],[236,30,302,2],[236,77,303,15,"paths"],[236,82,303,20],[236,83,303,21,"map"],[236,86,303,15],[236,87,303,25],[236,97,303,26,"p"],[236,98,303,25],[237,0,303,25],[237,13,303,32,"p"],[237,14,303,33],[237,15,303,34,"split"],[237,20,303,32],[237,21,303,40],[237,24,303,32],[237,25,303,25],[238,0,303,25],[238,5,303,15],[238,6,302,2],[238,9,304,5,"filter"],[238,15,302,2],[238,16,304,12,"Boolean"],[238,23,302,2],[238,25,305,5,"join"],[238,29,302,2],[238,30,305,10],[238,33,302,2],[238,34,301,18],[239,0,301,18],[239,3,301,0],[241,0,307,0],[241,6,307,6,"matchAgainstConfigs"],[241,25,307,25],[241,28,307,28],[241,37,307,6,"matchAgainstConfigs"],[241,56,307,28],[241,57,307,29,"remaining"],[241,66,307,28],[241,68,307,48,"configs"],[241,75,307,28],[241,77,307,75],[242,0,308,2],[242,8,308,6,"routes"],[242,14,308,2],[243,0,309,2],[243,8,309,6,"remainingPath"],[243,21,309,19],[243,24,309,22,"remaining"],[243,33,309,2],[245,0,307,75],[245,31,312,13,"config"],[245,37,307,75],[246,0,313,4],[246,10,313,8],[246,11,313,9,"config"],[246,17,313,15],[246,18,313,16,"regex"],[246,23,313,4],[246,25,313,23],[247,0,314,6],[248,0,315,5],[250,0,317,4],[250,10,317,10,"match"],[250,15,317,15],[250,18,317,18,"remainingPath"],[250,31,317,31],[250,32,317,32,"match"],[250,37,317,18],[250,38,317,38,"config"],[250,44,317,44],[250,45,317,45,"regex"],[250,50,317,18],[250,51,317,4],[252,0,320,4],[252,10,320,8,"match"],[252,15,320,4],[252,17,320,15],[253,0,320,15],[255,0,321,6],[255,12,321,12,"matchedParams"],[255,25,321,25],[255,47,321,28,"config"],[255,53,321,34],[255,54,321,35,"pattern"],[255,61,321,25],[255,82,321,28],[255,98,322,10,"split"],[255,103,321,28],[255,104,322,16],[255,107,321,28],[255,109,323,9,"filter"],[255,115,321,28],[255,116,323,16],[255,126,323,17,"p"],[255,127,323,16],[256,0,323,16],[256,17,323,23,"p"],[256,18,323,24],[256,19,323,25,"startsWith"],[256,29,323,23],[256,30,323,36],[256,33,323,23],[256,34,323,16],[257,0,323,16],[257,9,321,28],[257,11,324,9,"reduce"],[257,17,321,28],[257,18,325,10],[257,28,325,11,"acc"],[257,31,325,10],[257,33,325,16,"p"],[257,34,325,10],[257,36,325,19,"i"],[257,37,325,10],[258,0,325,10],[258,17,326,12],[258,40,326,26,"acc"],[258,43,326,12],[258,79,328,15,"p"],[258,80,326,12],[258,82,328,19,"match"],[258,87,328,24],[258,88,328,26],[258,89,328,27,"i"],[258,90,328,28],[258,93,328,31],[258,94,328,26],[258,98,328,36],[258,99,328,24],[258,100,328,19],[258,101,328,39,"replace"],[258,108,328,19],[258,109,328,47],[258,113,328,19],[258,115,328,53],[258,117,328,19],[258,118,326,12],[258,120,325,10],[259,0,325,10],[259,9,321,28],[259,11,330,10],[259,13,321,28],[259,14,321,6],[260,0,333,6,"routes"],[260,8,333,6,"routes"],[260,14,333,12],[260,17,333,15,"config"],[260,23,333,21],[260,24,333,22,"routeNames"],[260,34,333,15],[260,35,333,33,"map"],[260,38,333,15],[260,39,333,37],[260,49,333,38,"name"],[260,53,333,37],[260,55,333,47],[261,0,333,47],[263,0,334,8],[263,14,334,14,"config"],[263,20,334,20],[263,23,334,23,"configs"],[263,30,334,30],[263,31,334,31,"find"],[263,35,334,23],[263,36,334,36],[263,46,334,37,"c"],[263,47,334,36],[264,0,334,36],[264,19,334,43,"c"],[264,20,334,44],[264,21,334,45,"screen"],[264,27,334,43],[264,32,334,56,"name"],[264,36,334,36],[265,0,334,36],[265,11,334,23],[265,12,334,8],[266,0,335,8],[266,14,335,14,"params"],[266,20,335,20],[266,23,335,23,"config"],[266,29,335,20],[266,65,335,23,"config"],[266,71,335,29],[266,72,335,31,"path"],[266,76,335,20],[266,97,335,23],[266,110,336,12,"split"],[266,115,335,23],[266,116,336,18],[266,119,335,23],[266,121,337,11,"filter"],[266,127,335,23],[266,128,337,18],[266,138,337,19,"p"],[266,139,337,18],[267,0,337,18],[267,19,337,25,"p"],[267,20,337,26],[267,21,337,27,"startsWith"],[267,31,337,25],[267,32,337,38],[267,35,337,25],[267,36,337,18],[268,0,337,18],[268,11,335,23],[268,13,338,11,"reduce"],[268,19,335,23],[268,20,338,39],[268,30,338,40,"acc"],[268,33,338,39],[268,35,338,45,"p"],[268,36,338,39],[268,38,338,51],[269,0,339,12],[269,16,339,18,"value"],[269,21,339,23],[269,24,339,26,"matchedParams"],[269,37,339,39],[269,38,339,40,"p"],[269,39,339,39],[269,40,339,12],[271,0,341,12],[271,16,341,16,"value"],[271,21,341,12],[271,23,341,23],[272,0,341,23],[274,0,342,14],[274,18,342,20,"key"],[274,21,342,23],[274,24,342,26,"p"],[274,25,342,27],[274,26,342,28,"replace"],[274,33,342,26],[274,34,342,36],[274,38,342,26],[274,40,342,42],[274,42,342,26],[274,44,342,46,"replace"],[274,51,342,26],[274,52,342,54],[274,57,342,26],[274,59,342,61],[274,61,342,26],[274,62,342,14],[275,0,343,14,"acc"],[275,14,343,14,"acc"],[275,17,343,17],[275,18,343,18,"key"],[275,21,343,17],[275,22,343,14],[275,25,343,25],[275,42,343,25,"config"],[275,48,343,31],[275,49,343,32,"parse"],[275,54,343,25],[275,81,343,40,"key"],[275,84,343,25],[275,88,343,47,"config"],[275,94,343,53],[275,95,343,54,"parse"],[275,100,343,47],[275,101,343,60,"key"],[275,104,343,47],[275,106,343,65,"value"],[275,111,343,47],[275,112,343,25],[275,115,343,74,"value"],[275,120,343,14],[276,0,344,13],[278,0,346,12],[278,19,346,19,"acc"],[278,22,346,12],[279,0,347,11],[279,11,335,23],[279,13,347,13],[279,15,335,23],[279,16,335,8],[281,0,349,8],[281,14,349,12,"params"],[281,20,349,18],[281,24,349,22,"Object"],[281,30,349,28],[281,31,349,29,"keys"],[281,35,349,22],[281,36,349,34,"params"],[281,42,349,22],[281,44,349,42,"length"],[281,50,349,8],[281,52,349,50],[282,0,350,10],[282,19,350,17],[283,0,350,19,"name"],[283,14,350,19,"name"],[283,18,350,23],[283,20,350,19,"name"],[283,24,350,17],[284,0,350,25,"params"],[284,14,350,25,"params"],[284,20,350,31],[284,22,350,25,"params"],[285,0,350,17],[285,13,350,10],[286,0,351,9],[288,0,353,8],[288,17,353,15],[289,0,353,17,"name"],[289,12,353,17,"name"],[289,16,353,21],[289,18,353,17,"name"],[290,0,353,15],[290,11,353,8],[291,0,354,7],[291,9,333,15],[291,10,333,6],[292,0,356,6,"remainingPath"],[292,8,356,6,"remainingPath"],[292,21,356,19],[292,24,356,22,"remainingPath"],[292,37,356,35],[292,38,356,36,"replace"],[292,45,356,22],[292,46,356,44,"match"],[292,51,356,49],[292,52,356,50],[292,53,356,49],[292,54,356,22],[292,56,356,54],[292,58,356,22],[292,59,356,6],[293,0,358,6],[294,0,359,5],[295,0,307,75],[297,0,312,2],[297,57,312,23,"configs"],[297,64,312,2],[297,104,312,32],[298,0,312,32],[298,10,312,13,"config"],[298,16,312,32],[300,0,312,32],[300,23,312,13,"config"],[300,29,312,32],[302,0,312,32],[302,31,314,6],[303,0,312,32],[303,28,358,6],[304,0,360,3],[306,0,362,2],[306,11,362,9],[307,0,362,11,"routes"],[307,6,362,11,"routes"],[307,12,362,17],[307,14,362,11,"routes"],[307,20,362,9],[308,0,362,19,"remainingPath"],[308,6,362,19,"remainingPath"],[308,19,362,32],[308,21,362,19,"remainingPath"],[309,0,362,9],[309,5,362,2],[310,0,363,1],[310,3,307,0],[312,0,365,0],[312,6,365,6,"createNormalizedConfigs"],[312,29,365,29],[312,32,365,32],[312,41,365,6,"createNormalizedConfigs"],[312,64,365,32],[312,65,366,2,"legacy"],[312,71,365,32],[312,73,367,2,"screen"],[312,79,365,32],[312,81,368,2,"routeConfig"],[312,92,365,32],[312,94,372,20],[313,0,372,20],[313,8,369,2,"routeNames"],[313,18,372,20],[313,89,369,25],[313,91,372,20],[314,0,372,20],[314,8,370,2,"initials"],[314,16,372,20],[315,0,372,20],[315,8,371,2,"parentPattern"],[315,21,372,20],[316,0,373,2],[316,8,373,8,"configs"],[316,15,373,30],[316,18,373,33],[316,20,373,2],[317,0,375,2,"routeNames"],[317,4,375,2,"routeNames"],[317,14,375,12],[317,15,375,13,"push"],[317,19,375,2],[317,20,375,18,"screen"],[317,26,375,2],[318,0,377,2],[318,8,377,8,"config"],[318,14,377,14],[318,17,377,17,"routeConfig"],[318,28,377,28],[318,29,377,29,"screen"],[318,35,377,28],[318,36,377,2],[320,0,379,2],[320,8,379,6],[320,15,379,13,"config"],[320,21,379,6],[320,26,379,24],[320,34,379,2],[320,36,379,34],[321,0,381,4],[321,10,381,10,"pattern"],[321,17,381,17],[321,20,381,20,"parentPattern"],[321,33,381,33],[321,36,381,36,"joinPaths"],[321,45,381,45],[321,46,381,46,"parentPattern"],[321,59,381,45],[321,61,381,61,"config"],[321,67,381,45],[321,68,381,33],[321,71,381,71,"config"],[321,77,381,4],[322,0,383,4,"configs"],[322,6,383,4,"configs"],[322,13,383,11],[322,14,383,12,"push"],[322,18,383,4],[322,19,383,17,"createConfigItem"],[322,35,383,33],[322,36,383,34,"legacy"],[322,42,383,33],[322,44,383,42,"screen"],[322,50,383,33],[322,52,383,50,"routeNames"],[322,62,383,33],[322,64,383,62,"pattern"],[322,71,383,33],[322,73,383,71,"config"],[322,79,383,33],[322,80,383,4],[323,0,384,3],[323,5,379,2],[323,11,384,9],[323,15,384,13],[323,22,384,20,"config"],[323,28,384,13],[323,33,384,31],[323,41,384,9],[323,43,384,41],[324,0,385,4],[324,10,385,8,"pattern"],[324,18,385,4],[326,0,390,4],[326,10,390,8],[326,17,390,15,"config"],[326,23,390,21],[326,24,390,22,"path"],[326,28,390,8],[326,33,390,31],[326,41,390,4],[326,43,390,41],[327,0,391,6],[327,12,391,10,"legacy"],[327,18,391,6],[327,20,391,18],[328,0,392,8,"pattern"],[328,10,392,8,"pattern"],[328,18,392,15],[328,21,393,10,"config"],[328,27,393,16],[328,28,393,17,"exact"],[328,33,393,10],[328,38,393,27],[328,42,393,10],[328,46,393,35,"parentPattern"],[328,59,393,10],[328,62,394,14,"joinPaths"],[328,71,394,23],[328,72,394,24,"parentPattern"],[328,85,394,23],[328,87,394,39,"config"],[328,93,394,45],[328,94,394,46,"path"],[328,98,394,23],[328,99,393,10],[328,102,395,14,"config"],[328,108,395,20],[328,109,395,21,"path"],[328,113,392,8],[329,0,396,7],[329,9,391,6],[329,15,396,13],[330,0,397,8],[330,14,397,12,"config"],[330,20,397,18],[330,21,397,19,"exact"],[330,26,397,12],[330,30,397,28,"config"],[330,36,397,34],[330,37,397,35,"path"],[330,41,397,28],[330,46,397,44,"undefined"],[330,55,397,8],[330,57,397,55],[331,0,398,10],[331,18,398,16],[331,22,398,20,"Error"],[331,27,398,16],[331,28,399,12],[331,178,398,16],[331,179,398,10],[332,0,401,9],[334,0,403,8,"pattern"],[334,10,403,8,"pattern"],[334,18,403,15],[334,21,404,10,"config"],[334,27,404,16],[334,28,404,17,"exact"],[334,33,404,10],[334,38,404,27],[334,42,404,10],[334,45,405,14,"joinPaths"],[334,54,405,23],[334,55,405,24,"parentPattern"],[334,68,405,37],[334,72,405,41],[334,74,405,23],[334,76,405,45,"config"],[334,82,405,51],[334,83,405,52,"path"],[334,87,405,45],[334,91,405,60],[334,93,405,23],[334,94,404,10],[334,97,406,14,"config"],[334,103,406,20],[334,104,406,21,"path"],[334,108,406,14],[334,112,406,29],[334,114,403,8],[335,0,407,7],[337,0,409,6,"configs"],[337,8,409,6,"configs"],[337,15,409,13],[337,16,409,14,"push"],[337,20,409,6],[337,21,410,8,"createConfigItem"],[337,37,410,24],[337,38,411,10,"legacy"],[337,44,410,24],[337,46,412,10,"screen"],[337,52,410,24],[337,54,413,10,"routeNames"],[337,64,410,24],[337,66,414,10,"pattern"],[337,74,410,24],[337,76,415,10,"config"],[337,82,415,16],[337,83,415,17,"path"],[337,87,410,24],[337,89,416,10,"config"],[337,95,416,16],[337,96,416,17,"parse"],[337,101,410,24],[337,102,409,6],[338,0,419,5],[340,0,421,4],[340,10,421,8,"config"],[340,16,421,14],[340,17,421,15,"screens"],[340,24,421,4],[340,26,421,24],[341,0,423,6],[341,12,423,10,"config"],[341,18,423,16],[341,19,423,17,"initialRouteName"],[341,35,423,6],[341,37,423,35],[342,0,424,8,"initials"],[342,10,424,8,"initials"],[342,18,424,16],[342,19,424,17,"push"],[342,23,424,8],[342,24,424,22],[343,0,425,10,"initialRouteName"],[343,12,425,10,"initialRouteName"],[343,28,425,26],[343,30,425,28,"config"],[343,36,425,34],[343,37,425,35,"initialRouteName"],[343,53,424,22],[344,0,426,10,"connectedRoutes"],[344,12,426,10,"connectedRoutes"],[344,27,426,25],[344,29,426,27,"Object"],[344,35,426,33],[344,36,426,34,"keys"],[344,40,426,27],[344,41,426,39,"config"],[344,47,426,45],[344,48,426,46,"screens"],[344,55,426,27],[345,0,424,22],[345,11,424,8],[346,0,428,7],[348,0,430,6,"Object"],[348,8,430,6,"Object"],[348,14,430,12],[348,15,430,13,"keys"],[348,19,430,6],[348,20,430,18,"config"],[348,26,430,24],[348,27,430,25,"screens"],[348,34,430,6],[348,36,430,34,"forEach"],[348,43,430,6],[348,44,430,42],[348,54,430,43,"nestedConfig"],[348,66,430,42],[348,68,430,60],[349,0,430,60],[351,0,431,8],[351,14,431,14,"result"],[351,20,431,20],[351,23,431,23,"createNormalizedConfigs"],[351,46,431,46],[351,47,432,10,"legacy"],[351,53,431,46],[351,55,433,10,"nestedConfig"],[351,67,431,46],[351,69,434,10,"config"],[351,75,434,16],[351,76,434,17,"screens"],[351,83,431,46],[351,85,435,10,"routeNames"],[351,95,431,46],[351,97,436,10,"initials"],[351,105,431,46],[351,120,437,10,"pattern"],[351,128,431,46],[351,152,437,21,"parentPattern"],[351,165,431,46],[351,166,431,8],[352,0,440,8,"configs"],[352,10,440,8,"configs"],[352,17,440,15],[352,18,440,16,"push"],[352,22,440,8],[352,29,440,8,"configs"],[352,36,440,15],[352,71,440,24,"result"],[352,77,440,15],[352,79,440,8],[353,0,441,7],[353,9,430,6],[354,0,442,5],[355,0,443,3],[357,0,445,2,"routeNames"],[357,4,445,2,"routeNames"],[357,14,445,12],[357,15,445,13,"pop"],[357,18,445,2],[358,0,447,2],[358,11,447,9,"configs"],[358,18,447,2],[359,0,448,1],[359,3,365,0],[361,0,450,0],[361,6,450,6,"createConfigItem"],[361,22,450,22],[361,25,450,25],[361,34,450,6,"createConfigItem"],[361,50,450,25],[361,51,451,2,"legacy"],[361,57,450,25],[361,59,452,2,"screen"],[361,65,450,25],[361,67,453,2,"routeNames"],[361,77,450,25],[361,79,454,2,"pattern"],[361,86,450,25],[361,88,455,2,"path"],[361,92,450,25],[361,94,456,2,"parse"],[361,99,450,25],[361,101,457,18],[362,0,459,2,"pattern"],[362,4,459,2,"pattern"],[362,11,459,9],[362,14,459,12,"pattern"],[362,21,459,19],[362,22,459,20,"split"],[362,27,459,12],[362,28,459,26],[362,31,459,12],[362,33,459,31,"filter"],[362,39,459,12],[362,40,459,38,"Boolean"],[362,47,459,12],[362,49,459,47,"join"],[362,53,459,12],[362,54,459,52],[362,57,459,12],[362,58,459,2],[363,0,461,2],[363,8,461,8,"regex"],[363,13,461,13],[363,16,461,16,"pattern"],[363,23,461,23],[363,26,462,6],[363,30,462,10,"RegExp"],[363,36,462,6],[363,44,463,13,"pattern"],[363,51,463,20],[363,52,464,11,"split"],[363,57,463,13],[363,58,464,17],[363,61,463,13],[363,63,465,11,"map"],[363,66,463,13],[363,67,465,15],[363,77,465,16,"it"],[363,79,465,15],[363,81,465,23],[364,0,466,12],[364,10,466,16,"legacy"],[364,16,466,22],[364,20,466,26,"it"],[364,22,466,28],[364,27,466,33],[364,30,466,12],[364,32,466,38],[365,0,467,14],[365,14,467,20],[365,18,467,24,"Error"],[365,23,467,20],[365,24,468,16],[365,168,467,20],[365,169,467,14],[366,0,470,13],[368,0,472,12],[368,10,472,16,"it"],[368,12,472,18],[368,13,472,19,"startsWith"],[368,23,472,16],[368,24,472,30],[368,27,472,16],[368,28,472,12],[368,30,472,36],[369,0,473,14],[369,32,473,35,"it"],[369,34,473,37],[369,35,473,38,"endsWith"],[369,43,473,35],[369,44,473,47],[369,47,473,35],[369,51,473,54],[369,54,473,35],[369,57,473,60],[369,59,473,14],[370,0,474,13],[372,0,476,12],[372,14,476,22,"it"],[372,16,476,24],[372,21,476,29],[372,24,476,22],[372,27,476,35],[372,31,476,22],[372,34,476,42],[372,67,476,49,"it"],[372,69,476,42],[372,70,476,12],[373,0,477,11],[373,5,463,13],[373,7,478,11,"join"],[373,11,463,13],[373,12,478,16],[373,14,463,13],[373,15,462,6],[373,22,461,23],[373,25,480,6,"undefined"],[373,34,461,2],[374,0,482,2],[374,11,482,9],[375,0,483,4,"screen"],[375,6,483,4,"screen"],[375,12,483,10],[375,14,483,4,"screen"],[375,20,482,9],[376,0,484,4,"regex"],[376,6,484,4,"regex"],[376,11,484,9],[376,13,484,4,"regex"],[376,18,482,9],[377,0,485,4,"pattern"],[377,6,485,4,"pattern"],[377,13,485,11],[377,15,485,4,"pattern"],[377,22,482,9],[378,0,486,4,"path"],[378,6,486,4,"path"],[378,10,486,8],[378,12,486,4,"path"],[378,16,482,9],[379,0,488,4,"routeNames"],[379,6,488,4,"routeNames"],[379,16,488,14],[379,51,488,20,"routeNames"],[379,61,488,14],[379,62,482,9],[380,0,489,4,"parse"],[380,6,489,4,"parse"],[380,11,489,9],[380,13,489,4,"parse"],[381,0,482,9],[381,5,482,2],[382,0,491,1],[382,3,450,0],[384,0,493,0],[384,6,493,6,"findParseConfigForRoute"],[384,29,493,29],[384,32,493,32],[384,41,493,6,"findParseConfigForRoute"],[384,64,493,32],[384,65,494,2,"routeName"],[384,74,493,32],[384,76,495,2,"flatConfig"],[384,86,493,32],[384,88,496,30],[385,0,497,2],[385,58,497,23,"flatConfig"],[385,68,497,2],[385,111,497,35],[386,0,497,35],[386,10,497,13,"config"],[386,16,497,35],[388,0,498,4],[388,10,498,8,"routeName"],[388,19,498,17],[388,24,498,22,"config"],[388,30,498,28],[388,31,498,29,"routeNames"],[388,41,498,22],[388,42,498,40,"config"],[388,48,498,46],[388,49,498,47,"routeNames"],[388,59,498,40],[388,60,498,58,"length"],[388,66,498,40],[388,69,498,67],[388,70,498,22],[388,71,498,4],[388,73,498,71],[389,0,499,6],[389,15,499,13,"config"],[389,21,499,19],[389,22,499,20,"parse"],[389,27,499,6],[390,0,500,5],[391,0,501,3],[393,0,503,2],[393,11,503,9,"undefined"],[393,20,503,2],[394,0,504,1],[394,3,493,0],[396,0,507,0],[396,6,507,6,"findInitialRoute"],[396,22,507,22],[396,25,507,25],[396,34,507,6,"findInitialRoute"],[396,50,507,25],[396,51,508,2,"routeName"],[396,60,507,25],[396,62,509,2,"initialRoutes"],[396,75,507,25],[396,77,510,25],[397,0,511,2],[397,58,511,23,"initialRoutes"],[397,71,511,2],[397,114,511,38],[398,0,511,38],[398,10,511,13,"config"],[398,16,511,38],[400,0,512,4],[400,10,512,8,"config"],[400,16,512,14],[400,17,512,15,"connectedRoutes"],[400,32,512,8],[400,33,512,31,"includes"],[400,41,512,8],[400,42,512,40,"routeName"],[400,51,512,8],[400,52,512,4],[400,54,512,52],[401,0,513,6],[401,15,513,13,"config"],[401,21,513,19],[401,22,513,20,"initialRouteName"],[401,38,513,13],[401,43,513,41,"routeName"],[401,52,513,13],[401,55,514,10,"undefined"],[401,64,513,13],[401,67,515,10,"config"],[401,73,515,16],[401,74,515,17,"initialRouteName"],[401,90,513,6],[402,0,516,5],[403,0,517,3],[405,0,518,2],[405,11,518,9,"undefined"],[405,20,518,2],[406,0,519,1],[406,3,507,0],[408,0,523,0],[408,6,523,6,"createStateObject"],[408,23,523,23],[408,26,523,26],[408,35,523,6,"createStateObject"],[408,52,523,26],[408,53,524,2,"initialRoute"],[408,65,523,26],[408,67,525,2,"route"],[408,72,523,26],[408,74,526,2,"isEmpty"],[408,81,523,26],[408,83,527,19],[409,0,528,2],[409,8,528,6,"isEmpty"],[409,15,528,2],[409,17,528,15],[410,0,529,4],[410,10,529,8,"initialRoute"],[410,22,529,4],[410,24,529,22],[411,0,530,6],[411,15,530,13],[412,0,531,8,"index"],[412,10,531,8,"index"],[412,15,531,13],[412,17,531,15],[412,18,530,13],[413,0,532,8,"routes"],[413,10,532,8,"routes"],[413,16,532,14],[413,18,532,16],[413,19,532,17],[414,0,532,19,"name"],[414,12,532,19,"name"],[414,16,532,23],[414,18,532,25,"initialRoute"],[415,0,532,17],[415,11,532,16],[415,13,532,41,"route"],[415,18,532,16],[416,0,530,13],[416,9,530,6],[417,0,534,5],[417,7,529,4],[417,13,534,11],[418,0,535,6],[418,15,535,13],[419,0,536,8,"routes"],[419,10,536,8,"routes"],[419,16,536,14],[419,18,536,16],[419,19,536,17,"route"],[419,24,536,16],[420,0,535,13],[420,9,535,6],[421,0,538,5],[422,0,539,3],[422,5,528,2],[422,11,539,9],[423,0,540,4],[423,10,540,8,"initialRoute"],[423,22,540,4],[423,24,540,22],[424,0,541,6],[424,15,541,13],[425,0,542,8,"index"],[425,10,542,8,"index"],[425,15,542,13],[425,17,542,15],[425,18,541,13],[426,0,543,8,"routes"],[426,10,543,8,"routes"],[426,16,543,14],[426,18,543,16],[426,19,543,17],[427,0,543,19,"name"],[427,12,543,19,"name"],[427,16,543,23],[427,18,543,25,"initialRoute"],[428,0,543,17],[428,11,543,16],[428,45,543,46,"route"],[428,50,543,16],[429,0,543,53,"state"],[429,12,543,53,"state"],[429,17,543,58],[429,19,543,60],[430,0,543,62,"routes"],[430,14,543,62,"routes"],[430,20,543,68],[430,22,543,70],[431,0,543,60],[432,0,543,16],[433,0,541,13],[433,9,541,6],[434,0,545,5],[434,7,540,4],[434,13,545,11],[435,0,546,6],[435,15,546,13],[436,0,547,8,"routes"],[436,10,547,8,"routes"],[436,16,547,14],[436,18,547,16],[436,51,547,22,"route"],[436,56,547,16],[437,0,547,29,"state"],[437,12,547,29,"state"],[437,17,547,34],[437,19,547,36],[438,0,547,38,"routes"],[438,14,547,38,"routes"],[438,20,547,44],[438,22,547,46],[439,0,547,36],[440,0,547,16],[441,0,546,13],[441,9,546,6],[442,0,549,5],[443,0,550,3],[444,0,551,1],[444,3,523,0],[446,0,553,0],[446,6,553,6,"createNestedStateObject"],[446,29,553,29],[446,32,553,32],[446,41,553,6,"createNestedStateObject"],[446,64,553,32],[446,65,554,2,"routes"],[446,71,553,32],[446,73,555,2,"initialRoutes"],[446,86,553,32],[446,88,556,5],[447,0,557,2],[447,8,557,6,"state"],[447,13,557,2],[448,0,558,2],[448,8,558,6,"route"],[448,13,558,11],[448,16,558,14,"routes"],[448,22,558,20],[448,23,558,21,"shift"],[448,28,558,14],[448,30,558,2],[449,0,559,2],[449,8,559,6,"initialRoute"],[449,20,559,18],[449,23,559,21,"findInitialRoute"],[449,39,559,37],[449,40,559,38,"route"],[449,45,559,43],[449,46,559,44,"name"],[449,50,559,37],[449,52,559,50,"initialRoutes"],[449,65,559,37],[449,66,559,2],[450,0,561,2,"state"],[450,4,561,2,"state"],[450,9,561,7],[450,12,561,10,"createStateObject"],[450,29,561,27],[450,30,561,28,"initialRoute"],[450,42,561,27],[450,44,561,42,"route"],[450,49,561,27],[450,51,561,49,"routes"],[450,57,561,55],[450,58,561,56,"length"],[450,64,561,49],[450,69,561,67],[450,70,561,27],[450,71,561,2],[452,0,563,2],[452,8,563,6,"routes"],[452,14,563,12],[452,15,563,13,"length"],[452,21,563,6],[452,24,563,22],[452,25,563,2],[452,27,563,25],[453,0,564,4],[453,10,564,8,"nestedState"],[453,21,564,19],[453,24,564,22,"state"],[453,29,564,4],[455,0,566,4],[455,13,566,12,"route"],[455,18,566,17],[455,21,566,20,"routes"],[455,27,566,26],[455,28,566,27,"shift"],[455,33,566,20],[455,35,566,4],[455,37,566,52],[456,0,567,6,"initialRoute"],[456,8,567,6,"initialRoute"],[456,20,567,18],[456,23,567,21,"findInitialRoute"],[456,39,567,37],[456,40,567,38,"route"],[456,45,567,43],[456,46,567,44,"name"],[456,50,567,37],[456,52,567,50,"initialRoutes"],[456,65,567,37],[456,66,567,6],[457,0,569,6],[457,12,569,12,"nestedStateIndex"],[457,28,569,28],[457,31,570,8,"nestedState"],[457,42,570,19],[457,43,570,20,"index"],[457,48,570,8],[457,52,570,29,"nestedState"],[457,63,570,40],[457,64,570,41,"routes"],[457,70,570,29],[457,71,570,48,"length"],[457,77,570,29],[457,80,570,57],[457,81,569,6],[458,0,572,6,"nestedState"],[458,8,572,6,"nestedState"],[458,19,572,17],[458,20,572,18,"routes"],[458,26,572,6],[458,27,572,25,"nestedStateIndex"],[458,43,572,6],[458,45,572,43,"state"],[458,50,572,6],[458,53,572,51,"createStateObject"],[458,70,572,68],[458,71,573,8,"initialRoute"],[458,83,572,68],[458,85,574,8,"route"],[458,90,572,68],[458,92,575,8,"routes"],[458,98,575,14],[458,99,575,15,"length"],[458,105,575,8],[458,110,575,26],[458,111,572,68],[458,112,572,6],[460,0,578,6],[460,12,578,10,"routes"],[460,18,578,16],[460,19,578,17,"length"],[460,25,578,10],[460,28,578,26],[460,29,578,6],[460,31,578,29],[461,0,579,8,"nestedState"],[461,10,579,8,"nestedState"],[461,21,579,19],[461,24,579,22,"nestedState"],[461,35,579,33],[461,36,579,34,"routes"],[461,42,579,22],[461,43,579,41,"nestedStateIndex"],[461,59,579,22],[461,61,580,11,"state"],[461,66,579,8],[462,0,581,7],[463,0,582,5],[464,0,583,3],[466,0,585,2],[466,11,585,9,"state"],[466,16,585,2],[467,0,586,1],[467,3,553,0],[469,0,588,0],[469,6,588,6,"findFocusedRoute"],[469,22,588,22],[469,25,588,25],[469,34,588,6,"findFocusedRoute"],[469,50,588,25],[469,51,588,26,"state"],[469,56,588,25],[469,58,588,50],[470,0,588,50],[472,0,589,2],[472,8,589,6,"current"],[472,15,589,39],[472,18,589,42,"state"],[472,23,589,2],[474,0,591,2],[474,24,591,9,"current"],[474,31,591,2],[474,44,591,9],[474,54,591,18,"routes"],[474,60,591,9],[474,61,591,25,"current"],[474,68,591,32],[474,69,591,33,"index"],[474,74,591,25],[474,78,591,42],[474,79,591,9],[474,81,591,45,"state"],[474,86,591,2],[474,88,591,52],[475,0,591,52],[477,0,593,4,"current"],[477,6,593,4,"current"],[477,13,593,11],[477,16,593,14,"current"],[477,23,593,21],[477,24,593,22,"routes"],[477,30,593,14],[477,31,593,29,"current"],[477,38,593,36],[477,39,593,37,"index"],[477,44,593,29],[477,48,593,46],[477,49,593,14],[477,51,593,49,"state"],[477,56,593,4],[478,0,594,3],[480,0,596,2],[480,8,596,8,"route"],[480,13,596,13],[480,16,596,17,"current"],[480,23,596,16],[480,24,596,59,"routes"],[480,30,596,16],[480,31,597,4],[480,45,597,4,"current"],[480,52,597,11],[480,61,597,4],[480,83,597,13,"index"],[480,88,597,4],[480,93,597,22],[480,94,596,16],[480,95,596,2],[481,0,600,2],[481,11,600,9,"route"],[481,16,600,2],[482,0,601,1],[482,3,588,0],[484,0,603,0],[484,6,603,6,"parseQueryParams"],[484,22,603,22],[484,25,603,25],[484,34,603,6,"parseQueryParams"],[484,50,603,25],[484,51,604,2,"path"],[484,55,603,25],[484,57,605,2,"parseConfig"],[484,68,603,25],[484,70,606,5],[485,0,607,2],[485,8,607,8,"query"],[485,13,607,13],[485,16,607,16,"path"],[485,20,607,20],[485,21,607,21,"split"],[485,26,607,16],[485,27,607,27],[485,30,607,16],[485,32,607,32],[485,33,607,16],[485,34,607,2],[486,0,608,2],[486,8,608,8,"params"],[486,14,608,14],[486,17,608,17,"queryString"],[486,28,608,28],[486,29,608,29,"parse"],[486,34,608,17],[486,35,608,35,"query"],[486,40,608,17],[486,41,608,2],[488,0,610,2],[488,8,610,6,"parseConfig"],[488,19,610,2],[488,21,610,19],[489,0,611,4,"Object"],[489,6,611,4,"Object"],[489,12,611,10],[489,13,611,11,"keys"],[489,17,611,4],[489,18,611,16,"params"],[489,24,611,4],[489,26,611,24,"forEach"],[489,33,611,4],[489,34,611,32],[489,44,611,33,"name"],[489,48,611,32],[489,50,611,42],[490,0,612,6],[490,12,612,10,"parseConfig"],[490,23,612,21],[490,24,612,22,"name"],[490,28,612,21],[490,29,612,10],[490,33,612,31],[490,40,612,38,"params"],[490,46,612,44],[490,47,612,45,"name"],[490,51,612,44],[490,52,612,31],[490,57,612,55],[490,65,612,6],[490,67,612,65],[491,0,613,8,"params"],[491,10,613,8,"params"],[491,16,613,14],[491,17,613,15,"name"],[491,21,613,14],[491,22,613,8],[491,25,613,23,"parseConfig"],[491,36,613,34],[491,37,613,35,"name"],[491,41,613,34],[491,42,613,23],[491,43,613,41,"params"],[491,49,613,47],[491,50,613,48,"name"],[491,54,613,47],[491,55,613,23],[491,56,613,8],[492,0,614,7],[493,0,615,5],[493,7,611,4],[494,0,616,3],[496,0,618,2],[496,11,618,9,"Object"],[496,17,618,15],[496,18,618,16,"keys"],[496,22,618,9],[496,23,618,21,"params"],[496,29,618,9],[496,31,618,29,"length"],[496,37,618,9],[496,40,618,38,"params"],[496,46,618,9],[496,49,618,47,"undefined"],[496,58,618,2],[497,0,619,1],[497,3,603,0]],"functionMap":{"names":["<global>","getStateFromPath","remaining.split.filter.map$argument_0","Object.keys.map$argument_0","concat.sort$argument_0","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","configs.find$argument_0","config.routeNames.every$argument_0","match.routeNames.map$argument_0","configs.map$argument_0","joinPaths","paths.map$argument_0","matchAgainstConfigs","<anonymous>","config.routeNames.map$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","pattern.split.map$argument_0","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject","findFocusedRoute","parseQueryParams"],"mappings":"AAA;eC6D;WC8B;ODQ;kCEY;SFO;UGG;KH6C;8CIG;oBCS,sBD;oBEC,sBF;GJgB;MOM;UCI,wBD,wBC,OD;SPC;6BSK;STM;kBUgB;QVI;CD6D;kBYE;yBCE,mBD;cZE;4BcE;gBCgB,wBD;UCE;cDI;qCEI;oCRC,wBQ;kBDG,wBC;uCDC;WCS;OFO;CdS;gCiBE;0CCiE;ODW;CjBO;yBmBE;eCe;WDY;CnBc;gCqBE;CrBW;yBsBG;CtBY;0BuBI;CvB4B;gCwBE;CxBiC;yByBE;CzBa;yB0BE;gCRQ;KQI;C1BI"}},"type":"js/module"}]}