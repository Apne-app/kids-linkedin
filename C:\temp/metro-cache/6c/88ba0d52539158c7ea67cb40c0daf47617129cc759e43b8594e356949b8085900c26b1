{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"color","data":{"isAsync":false}},{"name":"react-native","data":{"isAsync":false}},{"name":"./DarkTheme","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = overlay;\n\n  var _color = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"color\"));\n\n  var _reactNative = _$$_REQUIRE(_dependencyMap[2], \"react-native\");\n\n  var _DarkTheme = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"./DarkTheme\"));\n\n  function overlay() {\n    var elevation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var surfaceColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _DarkTheme.default.colors.surface;\n\n    if (elevation instanceof _reactNative.Animated.Value) {\n      var inputRange = [0, 1, 2, 3, 8, 24];\n      return elevation.interpolate({\n        inputRange: inputRange,\n        outputRange: inputRange.map(function (elevation) {\n          return calculateColor(surfaceColor, elevation);\n        })\n      });\n    }\n\n    return calculateColor(surfaceColor, elevation);\n  }\n\n  function calculateColor(surfaceColor, elevation) {\n    var overlayTransparency;\n\n    if (elevation >= 1 && elevation <= 24) {\n      overlayTransparency = elevationOverlayTransparency[elevation];\n    } else if (elevation > 24) {\n      overlayTransparency = elevationOverlayTransparency[24];\n    } else {\n      overlayTransparency = elevationOverlayTransparency[1];\n    }\n\n    return (0, _color.default)(surfaceColor).mix((0, _color.default)('white'), overlayTransparency * 0.01).hex();\n  }\n\n  var elevationOverlayTransparency = {\n    1: 5,\n    2: 7,\n    3: 8,\n    4: 9,\n    5: 10,\n    6: 11,\n    7: 11.5,\n    8: 12,\n    9: 12.5,\n    10: 13,\n    11: 13.5,\n    12: 14,\n    13: 14.25,\n    14: 14.5,\n    15: 14.75,\n    16: 15,\n    17: 15.12,\n    18: 15.24,\n    19: 15.36,\n    20: 15.48,\n    21: 15.6,\n    22: 15.72,\n    23: 15.84,\n    24: 16\n  };\n});","lineCount":72,"map":[[9,0,1,0],[11,0,2,0],[13,0,3,0],[15,0,5,15],[15,11,5,24,"overlay"],[15,18,5,15],[15,21,8,2],[16,0,8,2],[16,8,6,2,"elevation"],[16,17,8,2],[16,88,6,39],[16,89,8,2],[17,0,8,2],[17,8,7,2,"surfaceColor"],[17,20,8,2],[17,91,7,25,"DarkTheme"],[17,110,7,35,"colors"],[17,116,7,25],[17,117,7,42,"surface"],[17,124,8,2],[19,0,9,2],[19,8,9,6,"elevation"],[19,17,9,15],[19,29,9,27,"Animated"],[19,51,9,36,"Value"],[19,56,9,2],[19,58,9,43],[20,0,10,4],[20,10,10,10,"inputRange"],[20,20,10,20],[20,23,10,23],[20,24,10,24],[20,25,10,23],[20,27,10,27],[20,28,10,23],[20,30,10,30],[20,31,10,23],[20,33,10,33],[20,34,10,23],[20,36,10,36],[20,37,10,23],[20,39,10,39],[20,41,10,23],[20,42,10,4],[21,0,11,4],[21,13,11,11,"elevation"],[21,22,11,20],[21,23,11,21,"interpolate"],[21,34,11,11],[21,35,11,33],[22,0,12,6,"inputRange"],[22,8,12,6,"inputRange"],[22,18,12,16],[22,20,12,6,"inputRange"],[22,30,11,33],[23,0,13,6,"outputRange"],[23,8,13,6,"outputRange"],[23,19,13,17],[23,21,13,19,"inputRange"],[23,31,13,29],[23,32,13,30,"map"],[23,35,13,19],[23,36,13,34],[23,46,13,35,"elevation"],[23,55,13,34],[23,57,13,49],[24,0,14,8],[24,17,14,15,"calculateColor"],[24,31,14,29],[24,32,14,30,"surfaceColor"],[24,44,14,29],[24,46,14,44,"elevation"],[24,55,14,29],[24,56,14,8],[25,0,15,7],[25,9,13,19],[26,0,11,33],[26,7,11,11],[26,8,11,4],[27,0,17,3],[29,0,18,2],[29,11,18,9,"calculateColor"],[29,25,18,23],[29,26,18,24,"surfaceColor"],[29,38,18,23],[29,40,18,38,"elevation"],[29,49,18,23],[29,50,18,2],[30,0,19,1],[32,0,20,0],[32,11,20,9,"calculateColor"],[32,25,20,0],[32,26,20,24,"surfaceColor"],[32,38,20,0],[32,40,20,46,"elevation"],[32,49,20,0],[32,51,20,65],[33,0,21,2],[33,8,21,6,"overlayTransparency"],[33,27,21,2],[35,0,22,2],[35,8,22,6,"elevation"],[35,17,22,15],[35,21,22,19],[35,22,22,6],[35,26,22,24,"elevation"],[35,35,22,33],[35,39,22,37],[35,41,22,2],[35,43,22,41],[36,0,23,4,"overlayTransparency"],[36,6,23,4,"overlayTransparency"],[36,25,23,23],[36,28,23,26,"elevationOverlayTransparency"],[36,56,23,54],[36,57,23,55,"elevation"],[36,66,23,54],[36,67,23,4],[37,0,24,3],[37,5,22,2],[37,11,24,9],[37,15,24,13,"elevation"],[37,24,24,22],[37,27,24,25],[37,29,24,9],[37,31,24,29],[38,0,25,4,"overlayTransparency"],[38,6,25,4,"overlayTransparency"],[38,25,25,23],[38,28,25,26,"elevationOverlayTransparency"],[38,56,25,54],[38,57,25,55],[38,59,25,54],[38,60,25,4],[39,0,26,3],[39,5,24,9],[39,11,26,9],[40,0,27,4,"overlayTransparency"],[40,6,27,4,"overlayTransparency"],[40,25,27,23],[40,28,27,26,"elevationOverlayTransparency"],[40,56,27,54],[40,57,27,55],[40,58,27,54],[40,59,27,4],[41,0,28,3],[43,0,29,2],[43,11,29,9],[43,31,29,15,"surfaceColor"],[43,43,29,9],[43,45,30,5,"mix"],[43,48,29,9],[43,49,30,9],[43,69,30,15],[43,76,30,9],[43,77,29,9],[43,79,30,25,"overlayTransparency"],[43,98,30,44],[43,101,30,47],[43,105,29,9],[43,107,31,5,"hex"],[43,110,29,9],[43,112,29,2],[44,0,32,1],[46,0,33,0],[46,6,33,6,"elevationOverlayTransparency"],[46,34,33,60],[46,37,33,63],[47,0,34,2],[47,7,34,5],[47,8,33,63],[48,0,35,2],[48,7,35,5],[48,8,33,63],[49,0,36,2],[49,7,36,5],[49,8,33,63],[50,0,37,2],[50,7,37,5],[50,8,33,63],[51,0,38,2],[51,7,38,5],[51,9,33,63],[52,0,39,2],[52,7,39,5],[52,9,33,63],[53,0,40,2],[53,7,40,5],[53,11,33,63],[54,0,41,2],[54,7,41,5],[54,9,33,63],[55,0,42,2],[55,7,42,5],[55,11,33,63],[56,0,43,2],[56,8,43,6],[56,10,33,63],[57,0,44,2],[57,8,44,6],[57,12,33,63],[58,0,45,2],[58,8,45,6],[58,10,33,63],[59,0,46,2],[59,8,46,6],[59,13,33,63],[60,0,47,2],[60,8,47,6],[60,12,33,63],[61,0,48,2],[61,8,48,6],[61,13,33,63],[62,0,49,2],[62,8,49,6],[62,10,33,63],[63,0,50,2],[63,8,50,6],[63,13,33,63],[64,0,51,2],[64,8,51,6],[64,13,33,63],[65,0,52,2],[65,8,52,6],[65,13,33,63],[66,0,53,2],[66,8,53,6],[66,13,33,63],[67,0,54,2],[67,8,54,6],[67,12,33,63],[68,0,55,2],[68,8,55,6],[68,13,33,63],[69,0,56,2],[69,8,56,6],[69,13,33,63],[70,0,57,2],[70,8,57,6],[71,0,33,63],[71,3,33,0]],"functionMap":{"names":["<global>","overlay","inputRange.map$argument_0","calculateColor"],"mappings":"AAA;eCI;kCCQ;ODE;CDI;AGC;CHY"}},"type":"js/module"}]}