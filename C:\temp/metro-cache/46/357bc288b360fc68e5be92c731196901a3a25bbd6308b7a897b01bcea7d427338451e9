{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"@babel/runtime/regenerator","data":{"isAsync":false}},{"name":"@unimodules/core","data":{"isAsync":false}},{"name":"./ExpoFontLoader","data":{"isAsync":false}},{"name":"./Font.types","data":{"isAsync":false}},{"name":"./FontLoader","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.processFontFamily = processFontFamily;\n  exports.isLoaded = isLoaded;\n  exports.isLoading = isLoading;\n  exports.loadAsync = loadAsync;\n  exports.unloadAllAsync = unloadAllAsync;\n  exports.unloadAsync = unloadAsync;\n  Object.defineProperty(exports, \"FontDisplay\", {\n    enumerable: true,\n    get: function get() {\n      return _Font.FontDisplay;\n    }\n  });\n\n  var _regenerator = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/regenerator\"));\n\n  var _core = _$$_REQUIRE(_dependencyMap[2], \"@unimodules/core\");\n\n  var _ExpoFontLoader = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"./ExpoFontLoader\"));\n\n  var _Font = _$$_REQUIRE(_dependencyMap[4], \"./Font.types\");\n\n  var _FontLoader = _$$_REQUIRE(_dependencyMap[5], \"./FontLoader\");\n\n  var loaded = {};\n  var loadPromises = {};\n\n  function processFontFamily(fontFamily) {\n    if (!fontFamily || !(0, _FontLoader.fontFamilyNeedsScoping)(fontFamily)) {\n      return fontFamily;\n    }\n\n    if (!isLoaded(fontFamily)) {\n      if (__DEV__) {\n        if (isLoading(fontFamily)) {\n          console.error(\"You started loading the font \\\"\" + fontFamily + \"\\\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.\");\n        } else {\n          console.error(\"fontFamily \\\"\" + fontFamily + \"\\\" is not a system font and has not been loaded through Font.loadAsync.\\n\\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\\n- If this is a custom font, be sure to load it with Font.loadAsync.\");\n        }\n      }\n\n      return 'System';\n    }\n\n    return \"ExpoFont-\" + (0, _FontLoader.getNativeFontName)(fontFamily);\n  }\n\n  function isLoaded(fontFamily) {\n    return fontFamily in loaded;\n  }\n\n  function isLoading(fontFamily) {\n    return fontFamily in loadPromises;\n  }\n\n  function loadAsync(fontFamilyOrFontMap, source) {\n    var fontMap, names;\n    return _regenerator.default.async(function loadAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof fontFamilyOrFontMap === 'object')) {\n              _context.next = 8;\n              break;\n            }\n\n            if (!source) {\n              _context.next = 3;\n              break;\n            }\n\n            throw new _core.CodedError(\"ERR_FONT_API\", \"No fontFamily can be used for the provided source: \" + source + \". The second argument of `loadAsync()` can only be used with a `string` value as the first argument.\");\n\n          case 3:\n            fontMap = fontFamilyOrFontMap;\n            names = Object.keys(fontMap);\n            _context.next = 7;\n            return _regenerator.default.awrap(Promise.all(names.map(function (name) {\n              return loadFontInNamespaceAsync(name, fontMap[name]);\n            })));\n\n          case 7:\n            return _context.abrupt(\"return\");\n\n          case 8:\n            _context.next = 10;\n            return _regenerator.default.awrap(loadFontInNamespaceAsync(fontFamilyOrFontMap, source));\n\n          case 10:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function loadFontInNamespaceAsync(fontFamily, source) {\n    var asset;\n    return _regenerator.default.async(function loadFontInNamespaceAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (source) {\n              _context3.next = 2;\n              break;\n            }\n\n            throw new _core.CodedError(\"ERR_FONT_SOURCE\", \"Cannot load null or undefined font source: { \\\"\" + fontFamily + \"\\\": \" + source + \" }. Expected asset of type `FontSource` for fontFamily of name: \\\"\" + fontFamily + \"\\\"\");\n\n          case 2:\n            if (!loaded[fontFamily]) {\n              _context3.next = 4;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 4:\n            if (!loadPromises[fontFamily]) {\n              _context3.next = 6;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", loadPromises[fontFamily]);\n\n          case 6:\n            asset = (0, _FontLoader.getAssetForSource)(source);\n\n            loadPromises[fontFamily] = function _callee() {\n              return _regenerator.default.async(function _callee$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _context2.prev = 0;\n                      _context2.next = 3;\n                      return _regenerator.default.awrap((0, _FontLoader.loadSingleFontAsync)(fontFamily, asset));\n\n                    case 3:\n                      loaded[fontFamily] = true;\n\n                    case 4:\n                      _context2.prev = 4;\n                      delete loadPromises[fontFamily];\n                      return _context2.finish(4);\n\n                    case 7:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, null, null, [[0,, 4, 7]], Promise);\n            }();\n\n            _context3.next = 10;\n            return _regenerator.default.awrap(loadPromises[fontFamily]);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function unloadAllAsync() {\n    var _i, _Object$keys, fontFamily;\n\n    return _regenerator.default.async(function unloadAllAsync$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (_ExpoFontLoader.default.unloadAllAsync) {\n              _context4.next = 2;\n              break;\n            }\n\n            throw new _core.UnavailabilityError('expo-font', 'unloadAllAsync');\n\n          case 2:\n            if (!Object.keys(loadPromises).length) {\n              _context4.next = 4;\n              break;\n            }\n\n            throw new _core.CodedError(\"ERR_UNLOAD\", \"Cannot unload fonts while they're still loading: \" + Object.keys(loadPromises).join(', '));\n\n          case 4:\n            for (_i = 0, _Object$keys = Object.keys(loaded); _i < _Object$keys.length; _i++) {\n              fontFamily = _Object$keys[_i];\n              delete loaded[fontFamily];\n            }\n\n            _context4.next = 7;\n            return _regenerator.default.awrap(_ExpoFontLoader.default.unloadAllAsync());\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function unloadAsync(fontFamilyOrFontMap, options) {\n    var fontMap, names;\n    return _regenerator.default.async(function unloadAsync$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (_ExpoFontLoader.default.unloadAsync) {\n              _context5.next = 2;\n              break;\n            }\n\n            throw new _core.UnavailabilityError('expo-font', 'unloadAsync');\n\n          case 2:\n            if (!(typeof fontFamilyOrFontMap === 'object')) {\n              _context5.next = 10;\n              break;\n            }\n\n            if (!options) {\n              _context5.next = 5;\n              break;\n            }\n\n            throw new _core.CodedError(\"ERR_FONT_API\", \"No fontFamily can be used for the provided options: \" + options + \". The second argument of `unloadAsync()` can only be used with a `string` value as the first argument.\");\n\n          case 5:\n            fontMap = fontFamilyOrFontMap;\n            names = Object.keys(fontMap);\n            _context5.next = 9;\n            return _regenerator.default.awrap(Promise.all(names.map(function (name) {\n              return unloadFontInNamespaceAsync(name, fontMap[name]);\n            })));\n\n          case 9:\n            return _context5.abrupt(\"return\");\n\n          case 10:\n            _context5.next = 12;\n            return _regenerator.default.awrap(unloadFontInNamespaceAsync(fontFamilyOrFontMap, options));\n\n          case 12:\n            return _context5.abrupt(\"return\", _context5.sent);\n\n          case 13:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function unloadFontInNamespaceAsync(fontFamily, options) {\n    var nativeFontName;\n    return _regenerator.default.async(function unloadFontInNamespaceAsync$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            if (loaded[fontFamily]) {\n              _context6.next = 4;\n              break;\n            }\n\n            return _context6.abrupt(\"return\");\n\n          case 4:\n            delete loaded[fontFamily];\n\n          case 5:\n            nativeFontName = (0, _FontLoader.getNativeFontName)(fontFamily);\n\n            if (nativeFontName) {\n              _context6.next = 8;\n              break;\n            }\n\n            throw new _core.CodedError(\"ERR_FONT_FAMILY\", \"Cannot unload an empty name\");\n\n          case 8:\n            _context6.next = 10;\n            return _regenerator.default.awrap(_ExpoFontLoader.default.unloadAsync(nativeFontName, options));\n\n          case 10:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});","lineCount":301,"map":[[22,0,1,0],[24,0,2,0],[26,0,3,0],[28,0,4,0],[30,0,5,0],[30,6,5,6,"loaded"],[30,12,5,12],[30,15,5,15],[30,17,5,0],[31,0,6,0],[31,6,6,6,"loadPromises"],[31,18,6,18],[31,21,6,21],[31,23,6,0],[33,0,17,7],[33,11,17,16,"processFontFamily"],[33,28,17,7],[33,29,17,34,"fontFamily"],[33,39,17,7],[33,41,17,46],[34,0,18,4],[34,8,18,8],[34,9,18,9,"fontFamily"],[34,19,18,8],[34,23,18,23],[34,24,18,24],[34,64,18,47,"fontFamily"],[34,74,18,24],[34,75,18,4],[34,77,18,60],[35,0,19,8],[35,13,19,15,"fontFamily"],[35,23,19,8],[36,0,20,5],[38,0,21,4],[38,8,21,8],[38,9,21,9,"isLoaded"],[38,17,21,17],[38,18,21,18,"fontFamily"],[38,28,21,17],[38,29,21,4],[38,31,21,31],[39,0,22,8],[39,10,22,12,"__DEV__"],[39,17,22,8],[39,19,22,21],[40,0,23,12],[40,12,23,16,"isLoading"],[40,21,23,25],[40,22,23,26,"fontFamily"],[40,32,23,25],[40,33,23,12],[40,35,23,39],[41,0,24,16,"console"],[41,10,24,16,"console"],[41,17,24,23],[41,18,24,24,"error"],[41,23,24,16],[41,60,24,63,"fontFamily"],[41,70,24,16],[42,0,25,13],[42,9,23,12],[42,15,26,17],[43,0,27,16,"console"],[43,10,27,16,"console"],[43,17,27,23],[43,18,27,24,"error"],[43,23,27,16],[43,42,27,45,"fontFamily"],[43,52,27,16],[44,0,30,13],[45,0,31,9],[47,0,32,8],[47,13,32,15],[47,21,32,8],[48,0,33,5],[50,0,34,4],[50,25,34,23],[50,60,34,41,"fontFamily"],[50,70,34,23],[50,71,34,4],[51,0,35,1],[53,0,42,7],[53,11,42,16,"isLoaded"],[53,19,42,7],[53,20,42,25,"fontFamily"],[53,30,42,7],[53,32,42,37],[54,0,43,4],[54,11,43,11,"fontFamily"],[54,21,43,21],[54,25,43,25,"loaded"],[54,31,43,4],[55,0,44,1],[57,0,51,7],[57,11,51,16,"isLoading"],[57,20,51,7],[57,21,51,26,"fontFamily"],[57,31,51,7],[57,33,51,38],[58,0,52,4],[58,11,52,11,"fontFamily"],[58,21,52,21],[58,25,52,25,"loadPromises"],[58,37,52,4],[59,0,53,1],[61,0,59,7],[61,11,59,22,"loadAsync"],[61,20,59,7],[61,21,59,32,"fontFamilyOrFontMap"],[61,40,59,7],[61,42,59,53,"source"],[61,48,59,7],[62,0,59,7],[63,0,59,7],[64,0,59,7],[65,0,59,7],[66,0,59,7],[67,0,59,7],[67,18,60,8],[67,25,60,15,"fontFamilyOrFontMap"],[67,44,60,8],[67,49,60,39],[67,57,59,7],[68,0,59,7],[69,0,59,7],[70,0,59,7],[72,0,59,7],[72,17,61,12,"source"],[72,23,59,7],[73,0,59,7],[74,0,59,7],[75,0,59,7],[77,0,59,7],[77,18,62,18],[77,22,62,22,"CodedError"],[77,38,62,18],[77,111,62,103,"source"],[77,117,62,18],[77,223,59,7],[79,0,59,7],[80,0,64,14,"fontMap"],[80,12,64,14,"fontMap"],[80,19,59,7],[80,22,64,24,"fontFamilyOrFontMap"],[80,41,59,7],[81,0,65,14,"names"],[81,12,65,14,"names"],[81,17,59,7],[81,20,65,22,"Object"],[81,26,65,28],[81,27,65,29,"keys"],[81,31,65,22],[81,32,65,34,"fontMap"],[81,39,65,22],[81,40,59,7],[82,0,59,7],[83,0,59,7],[83,46,66,14,"Promise"],[83,53,66,21],[83,54,66,22,"all"],[83,57,66,14],[83,58,66,26,"names"],[83,63,66,31],[83,64,66,32,"map"],[83,67,66,26],[83,68,66,36],[83,78,66,36,"name"],[83,82,66,40],[84,0,66,40],[84,21,66,44,"loadFontInNamespaceAsync"],[84,45,66,68],[84,46,66,69,"name"],[84,50,66,68],[84,52,66,75,"fontMap"],[84,59,66,82],[84,60,66,83,"name"],[84,64,66,82],[84,65,66,68],[84,66,66,40],[85,0,66,40],[85,13,66,26],[85,14,66,14],[85,15,59,7],[87,0,59,7],[88,0,59,7],[90,0,59,7],[91,0,59,7],[92,0,59,7],[92,46,69,17,"loadFontInNamespaceAsync"],[92,70,69,41],[92,71,69,42,"fontFamilyOrFontMap"],[92,90,69,41],[92,92,69,63,"source"],[92,98,69,41],[92,99,59,7],[94,0,59,7],[95,0,59,7],[97,0,59,7],[98,0,59,7],[99,0,59,7],[100,0,59,7],[101,0,59,7],[102,0,59,7],[103,0,59,7],[105,0,71,0],[105,11,71,15,"loadFontInNamespaceAsync"],[105,35,71,0],[105,36,71,40,"fontFamily"],[105,46,71,0],[105,48,71,52,"source"],[105,54,71,0],[106,0,71,0],[107,0,71,0],[108,0,71,0],[109,0,71,0],[110,0,71,0],[111,0,71,0],[111,16,72,9,"source"],[111,22,71,0],[112,0,71,0],[113,0,71,0],[114,0,71,0],[116,0,71,0],[116,18,73,14],[116,22,73,18,"CodedError"],[116,38,73,14],[116,110,73,97,"fontFamily"],[116,120,73,14],[116,132,73,113,"source"],[116,138,73,14],[116,212,73,189,"fontFamily"],[116,222,73,14],[116,230,71,0],[118,0,71,0],[119,0,71,0],[119,17,75,8,"loaded"],[119,23,75,14],[119,24,75,15,"fontFamily"],[119,34,75,14],[119,35,71,0],[120,0,71,0],[121,0,71,0],[122,0,71,0],[124,0,71,0],[126,0,71,0],[127,0,71,0],[127,17,78,8,"loadPromises"],[127,29,78,20],[127,30,78,21,"fontFamily"],[127,40,78,20],[127,41,71,0],[128,0,71,0],[129,0,71,0],[130,0,71,0],[132,0,71,0],[132,46,79,15,"loadPromises"],[132,58,79,27],[132,59,79,28,"fontFamily"],[132,69,79,27],[132,70,71,0],[134,0,71,0],[135,0,85,10,"asset"],[135,12,85,10,"asset"],[135,17,71,0],[135,20,85,18],[135,55,85,36,"source"],[135,61,85,18],[135,62,71,0],[137,0,86,4,"loadPromises"],[137,12,86,4,"loadPromises"],[137,24,86,16],[137,25,86,17,"fontFamily"],[137,35,86,16],[137,36,86,4],[137,39,86,32],[138,0,86,32],[139,0,86,32],[140,0,86,32],[141,0,86,32],[142,0,86,32],[143,0,86,32],[144,0,86,32],[144,56,88,18],[144,93,88,38,"fontFamily"],[144,103,88,18],[144,105,88,50,"asset"],[144,110,88,18],[144,111,86,32],[146,0,86,32],[147,0,89,12,"loaded"],[147,22,89,12,"loaded"],[147,28,89,18],[147,29,89,19,"fontFamily"],[147,39,89,18],[147,40,89,12],[147,43,89,33],[147,47,89,12],[149,0,86,32],[150,0,86,32],[151,0,92,12],[151,29,92,19,"loadPromises"],[151,41,92,31],[151,42,92,32,"fontFamily"],[151,52,92,31],[151,53,92,12],[152,0,86,32],[154,0,86,32],[155,0,86,32],[156,0,86,32],[157,0,86,32],[158,0,86,32],[159,0,86,32],[160,0,86,32],[160,13,86,31],[160,15,86,4],[162,0,71,0],[163,0,71,0],[163,46,95,10,"loadPromises"],[163,58,95,22],[163,59,95,23,"fontFamily"],[163,69,95,22],[163,70,71,0],[165,0,71,0],[166,0,71,0],[167,0,71,0],[168,0,71,0],[169,0,71,0],[170,0,71,0],[171,0,71,0],[173,0,100,7],[173,11,100,22,"unloadAllAsync"],[173,25,100,7],[174,0,100,7],[176,0,100,7],[177,0,100,7],[178,0,100,7],[179,0,100,7],[180,0,100,7],[180,16,101,9,"ExpoFontLoader"],[180,40,101,24,"unloadAllAsync"],[180,54,100,7],[181,0,100,7],[182,0,100,7],[183,0,100,7],[185,0,100,7],[185,18,102,14],[185,22,102,18,"UnavailabilityError"],[185,47,102,14],[185,48,102,38],[185,59,102,14],[185,61,102,51],[185,77,102,14],[185,78,100,7],[187,0,100,7],[188,0,100,7],[188,17,104,8,"Object"],[188,23,104,14],[188,24,104,15,"keys"],[188,28,104,8],[188,29,104,20,"loadPromises"],[188,41,104,8],[188,43,104,34,"length"],[188,49,100,7],[189,0,100,7],[190,0,100,7],[191,0,100,7],[193,0,100,7],[193,18,105,14],[193,22,105,18,"CodedError"],[193,38,105,14],[193,107,105,95,"Object"],[193,113,105,101],[193,114,105,102,"keys"],[193,118,105,95],[193,119,105,107,"loadPromises"],[193,131,105,95],[193,133,105,121,"join"],[193,137,105,95],[193,138,105,126],[193,142,105,95],[193,143,105,14],[193,144,100,7],[195,0,100,7],[196,0,107,4],[196,40,107,29,"Object"],[196,46,107,35],[196,47,107,36,"keys"],[196,51,107,29],[196,52,107,41,"loaded"],[196,58,107,29],[196,59,107,4],[196,93,107,50],[197,0,107,15,"fontFamily"],[197,14,107,15,"fontFamily"],[197,24,107,50],[198,0,108,8],[198,21,108,15,"loaded"],[198,27,108,21],[198,28,108,22,"fontFamily"],[198,38,108,21],[198,39,108,8],[199,0,109,5],[201,0,100,7],[202,0,100,7],[202,46,110,10,"ExpoFontLoader"],[202,70,110,25,"unloadAllAsync"],[202,84,110,10],[202,86,100,7],[204,0,100,7],[205,0,100,7],[206,0,100,7],[207,0,100,7],[208,0,100,7],[209,0,100,7],[210,0,100,7],[212,0,119,7],[212,11,119,22,"unloadAsync"],[212,22,119,7],[212,23,119,34,"fontFamilyOrFontMap"],[212,42,119,7],[212,44,119,55,"options"],[212,51,119,7],[213,0,119,7],[214,0,119,7],[215,0,119,7],[216,0,119,7],[217,0,119,7],[218,0,119,7],[218,16,120,9,"ExpoFontLoader"],[218,40,120,24,"unloadAsync"],[218,51,119,7],[219,0,119,7],[220,0,119,7],[221,0,119,7],[223,0,119,7],[223,18,121,14],[223,22,121,18,"UnavailabilityError"],[223,47,121,14],[223,48,121,38],[223,59,121,14],[223,61,121,51],[223,74,121,14],[223,75,119,7],[225,0,119,7],[226,0,119,7],[226,18,123,8],[226,25,123,15,"fontFamilyOrFontMap"],[226,44,123,8],[226,49,123,39],[226,57,119,7],[227,0,119,7],[228,0,119,7],[229,0,119,7],[231,0,119,7],[231,17,124,12,"options"],[231,24,119,7],[232,0,119,7],[233,0,119,7],[234,0,119,7],[236,0,119,7],[236,18,125,18],[236,22,125,22,"CodedError"],[236,38,125,18],[236,112,125,104,"options"],[236,119,125,18],[236,227,119,7],[238,0,119,7],[239,0,127,14,"fontMap"],[239,12,127,14,"fontMap"],[239,19,119,7],[239,22,127,24,"fontFamilyOrFontMap"],[239,41,119,7],[240,0,128,14,"names"],[240,12,128,14,"names"],[240,17,119,7],[240,20,128,22,"Object"],[240,26,128,28],[240,27,128,29,"keys"],[240,31,128,22],[240,32,128,34,"fontMap"],[240,39,128,22],[240,40,119,7],[241,0,119,7],[242,0,119,7],[242,46,129,14,"Promise"],[242,53,129,21],[242,54,129,22,"all"],[242,57,129,14],[242,58,129,26,"names"],[242,63,129,31],[242,64,129,32,"map"],[242,67,129,26],[242,68,129,36],[242,78,129,36,"name"],[242,82,129,40],[243,0,129,40],[243,21,129,44,"unloadFontInNamespaceAsync"],[243,47,129,70],[243,48,129,71,"name"],[243,52,129,70],[243,54,129,77,"fontMap"],[243,61,129,84],[243,62,129,85,"name"],[243,66,129,84],[243,67,129,70],[243,68,129,40],[244,0,129,40],[244,13,129,26],[244,14,129,14],[244,15,119,7],[246,0,119,7],[247,0,119,7],[249,0,119,7],[250,0,119,7],[251,0,119,7],[251,46,132,17,"unloadFontInNamespaceAsync"],[251,72,132,43],[251,73,132,44,"fontFamilyOrFontMap"],[251,92,132,43],[251,94,132,65,"options"],[251,101,132,43],[251,102,119,7],[253,0,119,7],[254,0,119,7],[256,0,119,7],[257,0,119,7],[258,0,119,7],[259,0,119,7],[260,0,119,7],[261,0,119,7],[262,0,119,7],[264,0,134,0],[264,11,134,15,"unloadFontInNamespaceAsync"],[264,37,134,0],[264,38,134,42,"fontFamily"],[264,48,134,0],[264,50,134,54,"options"],[264,57,134,0],[265,0,134,0],[266,0,134,0],[267,0,134,0],[268,0,134,0],[269,0,134,0],[270,0,134,0],[270,16,135,9,"loaded"],[270,22,135,15],[270,23,135,16,"fontFamily"],[270,33,135,15],[270,34,134,0],[271,0,134,0],[272,0,134,0],[273,0,134,0],[275,0,134,0],[277,0,134,0],[278,0,139,8],[278,19,139,15,"loaded"],[278,25,139,21],[278,26,139,22,"fontFamily"],[278,36,139,21],[278,37,139,8],[280,0,134,0],[281,0,145,10,"nativeFontName"],[281,12,145,10,"nativeFontName"],[281,26,134,0],[281,29,145,27],[281,64,145,45,"fontFamily"],[281,74,145,27],[281,75,134,0],[283,0,134,0],[283,16,146,9,"nativeFontName"],[283,30,134,0],[284,0,134,0],[285,0,134,0],[286,0,134,0],[288,0,134,0],[288,18,147,14],[288,22,147,18,"CodedError"],[288,38,147,14],[288,88,134,0],[290,0,134,0],[291,0,134,0],[292,0,134,0],[292,46,149,10,"ExpoFontLoader"],[292,70,149,25,"unloadAsync"],[292,81,149,10],[292,82,149,37,"nativeFontName"],[292,96,149,10],[292,98,149,53,"options"],[292,105,149,10],[292,106,134,0],[294,0,134,0],[295,0,134,0],[296,0,134,0],[297,0,134,0],[298,0,134,0],[299,0,134,0],[300,0,134,0]],"functionMap":{"names":["<global>","processFontFamily","isLoaded","isLoading","loadAsync","names.map$argument_0","loadFontInNamespaceAsync","<anonymous>","unloadAllAsync","unloadAsync","unloadFontInNamespaceAsync"],"mappings":"AAA;OCgB;CDkB;OEO;CFE;OGO;CHE;OIM;oCCO,qDD;CJI;AMC;gCCe;KDQ;CNE;OQI;CRW;OSQ;oCJU,uDI;CTI;AUC;CVgB"}},"type":"js/module"}]}