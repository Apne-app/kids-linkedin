{"dependencies":[{"name":"./_baseTrim","data":{"isAsync":false,"locs":[{"start":{"line":1,"column":15},"end":{"line":1,"column":37}}]}},{"name":"./isObject","data":{"isAsync":false,"locs":[{"start":{"line":2,"column":15},"end":{"line":2,"column":36}}]}},{"name":"./isSymbol","data":{"isAsync":false,"locs":[{"start":{"line":3,"column":15},"end":{"line":3,"column":36}}]}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var baseTrim = _$$_REQUIRE(_dependencyMap[0], \"./_baseTrim\"),\n      isObject = _$$_REQUIRE(_dependencyMap[1], \"./isObject\"),\n      isSymbol = _$$_REQUIRE(_dependencyMap[2], \"./isSymbol\");\n\n  var NAN = 0 / 0;\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n  var reIsBinary = /^0b[01]+$/i;\n  var reIsOctal = /^0o[0-7]+$/i;\n  var freeParseInt = parseInt;\n\n  function toNumber(value) {\n    if (typeof value == 'number') {\n      return value;\n    }\n\n    if (isSymbol(value)) {\n      return NAN;\n    }\n\n    if (isObject(value)) {\n      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n      value = isObject(other) ? other + '' : other;\n    }\n\n    if (typeof value != 'string') {\n      return value === 0 ? value : +value;\n    }\n\n    value = baseTrim(value);\n    var isBinary = reIsBinary.test(value);\n    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n  }\n\n  module.exports = toNumber;\n});","lineCount":36,"map":[[2,0,1,0],[2,6,1,4,"baseTrim"],[2,14,1,12],[2,17,1,15,"require"],[2,28,1,22],[2,62,1,0],[3,0,1,0],[3,6,2,4,"isObject"],[3,14,2,12],[3,17,2,15,"require"],[3,28,2,22],[3,61,1,0],[4,0,1,0],[4,6,3,4,"isSymbol"],[4,14,3,12],[4,17,3,15,"require"],[4,28,3,22],[4,61,1,0],[6,0,6,0],[6,6,6,4,"NAN"],[6,9,6,7],[6,12,6,10],[6,16,6,14],[6,17,6,0],[7,0,9,0],[7,6,9,4,"reIsBadHex"],[7,16,9,14],[7,19,9,17],[7,39,9,0],[8,0,12,0],[8,6,12,4,"reIsBinary"],[8,16,12,14],[8,19,12,17],[8,31,12,0],[9,0,15,0],[9,6,15,4,"reIsOctal"],[9,15,15,13],[9,18,15,16],[9,31,15,0],[10,0,18,0],[10,6,18,4,"freeParseInt"],[10,18,18,16],[10,21,18,19,"parseInt"],[10,29,18,0],[12,0,43,0],[12,11,43,9,"toNumber"],[12,19,43,0],[12,20,43,18,"value"],[12,25,43,0],[12,27,43,25],[13,0,44,2],[13,8,44,6],[13,15,44,13,"value"],[13,20,44,6],[13,24,44,22],[13,32,44,2],[13,34,44,32],[14,0,45,4],[14,13,45,11,"value"],[14,18,45,4],[15,0,46,3],[17,0,47,2],[17,8,47,6,"isSymbol"],[17,16,47,14],[17,17,47,15,"value"],[17,22,47,14],[17,23,47,2],[17,25,47,23],[18,0,48,4],[18,13,48,11,"NAN"],[18,16,48,4],[19,0,49,3],[21,0,50,2],[21,8,50,6,"isObject"],[21,16,50,14],[21,17,50,15,"value"],[21,22,50,14],[21,23,50,2],[21,25,50,23],[22,0,51,4],[22,10,51,8,"other"],[22,15,51,13],[22,18,51,16],[22,25,51,23,"value"],[22,30,51,28],[22,31,51,29,"valueOf"],[22,38,51,16],[22,42,51,40],[22,52,51,16],[22,55,51,53,"value"],[22,60,51,58],[22,61,51,59,"valueOf"],[22,68,51,53],[22,70,51,16],[22,73,51,71,"value"],[22,78,51,4],[23,0,52,4,"value"],[23,6,52,4,"value"],[23,11,52,9],[23,14,52,12,"isObject"],[23,22,52,20],[23,23,52,21,"other"],[23,28,52,20],[23,29,52,12],[23,32,52,31,"other"],[23,37,52,36],[23,40,52,39],[23,42,52,12],[23,45,52,45,"other"],[23,50,52,4],[24,0,53,3],[26,0,54,2],[26,8,54,6],[26,15,54,13,"value"],[26,20,54,6],[26,24,54,22],[26,32,54,2],[26,34,54,32],[27,0,55,4],[27,13,55,11,"value"],[27,18,55,16],[27,23,55,21],[27,24,55,11],[27,27,55,25,"value"],[27,32,55,11],[27,35,55,33],[27,36,55,34,"value"],[27,41,55,4],[28,0,56,3],[30,0,57,2,"value"],[30,4,57,2,"value"],[30,9,57,7],[30,12,57,10,"baseTrim"],[30,20,57,18],[30,21,57,19,"value"],[30,26,57,18],[30,27,57,2],[31,0,58,2],[31,8,58,6,"isBinary"],[31,16,58,14],[31,19,58,17,"reIsBinary"],[31,29,58,27],[31,30,58,28,"test"],[31,34,58,17],[31,35,58,33,"value"],[31,40,58,17],[31,41,58,2],[32,0,59,2],[32,11,59,10,"isBinary"],[32,19,59,18],[32,23,59,22,"reIsOctal"],[32,32,59,31],[32,33,59,32,"test"],[32,37,59,22],[32,38,59,37,"value"],[32,43,59,22],[32,44,59,9],[32,47,60,6,"freeParseInt"],[32,59,60,18],[32,60,60,19,"value"],[32,65,60,24],[32,66,60,25,"slice"],[32,71,60,19],[32,72,60,31],[32,73,60,19],[32,74,60,18],[32,76,60,35,"isBinary"],[32,84,60,43],[32,87,60,46],[32,88,60,43],[32,91,60,50],[32,92,60,18],[32,93,59,9],[32,96,61,7,"reIsBadHex"],[32,106,61,17],[32,107,61,18,"test"],[32,111,61,7],[32,112,61,23,"value"],[32,117,61,7],[32,121,61,32,"NAN"],[32,124,61,7],[32,127,61,38],[32,128,61,39,"value"],[32,133,59,2],[33,0,62,1],[35,0,64,0,"module"],[35,2,64,0,"module"],[35,8,64,6],[35,9,64,7,"exports"],[35,16,64,0],[35,19,64,17,"toNumber"],[35,27,64,0]],"functionMap":{"names":["<global>","toNumber"],"mappings":"AAA;AC0C;CDmB"}},"type":"js/module"}]}