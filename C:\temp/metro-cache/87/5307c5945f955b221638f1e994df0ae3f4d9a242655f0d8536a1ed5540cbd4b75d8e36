{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"isAsync":false}},{"name":"../derived/useCode","data":{"isAsync":false}},{"name":"./AnimatedNode","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _useCode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"../derived/useCode\"));\n\n  var _AnimatedNode = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"./AnimatedNode\"));\n\n  function assertNodesNotNull(code, children, exec) {\n    if (!code) {\n      var error = !children ? \"Got \\\"\" + typeof children + \"\\\" type passed to children\" : \"Got \\\"\" + typeof exec + \"\\\" type passed to exec\";\n      throw new Error(\"<Animated.Code /> expects the 'exec' prop or children to be an animated node or a function returning an animated node. \" + error);\n    }\n  }\n\n  function Code(_ref) {\n    var exec = _ref.exec,\n        children = _ref.children,\n        _ref$dependencies = _ref.dependencies,\n        dependencies = _ref$dependencies === void 0 ? [] : _ref$dependencies;\n    var nodes = children || exec;\n    var code = null;\n\n    if (nodes instanceof _AnimatedNode.default) {\n      code = function code() {\n        return nodes;\n      };\n    } else if (typeof nodes === 'function') {\n      code = nodes;\n    }\n\n    assertNodesNotNull(code, children, exec);\n    (0, _useCode.default)(code, dependencies);\n    return null;\n  }\n\n  var _default = Code;\n  exports.default = _default;\n});","lineCount":43,"map":[[9,0,1,0],[11,0,2,0],[13,0,4,0],[13,11,4,9,"assertNodesNotNull"],[13,29,4,0],[13,30,4,28,"code"],[13,34,4,0],[13,36,4,34,"children"],[13,44,4,0],[13,46,4,44,"exec"],[13,50,4,0],[13,52,4,50],[14,0,5,2],[14,8,5,6],[14,9,5,7,"code"],[14,13,5,2],[14,15,5,13],[15,0,6,4],[15,10,6,10,"error"],[15,15,6,15],[15,18,6,18],[15,19,6,19,"children"],[15,27,6,18],[15,41,7,16],[15,48,7,23,"children"],[15,56,6,18],[15,101,8,16],[15,108,8,23,"exec"],[15,112,6,18],[15,139,6,4],[16,0,10,4],[16,12,10,10],[16,16,10,14,"Error"],[16,21,10,10],[16,146,11,128,"error"],[16,151,10,10],[16,152,10,4],[17,0,13,3],[18,0,14,1],[20,0,16,0],[20,11,16,9,"Code"],[20,15,16,0],[20,22,16,53],[21,0,16,53],[21,8,16,16,"exec"],[21,12,16,53],[21,20,16,16,"exec"],[21,24,16,53],[22,0,16,53],[22,8,16,22,"children"],[22,16,16,53],[22,24,16,22,"children"],[22,32,16,53],[23,0,16,53],[23,33,16,32,"dependencies"],[23,45,16,53],[24,0,16,53],[24,8,16,32,"dependencies"],[24,20,16,53],[24,54,16,47],[24,56,16,53],[25,0,17,2],[25,8,17,8,"nodes"],[25,13,17,13],[25,16,17,16,"children"],[25,24,17,24],[25,28,17,28,"exec"],[25,32,17,2],[26,0,19,2],[26,8,19,6,"code"],[26,12,19,10],[26,15,19,13],[26,19,19,2],[28,0,20,2],[28,8,20,6,"nodes"],[28,13,20,11],[28,25,20,23,"AnimatedNode"],[28,46,20,2],[28,48,20,37],[29,0,21,4,"code"],[29,6,21,4,"code"],[29,10,21,8],[29,13,21,11],[30,0,21,11],[30,15,21,17,"nodes"],[30,20,21,11],[31,0,21,11],[31,7,21,4],[32,0,22,3],[32,5,20,2],[32,11,22,9],[32,15,22,13],[32,22,22,20,"nodes"],[32,27,22,13],[32,32,22,30],[32,42,22,9],[32,44,22,42],[33,0,23,4,"code"],[33,6,23,4,"code"],[33,10,23,8],[33,13,23,11,"nodes"],[33,18,23,4],[34,0,24,3],[36,0,26,2,"assertNodesNotNull"],[36,4,26,2,"assertNodesNotNull"],[36,22,26,20],[36,23,26,21,"code"],[36,27,26,20],[36,29,26,27,"children"],[36,37,26,20],[36,39,26,37,"exec"],[36,43,26,20],[36,44,26,2],[37,0,28,2],[37,26,28,10,"code"],[37,30,28,2],[37,32,28,16,"dependencies"],[37,44,28,2],[38,0,29,2],[38,11,29,9],[38,15,29,2],[39,0,30,1],[41,17,32,15,"Code"],[41,21]],"functionMap":{"names":["<global>","assertNodesNotNull","Code","code"],"mappings":"AAA;ACG;CDU;AEE;WCK,WD;CFS"}},"type":"js/module"}]}