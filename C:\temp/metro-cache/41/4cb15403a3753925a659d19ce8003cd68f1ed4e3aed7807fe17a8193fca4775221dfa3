{"dependencies":[{"name":"./core","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  ;\n\n  (function (root, factory) {\n    if (typeof exports === \"object\") {\n      module.exports = exports = factory(_$$_REQUIRE(_dependencyMap[0], \"./core\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      define([\"./core\"], factory);\n    } else {\n      factory(root.CryptoJS);\n    }\n  })(this, function (CryptoJS) {\n    (function () {\n      var C = CryptoJS;\n      var C_lib = C.lib;\n      var Base = C_lib.Base;\n      var C_enc = C.enc;\n      var Utf8 = C_enc.Utf8;\n      var C_algo = C.algo;\n      var HMAC = C_algo.HMAC = Base.extend({\n        init: function init(hasher, key) {\n          hasher = this._hasher = new hasher.init();\n\n          if (typeof key == 'string') {\n            key = Utf8.parse(key);\n          }\n\n          var hasherBlockSize = hasher.blockSize;\n          var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n          if (key.sigBytes > hasherBlockSizeBytes) {\n            key = hasher.finalize(key);\n          }\n\n          key.clamp();\n          var oKey = this._oKey = key.clone();\n          var iKey = this._iKey = key.clone();\n          var oKeyWords = oKey.words;\n          var iKeyWords = iKey.words;\n\n          for (var i = 0; i < hasherBlockSize; i++) {\n            oKeyWords[i] ^= 0x5c5c5c5c;\n            iKeyWords[i] ^= 0x36363636;\n          }\n\n          oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n          this.reset();\n        },\n        reset: function reset() {\n          var hasher = this._hasher;\n          hasher.reset();\n          hasher.update(this._iKey);\n        },\n        update: function update(messageUpdate) {\n          this._hasher.update(messageUpdate);\n\n          return this;\n        },\n        finalize: function finalize(messageUpdate) {\n          var hasher = this._hasher;\n          var innerHash = hasher.finalize(messageUpdate);\n          hasher.reset();\n          var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n          return hmac;\n        }\n      });\n    })();\n  });\n});","lineCount":69,"map":[[2,0,1,0],[4,0,1,2],[4,13,1,12,"root"],[4,17,1,2],[4,19,1,18,"factory"],[4,26,1,2],[4,28,1,27],[5,0,2,1],[5,8,2,5],[5,15,2,12,"exports"],[5,22,2,5],[5,27,2,24],[5,35,2,1],[5,37,2,34],[6,0,4,2,"module"],[6,6,4,2,"module"],[6,12,4,8],[6,13,4,9,"exports"],[6,20,4,2],[6,23,4,19,"exports"],[6,30,4,26],[6,33,4,29,"factory"],[6,40,4,36],[6,41,4,37,"require"],[6,52,4,44],[6,81,4,36],[6,82,4,2],[7,0,5,2],[7,5,2,1],[7,11,6,6],[7,15,6,10],[7,22,6,17,"define"],[7,28,6,10],[7,33,6,28],[7,43,6,10],[7,47,6,42,"define"],[7,53,6,48],[7,54,6,49,"amd"],[7,57,6,6],[7,59,6,54],[8,0,8,2,"define"],[8,6,8,2,"define"],[8,12,8,8],[8,13,8,9],[8,14,8,10],[8,22,8,9],[8,23,8,8],[8,25,8,21,"factory"],[8,32,8,8],[8,33,8,2],[9,0,9,2],[9,5,6,6],[9,11,10,6],[10,0,12,2,"factory"],[10,6,12,2,"factory"],[10,13,12,9],[10,14,12,10,"root"],[10,18,12,14],[10,19,12,15,"CryptoJS"],[10,27,12,9],[10,28,12,2],[11,0,13,2],[12,0,14,1],[12,3,1,2],[12,5,14,2],[12,9,1,2],[12,11,14,8],[12,21,14,18,"CryptoJS"],[12,29,14,8],[12,31,14,28],[13,0,16,2],[13,17,16,14],[14,0,18,5],[14,10,18,9,"C"],[14,11,18,10],[14,14,18,13,"CryptoJS"],[14,22,18,5],[15,0,19,5],[15,10,19,9,"C_lib"],[15,15,19,14],[15,18,19,17,"C"],[15,19,19,18],[15,20,19,19,"lib"],[15,23,19,5],[16,0,20,5],[16,10,20,9,"Base"],[16,14,20,13],[16,17,20,16,"C_lib"],[16,22,20,21],[16,23,20,22,"Base"],[16,27,20,5],[17,0,21,5],[17,10,21,9,"C_enc"],[17,15,21,14],[17,18,21,17,"C"],[17,19,21,18],[17,20,21,19,"enc"],[17,23,21,5],[18,0,22,5],[18,10,22,9,"Utf8"],[18,14,22,13],[18,17,22,16,"C_enc"],[18,22,22,21],[18,23,22,22,"Utf8"],[18,27,22,5],[19,0,23,5],[19,10,23,9,"C_algo"],[19,16,23,15],[19,19,23,18,"C"],[19,20,23,19],[19,21,23,20,"algo"],[19,25,23,5],[20,0,28,5],[20,10,28,9,"HMAC"],[20,14,28,13],[20,17,28,16,"C_algo"],[20,23,28,22],[20,24,28,23,"HMAC"],[20,28,28,16],[20,31,28,30,"Base"],[20,35,28,34],[20,36,28,35,"extend"],[20,42,28,30],[20,43,28,42],[21,0,39,9,"init"],[21,8,39,9,"init"],[21,12,39,13],[21,14,39,15],[21,28,39,25,"hasher"],[21,34,39,15],[21,36,39,33,"key"],[21,39,39,15],[21,41,39,38],[22,0,41,13,"hasher"],[22,10,41,13,"hasher"],[22,16,41,19],[22,19,41,22],[22,24,41,27,"_hasher"],[22,31,41,22],[22,34,41,37],[22,38,41,41,"hasher"],[22,44,41,47],[22,45,41,48,"init"],[22,49,41,37],[22,51,41,13],[24,0,44,13],[24,14,44,17],[24,21,44,24,"key"],[24,24,44,17],[24,28,44,31],[24,36,44,13],[24,38,44,41],[25,0,45,17,"key"],[25,12,45,17,"key"],[25,15,45,20],[25,18,45,23,"Utf8"],[25,22,45,27],[25,23,45,28,"parse"],[25,28,45,23],[25,29,45,34,"key"],[25,32,45,23],[25,33,45,17],[26,0,46,14],[28,0,49,13],[28,14,49,17,"hasherBlockSize"],[28,29,49,32],[28,32,49,35,"hasher"],[28,38,49,41],[28,39,49,42,"blockSize"],[28,48,49,13],[29,0,50,13],[29,14,50,17,"hasherBlockSizeBytes"],[29,34,50,37],[29,37,50,40,"hasherBlockSize"],[29,52,50,55],[29,55,50,58],[29,56,50,13],[31,0,53,13],[31,14,53,17,"key"],[31,17,53,20],[31,18,53,21,"sigBytes"],[31,26,53,17],[31,29,53,32,"hasherBlockSizeBytes"],[31,49,53,13],[31,51,53,54],[32,0,54,17,"key"],[32,12,54,17,"key"],[32,15,54,20],[32,18,54,23,"hasher"],[32,24,54,29],[32,25,54,30,"finalize"],[32,33,54,23],[32,34,54,39,"key"],[32,37,54,23],[32,38,54,17],[33,0,55,14],[35,0,58,13,"key"],[35,10,58,13,"key"],[35,13,58,16],[35,14,58,17,"clamp"],[35,19,58,13],[36,0,61,13],[36,14,61,17,"oKey"],[36,18,61,21],[36,21,61,24],[36,26,61,29,"_oKey"],[36,31,61,24],[36,34,61,37,"key"],[36,37,61,40],[36,38,61,41,"clone"],[36,43,61,37],[36,45,61,13],[37,0,62,13],[37,14,62,17,"iKey"],[37,18,62,21],[37,21,62,24],[37,26,62,29,"_iKey"],[37,31,62,24],[37,34,62,37,"key"],[37,37,62,40],[37,38,62,41,"clone"],[37,43,62,37],[37,45,62,13],[38,0,65,13],[38,14,65,17,"oKeyWords"],[38,23,65,26],[38,26,65,29,"oKey"],[38,30,65,33],[38,31,65,34,"words"],[38,36,65,13],[39,0,66,13],[39,14,66,17,"iKeyWords"],[39,23,66,26],[39,26,66,29,"iKey"],[39,30,66,33],[39,31,66,34,"words"],[39,36,66,13],[41,0,69,13],[41,15,69,18],[41,19,69,22,"i"],[41,20,69,23],[41,23,69,26],[41,24,69,13],[41,26,69,29,"i"],[41,27,69,30],[41,30,69,33,"hasherBlockSize"],[41,45,69,13],[41,47,69,50,"i"],[41,48,69,51],[41,50,69,13],[41,52,69,55],[42,0,70,17,"oKeyWords"],[42,12,70,17,"oKeyWords"],[42,21,70,26],[42,22,70,27,"i"],[42,23,70,26],[42,24,70,17],[42,28,70,33],[42,38,70,17],[43,0,71,17,"iKeyWords"],[43,12,71,17,"iKeyWords"],[43,21,71,26],[43,22,71,27,"i"],[43,23,71,26],[43,24,71,17],[43,28,71,33],[43,38,71,17],[44,0,72,14],[46,0,73,13,"oKey"],[46,10,73,13,"oKey"],[46,14,73,17],[46,15,73,18,"sigBytes"],[46,23,73,13],[46,26,73,29,"iKey"],[46,30,73,33],[46,31,73,34,"sigBytes"],[46,39,73,29],[46,42,73,45,"hasherBlockSizeBytes"],[46,62,73,13],[47,0,76,13],[47,15,76,18,"reset"],[47,20,76,13],[48,0,77,10],[48,9,28,42],[49,0,86,9,"reset"],[49,8,86,9,"reset"],[49,13,86,14],[49,15,86,16],[49,32,86,28],[50,0,88,13],[50,14,88,17,"hasher"],[50,20,88,23],[50,23,88,26],[50,28,88,31,"_hasher"],[50,35,88,13],[51,0,91,13,"hasher"],[51,10,91,13,"hasher"],[51,16,91,19],[51,17,91,20,"reset"],[51,22,91,13],[52,0,92,13,"hasher"],[52,10,92,13,"hasher"],[52,16,92,19],[52,17,92,20,"update"],[52,23,92,13],[52,24,92,27],[52,29,92,32,"_iKey"],[52,34,92,13],[53,0,93,10],[53,9,28,42],[54,0,107,9,"update"],[54,8,107,9,"update"],[54,14,107,15],[54,16,107,17],[54,32,107,27,"messageUpdate"],[54,45,107,17],[54,47,107,42],[55,0,108,13],[55,15,108,18,"_hasher"],[55,22,108,13],[55,23,108,26,"update"],[55,29,108,13],[55,30,108,33,"messageUpdate"],[55,43,108,13],[57,0,111,13],[57,17,111,20],[57,21,111,13],[58,0,112,10],[58,9,28,42],[59,0,128,9,"finalize"],[59,8,128,9,"finalize"],[59,16,128,17],[59,18,128,19],[59,36,128,29,"messageUpdate"],[59,49,128,19],[59,51,128,44],[60,0,130,13],[60,14,130,17,"hasher"],[60,20,130,23],[60,23,130,26],[60,28,130,31,"_hasher"],[60,35,130,13],[61,0,133,13],[61,14,133,17,"innerHash"],[61,23,133,26],[61,26,133,29,"hasher"],[61,32,133,35],[61,33,133,36,"finalize"],[61,41,133,29],[61,42,133,45,"messageUpdate"],[61,55,133,29],[61,56,133,13],[62,0,134,13,"hasher"],[62,10,134,13,"hasher"],[62,16,134,19],[62,17,134,20,"reset"],[62,22,134,13],[63,0,135,13],[63,14,135,17,"hmac"],[63,18,135,21],[63,21,135,24,"hasher"],[63,27,135,30],[63,28,135,31,"finalize"],[63,36,135,24],[63,37,135,40],[63,42,135,45,"_oKey"],[63,47,135,40],[63,48,135,51,"clone"],[63,53,135,40],[63,56,135,59,"concat"],[63,62,135,40],[63,63,135,66,"innerHash"],[63,72,135,40],[63,73,135,24],[63,74,135,13],[64,0,137,13],[64,17,137,20,"hmac"],[64,21,137,13],[65,0,138,10],[66,0,28,42],[66,7,28,30],[66,8,28,5],[67,0,140,2],[67,5,16,2],[67,8,16,1],[68,0,143,1],[68,3,1,2],[68,4,1,1]],"functionMap":{"names":["<global>","<anonymous>","Base.extend$argument_0.init","Base.extend$argument_0.reset","Base.extend$argument_0.update","Base.extend$argument_0.finalize"],"mappings":"AAA,EC;CDa,OC;eCyB;UDsC;gBES;UFO;iBGc;UHK;mBIgB;UJU;CDK"}},"type":"js/module"}]}